[
  {
    "q_no": 1,
    "question": "A patient undergoing general anesthesia develops left lung collapse following intubation. On auscultation, breath sounds are heard only on the right side. What is the most likely cause of this condition?",
    "options": {
      "A": "Right endobronchial intubation",
      "B": "Mucus secretions obstructing the endotracheal tube",
      "C": "Pneumothorax on the left side due to positive pressure ventilation",
      "D": "Bronchospasm"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Right endobronchial intubation Explanation: The physical finding of breath sounds heard only on the right side with absence on the left strongly supports this diagnosis of right endobronchial intubation (right mainstem intubation) . When an endotracheal tube is advanced too far, it typically enters the right mainstem bronchus due to its more vertical orientation compared to the left bronchus. This results in ventilation of only the right lung while the left lung collapses due to lack of ventilation. Mucus secretions obstructing the endotracheal tube (Option B) would typically cause bilateral decreased air entry or generalized poor air movement rather than unilateral findings. If the tube were completely obstructed, there would be no or diminished breath sounds on both sides. Pneumothorax on the left side due to positive pressure ventilation (Option C) could present with diminished breath sounds on the left but would typically have additional signs such as hypoxemia, hypotension, tracheal deviation toward the right, and hyperresonance to percussion on the left side. Bronchospasm (Option D) typically presents with bilateral wheezing, prolonged expiration, and increased airway pressures. It would not cause a complete absence of breath sounds on one side with normal findings on the other. Reference: Morgan & Mikhail's Clinical Anesthesiology, 6th Edition, Page 317-319",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Ventilation-Previous Year Questions"
  },
  {
    "q_no": 2,
    "question": "What is the primary purpose of PEEP (Positive End-Expiratory Pressure) in mechanical ventilation?",
    "options": {
      "A": "To increase respiratory rate",
      "B": "To reduce carbon dioxide levels",
      "C": "To increase the VR",
      "D": "To open alveoli and prevent atelectasis"
    },
    "correct_answer": "D",
    "explanation": "keep alveoli open at the end of exhalation, preventing them from collapsing (atelectasis). This helps improve oxygenation and maintain lung function, especially in patients with acute respiratory distress syndrome (ARDS) or other conditions leading to alveolar collapse. Incorrect Options: Options A, B, and C are not the purpose of PEEP.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Ventilation-Previous Year Questions"
  },
  {
    "q_no": 3,
    "question": "Which of the following is the use of the Mallampatti classification?",
    "options": {
      "A": "Endotracheal intubation",
      "B": "To evaluate the risk of surgery",
      "C": "To evaluate the pros and cons of surgery",
      "D": "To evaluate the fitness of the patient"
    },
    "correct_answer": "A",
    "explanation": "the difficulty of endotracheal intubation. It evaluates the visibility of anatomical structures in the oral cavity to predict the ease or difficulty of securing the airway. Mallampati Airway Classification Mallampati Classification: (Mnemonic - PUSH - Pillars, Uvula, Soft palate, Hard palate) Class I: Faucial pillars, uvula, soft palate, and hard palate are visualized. Class II: The base of the uvula, soft palate, and hard palate are visualized. Class III: Soft palate and hard palate are visualized. Class IV: Hard palate only is visualized. Class 0: Any part of the epiglottis is visible (easy laryngoscopy with difficult airway management) Incorrect Options : Options B, C, and D: The Mallampati classification is not used to evaluate the overall risk associated with surgery and does not provide insights into the pros and cons of surgical procedures. It does not assess a patient's general fitness for surgery. Reference: Miller’s Anesthesia, 9th edition, Page 925. Morgan and Mikhail’s Clinical Anesthesiology, 7th edition, Page 571.",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Ventilation-Previous_Year_Questions_Q3_exp.jpg",
    "chapter_heading": "Ventilation-Previous Year Questions"
  },
  {
    "q_no": 4,
    "question": "You are a junior resident in the ICU. A senior doctor asks you to manage a mechanically ventilated patient whose arterial blood gasses showed features of hypoventilation with respiratory acidosis. Which of the following parameters can you modulate to improve the condition of the patient?",
    "options": {
      "A": "Decrease FiO2",
      "B": "Increase respiratory rate",
      "C": "Increased PEEP",
      "D": "Increase plateau pressure"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Increase respiratory rate Explanation: In the above case, the patient has features of hypoventilation along with respiratory acidosis. This indicates that it is a type 2 respiratory failure. It is corrected by increasing the respiratory rate which increases ventilation and decreases CO2 concentration and provides improvement. Therefore in order to correct hypoxia and hypercapnia, respiratory rate needs to be increased. Four key Ventilator parameters: Respiratory Rate (RR): Breaths per minute. Primarily affects CO2 removal (ventilation). Tidal Volume (TV): Volume of air per breath. Also affects CO2 removal (ventilation). PEEP (Positive End-Expiratory Pressure): Pressure in the lungs at the end of expiration. Primarily affects oxygenation. FiO2 (Fraction of Inspired Oxygen): Percentage of oxygen in the inspired air. Directly affects oxygen delivery. Note: PEEP and FiO2 are for oxygenation , while RR and Tidal Volume are for ventilation (CO2 removal). ABG Abnormality Ventilator Adjustment ↓ PaO2 ↑ PEEP or ↑ FiO2 (Option C ruled out) ↓ PaCO2 ↓ respiratory rate or ↓ tidal volume ↑ PaCO2 ↑ respiratory rate or ↑ tidal volume (Option B) Preferable to adjust RR (Respiratory Rate) over tidal volume in situations where low tidal volume ventilation is beneficial (i.e., ARDS). Decrease FiO2 (Option A): reduces the fraction of inspired oxygen. While important in some situations, it doesn't directly address the CO2 buildup causing respiratory acidosis. Increased PEEP (Option C): (Positive End-Expiratory Pressure) can improve oxygenation but doesn't directly help with CO2 removal. Increase plateau pressure (Option D): reflects the pressure in the lungs during a breath hold. While important to monitor to prevent lung injury, simply increasing it doesn't directly improve CO2 removal and can also be harmful. Reference: https://www.ncbi.nlm.nih.gov/books/NBK441904/ https://www.ncbi.nlm.nih.gov/books/NBK448186/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Ventilation-Previous Year Questions"
  },
  {
    "q_no": 5,
    "question": "Which of the following is associated with respiratory alkalosis ?",
    "options": {
      "A": "Assisted control mode ventilation",
      "B": "Controlled mandatory",
      "C": "Pressure controlled",
      "D": "SIMV"
    },
    "correct_answer": "A",
    "explanation": "characterized by a decrease in arterial carbon dioxide levels, leading to an increase in blood pH. It is caused by hyperventilation or excessive elimination of CO 2 from the body. In assisted control mode ventilation, the ventilator delivers breaths at a preset rate and tidal volume, and the patient can initiate additional breaths on their own. This mode of ventilation can lead to increased minute ventilation and respiratory alkalosis due to excessive elimination of CO 2 . Incorrect Options: Option B - Controlled mandatory ventilation (CMV): In this mode, the ventilator delivers breaths at a preset rate and tidal volume, and the patient has no control over initiating breaths. It does not typically cause respiratory alkalosis as the ventilator controls the entire breathing pattern. Option C - Pressure-controlled ventilation: This mode of ventilation delivers breaths with a set inspiratory pressure and allows the patient to determine the respiratory rate and tidal volume. While it can affect blood gas parameters, it does not specifically lead to respiratory alkalosis. Option D - SIMV (Synchronized Intermittent Mandatory Ventilation): SIMV is a mode of ventilation that combines mandatory breaths delivered by the ventilator with the patient's spontaneous breaths. It allows the patient to breathe spontaneously between the mandatory breaths. SIMV does not directly cause respiratory alkalosis. Reference: Morgan & Mikhail's Clinical Anesthesiology",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Ventilation-Previous Year Questions"
  }
]