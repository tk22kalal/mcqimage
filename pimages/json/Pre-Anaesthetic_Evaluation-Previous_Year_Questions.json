[
  {
    "q_no": 1,
    "question": "Which of the following comes under ASA grade 1?",
    "options": {
      "A": "Healthy patient",
      "B": "Mild disease",
      "C": "Moderate disease",
      "D": "Morbid patient"
    },
    "correct_answer": "A",
    "explanation": "are completely healthy and free from systemic illness, without any comorbidities. Such patients are typically considered at minimal risk for anesthesia-related complications. American Society of Anesthesiologists physical status classification of patients: Class Definition 1 Normal healthy patient (Option A) 2 Patient with mild systemic disease (no functional limitations), normal pregnancy (Option B) 3 Patient with severe systemic disease (some functional limitations) 4 Patient with severe systemic disease that is a constant threat to life (functionality incapacitated) 5 Moribund patient who is not expected to survive without the operation (Option D) 6 Brain-dead patient whose organs are being removed for donor E If the procedure is an emergency, the physical status is followed by “E” (e.g., “2E”) Other incorrect options: Moderate disease (Option C): Is not a part of the ASA classification. Reference: Morgan and Mikhail’s Clinical Anesthesiology 7th edition, PDF pages 547-548",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 2,
    "question": "Preoperative assessment of oral cavity for endotracheal intubation in an adult is done by:",
    "options": {
      "A": "Mallampatti score",
      "B": "Conmack lehane",
      "C": "ASA grading",
      "D": "AHA grading"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Mallampatti score Explanation: This score is used to evaluate the oral cavity preoperatively to predict the ease of endotracheal intubation. It is based on visualisation of the oropharyngeal structures (soft palate, uvula, and tonsillar pillars) when the patient opens their mouth widely without phonating. It is categorised into four classes, with higher classes indicating a more difficult airway. It is the standard tool for assessing oral cavity and airway accessibility. Incorrect Options: Cormack-Lehane (option B): This grading system evaluates the laryngeal view during direct laryngoscopy, not during the preoperative oral cavity assessment. It is useful for classifying intubation difficulty once the laryngoscope is in place. ASA grading (option C): The American Society of Anesthesiologists (ASA) grading assesses a patient’s physical status to estimate perioperative risk, not specifically for airway assessment. AHA grading (option D): This grading does not exist for airway or oral cavity assessment and is irrelevant in this context. Reference: https://pmc.ncbi.nlm.nih.gov/articles/PMC8022073/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 3,
    "question": "Which investigation yields the most precise prognostic information for predicting the risk of perioperative cardiac complications among the options provided?",
    "options": {
      "A": "Exercise ECG testing",
      "B": "Dobutamine stress echocardiography",
      "C": "Myocardial perfusion scintigraphy",
      "D": "Coronary angiography"
    },
    "correct_answer": "B",
    "explanation": "provides precise prognostic information for perioperative cardiac complications by directly assessing myocardial function under stress conditions. It evaluates myocardial ischemia and viability, which are critical for assessing perioperative cardiac risk, especially in patients undergoing non-cardiac surgery. Key points: High sensitivity : Dobutamine stress echocardiography is highly sensitive in detecting inducible ischemia, a critical predictor of perioperative cardiac complications. Risk stratification : It aids in stratifying patients undergoing major noncardiac surgery by assessing cardiac function under stress, ensuring appropriate management and intervention. Proven efficacy : Studies demonstrate its superior ability to predict postoperative outcomes compared to traditional clinical assessments, enhancing decision-making and patient safety. Incorrect Options: Exercise ECG testing (option A): While useful in detecting ischemic changes during physical stress, it has lower sensitivity and specificity compared to imaging modalities. It is also less effective in patients unable to exercise adequately or with baseline ECG abnormalities. Myocardial perfusion scintigraphy (option C): This test evaluates myocardial perfusion and ischemia but is less commonly used compared to stress echocardiography for perioperative cardiac risk stratification. It is more useful for chronic ischemia than acute risk prediction. Coronary angiography (option D): While this is the gold standard for diagnosing coronary artery disease, it is invasive and not typically used solely for perioperative risk assessment unless clinically indicated, such as in symptomatic or high-risk patients. Reference: Miller’s Anesthesia, 9th Edition, Page 1965 Miller’s Anesthesia, 8th Edition, Page 1095 Morgan and Mikhail’s Clinical Anaesthesia, 5th Edition, Page 530 https://pubmed.ncbi.nlm.nih.gov/10807472/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 4,
    "question": "What is the purpose of using glycopyrrolate as a pre-anesthetic agent?",
    "options": {
      "A": "Reducing the secretions",
      "B": "Sedative effect",
      "C": "Skeletal muscle relaxant",
      "D": "Anxiolytic"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Reducing the secretions Explanation: Glycopyrrolate is primarily used as a pre-anesthetic agent for reducing secretions in the respiratory tract and other body systems. It belongs to a class of drugs called anticholinergics, which work by inhibiting the effects of acetylcholine, a neurotransmitter involved in various bodily functions. In the context of anesthesia, excessive secretions in the respiratory tract can interfere with the airway management and ventilation during surgery. By administering glycopyrrolate before anesthesia, the production of respiratory secretions is reduced, improving the visibility of the surgical field and facilitating proper respiratory function. Sedative effect (Option B): Glycopyrrolate is not as a sedative. Propofol and ketamine are examples of sedatives. Skeletal muscle relaxant (Option C): Glycopyrrolate is not used as a skeletal muscle relaxant. Rocuronium and succinylcholine are examples of skeletal muscle relaxants. Anxiolytic (Option D): Glycopyrrolate is not used as an anxiolytic. Benzodiazepines are used as anxiolytics. Reference: Miller's Anaesthesia, 7 th Edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 5,
    "question": "How long should elective surgery be deferred for a patient who had a cough and fever, after he has recovered from COVID-19, and has not required any hospitalization?",
    "options": {
      "A": "6 weeks",
      "B": "8-10 weeks",
      "C": "12 weeks",
      "D": "4 weeks"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) 6 weeks Explanation: For a patient who has recovered from COVID-19 and has not required hospitalization, elective surgery should typically be deferred for 6 weeks. Studies suggest that performing surgery within 6 weeks of a COVID-19 diagnosis may be associated with increased postoperative complications . Delaying surgery beyond this period can reduce such risks. Time since COVID-19 infection Recommendation Less than 2 Weeks Elective surgeries should not occur within two weeks of a COVID-19 infection, allowing anesthesiologists and surgeons to assess the severity of the patient's symptoms and reduce unnecessary risk of transmitting the infection to healthcare professionals. 2 to 7 Weeks Between two and seven weeks after the patient's COVID-19 infection, anesthesiologists and surgeons should conduct a risk assessment, considering factors such as age, comorbidities, severity of the infection, and surgical risk. If the patient and surgery are determined to be low risk, the procedure may be scheduled during this period after thorough discussion and shared decision-making with the patient. More than 7 Weeks Delay of the surgery beyond seven weeks should be considered if the patient continues to have COVID-19 symptoms or other health concerns that may increase the risk of proceeding with surgery. Incorrect Options: 8-10 weeks (Option B): Delaying elective surgery for 8-10 weeks post-COVID-19 recovery may further reduce postoperative risks, especially in patients with persistent symptoms or those who had severe infections. 12 weeks (Option C): While a 12-week delay might be considered for patients with severe or prolonged symptoms, current guidelines do not universally recommend such an extended delay for all patients. 4 weeks (Option D): Undergoing elective surgery within 4 weeks of a COVID-19 diagnosis is generally associated with higher risks of postoperative complications. A minimum delay o f 6-7 weeks is recommended to mitigate these risks. Reference: https://www.asahq.org/about-asa/newsroom/news-releases/2023/06/asa-and-apsf-release-updated-reco mmendations-for-elective-surgery-after-covid-19-infection ?",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 6,
    "question": "Preoperative assessment of oral cavity for endotracheal intubation in an adult is done by:",
    "options": {
      "A": "Mallampatti score",
      "B": "Conmack lehane",
      "C": "ASA grading",
      "D": "AHA grading"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Mallampatti score Explanation: This score is used to evaluate the oral cavity preoperatively to predict the ease of endotracheal intubation. It is based on visualisation of the oropharyngeal structures (soft palate, uvula, and tonsillar pillars) when the patient opens their mouth widely without phonating. It is categorised into four classes, with higher classes indicating a more difficult airway. It is the standard tool for assessing oral cavity and airway accessibility. Cormack-Lehane (option B): This grading system evaluates the laryngeal view during direct laryngoscopy, not during the preoperative oral cavity assessment. It is useful for classifying intubation difficulty once the laryngoscope is in place. ASA grading (option C): The American Society of Anesthesiologists (ASA) grading assesses a patient’s physical status to estimate perioperative risk, not specifically for airway assessment. AHA grading (option D): This grading does not exist for airway or oral cavity assessment and is irrelevant in this context. Reference: https://pmc.ncbi.nlm.nih.gov/articles/PMC8022073/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 7,
    "question": "When assessing a patient before anesthesia, the oral cavity should be examined. The image provided below displays the examined cavity. It illustrates:",
    "options": {
      "A": "Mallampati class IV",
      "B": "Mallampati Class II",
      "C": "Mallampati class III",
      "D": "Mallampati class I"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Mallampati class III Explanation: The picture shows Mallampati Class III as only the base of the uvula is visible. Modified Mallampati scoring Class 0 Any part of the epiglottis is visible Class I Faucial pillars, uvula, and soft palate are visualized. (Option D ruled out) Class II Uvula and soft palate are visualized. Tip of uvula is not visualized. (Option B ruled out) Class III Only Soft palate and base of the uvula are visible. Predict difficult intubation Class IV Only hard palate is visible. (Option ruled A out)",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Pre-Anaesthetic_Evaluation-Previous_Year_Questions_Q7_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 8,
    "question": "In a 45-year-old patient undergoing a preoperative assessment for a surgical procedure, which classification of Mallampati score is assigned based on the following description: Hard palate, soft palate, uvula, tip of the uvula, and tonsil pillars are visible. No oropharyngeal structures are obstructing the view.",
    "options": {
      "A": "Grade I",
      "B": "Grade II",
      "C": "Grade III",
      "D": "Grade IV"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Grade I Explanation: In the scenario described, the entire soft palate, uvula, pillars, and tonsillar region can be seen without any obstruction. The correct classification is Grade I. This indicates an optimal airway visualization and ease of intubation. The Mallampati classification is used to predict the ease of intubation based on the visibility of pharyngeal structures during mouth opening and tongue protrusion. Mallampati Classification: (Mnemonic - PUSH - Pillars, Uvula, Soft palate, Hard palate) Class I: Faucial pillars, uvula, soft palate, and hard palate are visualized. Class II: The base of the uvula, soft palate, and hard palate are visualized. (Option B) Class III: Soft palate and hard palate are visualized. (Option C) Class IV: Hard palate only is visualized. (Option D) Class 0: Any part of the epiglottis is visible (easy laryngoscopy with difficult airway management) Reference: Miller’s Anaesthesia 9th Edition pages: 925, 1379, 1396",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Pre-Anaesthetic_Evaluation-Previous_Year_Questions_Q8_exp.jpg",
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 9,
    "question": "Which of the following is the drug of choice for preoperative antibiotic prophylaxis in a patient undergoing cardiac surgery?",
    "options": {
      "A": "Penicillin G",
      "B": "Erythromycin",
      "C": "Azithromycin",
      "D": "Cefazolin"
    },
    "correct_answer": "D",
    "explanation": "antibiotic commonly used for preoperative antibiotic prophylaxis in patients undergoing cardiac surgery. It works by inhibiting the growth and multiplication of bacteria that can cause surgical infections. Antibiotic Prophylaxis Before Surgery Type of Procedure Common Pathogens Preferred Regimen Severe beta-lactam allergy, or high risk of MRSA Cardiac Staphylococcus Cefazolin Vancomycin Gastrointestinal (Esophageal, gastroduodenal PEG placement) Biliary, including lap cholecystectomy Enteric gramnegative bacilli, grampositive cocci Cefazolin Clindamycin + Gentamicin Colorectal Enteric GNR, Enterococcus, Anaerobes, Staphylococcus Cefoxitin OR Ceftriaxone + Metronidazole Clindamycin + Gentamicin Head and neck surgery including oral surgery Anaerobes, enteric gram negative bacilli, S.aureus Cefazolin Clindamycin + Gentamicin Neurosurgery S.epidermidis, S. aureus Cefazolin Vancomycin Thoracic (Lung resection, VATS) S. aureus, S. epidermidis, streptococci, enteric gramnegative bacilli Cefazolin OR Clindamycin Vancomycin Genotiurinary Enteric gramnegative bacilli, anaerobes, enterococci Cefazolin OR Cefoxitin OR Ampicillin + Metronidazole + Gentamicin Clindamycin + Gentamicin Penicillin G (Option A ): It isn't often used in cardiac surgery prophylaxis due to its limited spectrum of activity, which doesn't cover all potential infection-causing bacteria. Erythromycin (Option B): It isn't commonly used in cardiac surgery prophylaxis because it's less effective than other antibiotics in preventing surgical infections. Azithromycin (Option C): It isn't commonly used in cardiac surgery prophylaxis because it's ineffective against all bacteria that can cause surgical infections. Reference: https://www.choc.org/userfiles/AntibioticProphylaxisForSurgeryGuideline.pdf",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 10,
    "question": "Which of the following corresponds to ASA grade III?",
    "options": {
      "A": "Moribund patient",
      "B": "Patient having systemic illness which is under control or without any functional limitations",
      "C": "Patient having systemic illness which is not under control or with functional limitations",
      "D": "Patient having systemic illness which is a constant threat to life"
    },
    "correct_answer": "C",
    "explanation": "limitations functional limitations Explanation: American Society of Anesthesiologists physical status classification of patients: Class Definition 1 Normal healthy patient 2 Patient with mild systemic disease (no functional limitations), normal pregnancy 3 Patient with severe systemic disease (some functional limitations) 4 Patient with severe systemic disease that is a constant threat to life (functionality incapacitated) 5 Moribund patient who is not expected to survive without the operation 6 Brain-dead patient whose organs are being removed for donor E If the procedure is an emergency, the physical status is followed by “E” (e.g., “2E”) Reference: Morgan and Mikhail’s Clinical Anesthesiology 7th edition, PDF pages 547-548 https://www.asahq.org/standards-and-practice-parameters/statement-on-asa-physical-status-classification-system",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 11,
    "question": "A patient scheduled for elective hip surgery is currently taking aspirin, enalapril, a multivitamin, and metoprolol. The surgery is planned in 5 days. What is the appropriate perioperative management for this patient?",
    "options": {
      "A": "Stop enalapril",
      "B": "Stop aspirin to minimize perioperative bleeding risk",
      "C": "Stop metoprolol to increase cardiac output",
      "D": "Increase aspirin dosage for additional analgesic benefit"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Stop enalapril Explanation: ACE inhibitors such as enalapril should typically be stopped 24 hours before elective surgery. This recommendation is based on evidence that continuing ACE inhibitors perioperatively can lead to clinically significant hypotension during anesthesia , particularly when combined with the vasodilatory effects of anesthetic agents. Medication discontinuation before surgery Drug Continued or stopped preoperatively Antithyroid Continued Antiepileptic Continued Antidepressants Continued Aspirin Continued Beta Blockers Continued Smoking Stop at least 6-8 weeks prior Steroid Continued Anticonvulsants Continued Monoamine Oxidase Inhibitors (MAOIs) Discontinue 2-3 weeks before surgery Oral Contraceptive Pill Discontinue at least 6 weeks before Herbal Supplements Discontinue at least 2 weeks before surgery ACE Inhibitors (Enalapril) Stop 24 hours before surgery Angiotensin II Receptor Blockers (ARBs) (Telmisartan) Stop 24 hours before surgery Calcium Channel Blockers (Amlodipine) Continue Stop aspirin to minimize perioperative bleeding risk (Option B) may be considered for neurosurgery or ocular procedures, but current guidelines generally recommend continuing aspirin for most orthopedic procedures including hip surgery. The modest increase in surgical bleeding with aspirin continuation is typically manageable and outweighed by the potential cardiovascular risks of discontinuation. Stop metoprolol to increase cardiac output (Option C) would be inappropriate and potentially dangerous. Abrupt beta-blocker discontinuation perioperatively significantly increases the risk of sympathetic hyperactivity, tachycardia, hypertension, myocardial ischemia, and mortality. Increasing aspirin dosage for additional analgesic benefit (Option D) has no supporting evidence of additional benefit and would unnecessarily increase bleeding risk. Reference: Morgan and Mikhail’s Clinical Anesthesiology, 7th Edition, Page 1113, 999, 1167, 1153, and 1418 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2464262/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 12,
    "question": "What is the appropriate preoperative fasting recommendation?",
    "options": {
      "A": "4 hours for solids in adults",
      "B": "2 hours for liquids in adults",
      "C": "2 hours for breast milk in infants",
      "D": "4 hours for solids in infants"
    },
    "correct_answer": "B",
    "explanation": "before any procedure that involves general anesthesia, sedation, or regional anesthesia. The collective fasting recommendation is two hours for clear and light liquids, four hours for breast milk, and six hours for solid foods, infant formula, light meals, and non-human milk. Incorrect Options: Option A: 4 hours for solids in adults Eight hours of preoperative fasting is recommended for solid food in adults. Option C: 2 hours for breast milk in infants Four hours of preoperative fasting is recommended for breast milk. Option D: 4 hours for solids in infants It is recommended 6 hours for solid foods in preoperative fasting before anesthesia. It should be kept in mind that cereal and baby food are solid foods. Reference: Morgan and Mikhail's anaesthesiology, 5th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 13,
    "question": "In a 45-year-old patient undergoing a preoperative assessment for a surgical procedure, which classification of Mallampati score is assigned based on the following description: Hard palate, soft palate, uvula, tip of the uvula, and tonsil pillars are visible. No oropharyngeal structures are obstructing the view.",
    "options": {
      "A": "Grade I",
      "B": "Grade II",
      "C": "Grade III",
      "D": "Grade IV"
    },
    "correct_answer": "A",
    "explanation": "tonsillar region can be seen without any obstruction. The correct classification is Grade I. This indicates an optimal airway visualization and ease of intubation. Incorrect Options: Option B- Grade II: Hard palate, soft palate, uvula, and tonsil pillars are visible. The tip of the uvula is not visible. Option C- Grade III: Hard palate, soft palate, base of the uvula are visible. Option D- Grade IV: Only hard palate is visible. Reference: .",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 14,
    "question": "What is the purpose of using glycopyrrolate as a pre-anesthetic agent?",
    "options": {
      "A": "Reducing the secretions",
      "B": "Sedative effect",
      "C": "Skeletal muscle relaxant",
      "D": "Anxiolytic"
    },
    "correct_answer": "A",
    "explanation": "secretions in the respiratory tract and other body systems. It belongs to a class of drugs called anticholinergics, which work by inhibiting the effects of acetylcholine, a neurotransmitter involved in various bodily functions. In the context of anesthesia, excessive secretions in the respiratory tract can interfere with the airway management and ventilation during surgery. By administering glycopyrrolate before anesthesia, the production of respiratory secretions is reduced, improving the visibility of the surgical field and facilitating proper respiratory function. Option B: Sedative effect Glycopyrrolate is not primarily used for its sedative effects. It does not have significant sedative properties and is mainly focused on reducing secretions. Option C: Skeletal muscle relaxant Glycopyrrolate is not used as a skeletal muscle relaxant. It primarily affects the cholinergic system and is not intended for muscle relaxation during anesthesia. Option D: Anxiolytic Glycopyrrolate is not used as an anxiolytic. Its main role is in reducing secretions rather than alleviating anxiety or promoting sedation Reference: Miller, 7 th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 15,
    "question": "Identify the Mallampati class of this patient",
    "options": {
      "A": "Class II",
      "B": "Class I",
      "C": "Class IV",
      "D": "Class III"
    },
    "correct_answer": "A",
    "explanation": "palate but only the tip of the uvula is not seen. Hence, the type of Mallampatti classification seen is class II . Hence, option A is the correct answer for the question given. Option B: In class I Mallampatti classification, there is a complete visualization of the soft palate and uvula. Option C: In class IV The soft palate is not seen when we look at it. Option D: In class III There is a visualization of only the base of the uvula. Reference: Miller, 7 th edition",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Pre-Anaesthetic_Evaluation-Previous_Year_Questions_Q15_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 16,
    "question": "Preoperative assessment of oral cavity for endotracheal intubation in an adult is done by:",
    "options": {
      "A": "Mallampatti score",
      "B": "Conmack lehane",
      "C": "ASA grading",
      "D": "AHA grading"
    },
    "correct_answer": "A",
    "explanation": "the visibility of the structures in the oral cavity and predict the ease of intubation. It grades visibility of the soft palate, uvula, and tonsillar pillars, ranging from Class I (full visibility) to Class IV (no visibility). Higher scores indicate more difficult intubation. Incorrect Options Option B: Cormack-Lehane The Cormack-Lehane classification is used to assess the view of the vocal cords during laryngoscopy, not specifically the oral cavity. Option C:ASA grading The ASA grading system assesses a patient's physical status before surgery but doesn't specifically evaluate the oral cavity for intubation. Option D:AHA grading There is no commonly known anesthesia grading system called AHA grading. Reference: Miller, 7 th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 17,
    "question": "What is the most effective approach for verifying the accuracy of intubation during laryngoscopy?",
    "options": {
      "A": "Capnography",
      "B": "Air entry on auscultation",
      "C": "Ultrasonography",
      "D": "Chest movement"
    },
    "correct_answer": "A",
    "explanation": "intubation during laryngoscopy. It measures exhaled carbon dioxide (CO2) concentration, providing immediate confirmation of proper tube placement in the trachea. Incorrect Options: Option B - Air entry on auscultation: While auscultation for air entry is a common method for confirming tube placement, it may not be as reliable as capnography. Option C - Ultrasonography: Ultrasonography can be used to visualize the structures of the airway, but it is not typically used to confirm tube placement during laryngoscopy. Option D - Chest movement: Chest movement alone is not a reliable indicator of correct intubation and may not provide definitive confirmation. Reference: Miller, 7 th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 18,
    "question": "In adults, at which level does the spinal cord terminate?",
    "options": {
      "A": "L3-L4",
      "B": "L1-L2",
      "C": "T12-L1",
      "D": "L2-L3"
    },
    "correct_answer": "B",
    "explanation": "vertebra (L1) or the second lumbar vertebra (L2). This termination point is known as the conus medullaris. It's important to note that the spinal cord does not extend down to the end of the vertebral column. Instead, beyond the conus medullaris, the spinal cord tapers into a bundle of nerve roots called the cauda equina. Incorrect Options: Option A - L3-L4: This option is commonly seen as the termination level of the dural sac, which contains the cerebrospinal fluid (CSF) surrounding the spinal cord and nerve roots. Option C - T12-L1: The thoracic spinal cord extends down to approximately the level of T12, and the conus medullaris is located in the lumbar region rather than the thoracic region. Option D - L2-L3: Similar to option a), this level is commonly associated with the termination of the dural sac, not the spinal cord itself. Reference: Miller, 7 th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  },
  {
    "q_no": 19,
    "question": "What is the recommended position for inserting a Ryle's tube?",
    "options": {
      "A": "Supine with neck flexed",
      "B": "Sitting with neck flexed",
      "C": "Supine with neck extended",
      "D": "Sitting with neck extended"
    },
    "correct_answer": "B",
    "explanation": "nasogastric tube, the ideal position for the patient is sitting with the neck flexed. This position helps to straighten the nasal passage and facilitate the passage of the tube into the stomach. It allows for a more straightforward and safer insertion process. Incorrect Options: Option A - Supine with neck flexed: This position may make the insertion of the Ryle's tube more challenging as the neck flexion is limited in the supine position. Option C - Supine with neck extended: Neck extension can cause discomfort and hinder Ryle's tube insertion by obstructing the nasal passage, making tube passage more difficult. Option D - Sitting with neck extended: This position may cause discomfort and can increase the risk of the tube going into the respiratory tract instead of the stomach. Reference: Miller, 7 th edition",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pre-Anaesthetic Evaluation-Previous Year Questions"
  }
]