[
  {
    "q_no": 1,
    "question": "Identify the method of assessment of Pain as depicted in the image.",
    "options": {
      "A": "Wong-Baker Scale",
      "B": "Visual Analog Scale",
      "C": "CHEOPS",
      "D": "McGill Pain Scale"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Wong-Baker Scale Explanation: The given image is of Wong Baker’s Faces Scale Facial expressions are used to analyze the severity of pain. Pain assessment methods Visual Analog Scale Commonly used scale in hospitals. Readings of scale range from 0-10 0 - no pain 10 – worst possible pain (Option B ruled out) Wong Baker's Faces Facial expressions are used to analyze the severity of pain. Readings of scale range from 0-10 0 – no pain 10 – worst pain Children's Hospital of Eastern Ontario Pain Scale (CHEOPS)",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Pain_Management-Pain_Management_Q1_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 2,
    "question": "A 45-year-old female presents to the clinic with a 6-month history of persistent lower back pain. She describes the pain as a dull ache that worsens throughout the day is associated with difficulty sleeping, and has a burning sensation radiating down her left leg. Over-the-counter ibuprofen has provided minimal relief. What is the most appropriate step in managing her pain?",
    "options": {
      "A": "Increase the dosage of ibuprofen.",
      "B": "Amitriptyline",
      "C": "Tramadol",
      "D": "Exercise therapy"
    },
    "correct_answer": "B",
    "explanation": "neuropathic component. Since ibuprofen provided minimal relief Therefore an adjuvant therapy(Amitriptyline) is added. WHO Step Ladder Management of Pain : It is WHO-given criteria for the management of severe chronic pain which is not subsiding even after conventional therapies. Management depends on the severity of pain in a 'ladder ' manner. Step 1 Mild Pain Non-Opioid Analgesics: Acetaminophen, NSAIDs Adjuvant therapies (e.g., corticosteroids,anticonvulsants,antidepressants) Step 2 Moderate Pain Fixed-Dose Combination Products: (e.g., acetaminophen + hydrocodone) Weak Opioids: (e.g., codeine, tramadol) Adjuvant agents as needed Step 3 Severe Pain Strong Opioids: (e.g., morphine, oxycodone) Individualized dosing Appropriate adjuvant therapies Step 4 Complex and Uncontrolled Pain Interventional techniques: (e.g., nerve blocks, neurolysis) Multimodal approaches for complex pain syndromes Increasing ibuprofen (Option A) may not address the burning sensation. Tramadol (Option C) is not first-line for neuropathic features when amitriptyline is available. Exercise therapy (Option D) is beneficial for general back pain, the specific symptoms make amitriptyline a more targeted approach in this case.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 3,
    "question": "You are caring for a 20-year-old woman with metastatic breast carcinoma and renal failure. While she is admitted to the oncology ward, she develops a pain of 8/10 score. What is the best medication to treat her pain?",
    "options": {
      "A": "IV Paracetamol",
      "B": "PO morphine",
      "C": "PO Tramadol",
      "D": "IV Pethidine"
    },
    "correct_answer": "B",
    "explanation": "(8/10), the best medication to treat her pain would be PO morphine. Morphine is an opioid analgesic that is effective for moderate to severe pain WHO Step Ladder Management of Pain : It is WHO-given criteria for the management of severe chronic pain which is not subsiding even after conventional therapies. Management depends on the severity of pain in a 'ladder ' manner. Step 1 Mild Pain Non-Opioid Analgesics: Acetaminophen, NSAIDs Adjuvant therapies (e.g., corticosteroids,anticonvulsants,antidepressants) Step 2 Moderate Pain Fixed-Dose Combination Products: (e.g., acetaminophen + hydrocodone) Weak Opioids: (e.g., codeine, tramadol) Adjuvant agents as needed Step 3 Severe Pain Strong Opioids: (e.g., morphine, oxycodone) Individualized dosing Appropriate adjuvant therapies Step 4 Complex and Uncontrolled Pain Interventional techniques: (e.g., nerve blocks, neurolysis) Multimodal approaches for complex pain syndromes IV paracetamol (Option A) is less effective for severe pain compared to opioids. PO Tramadol (Option C) is less effective for severe pain compared to opioids. IV Pethidine (Option D) is contraindicated in renal failure",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Pain_Management-Pain_Management_Q3_exp.jpg",
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 4,
    "question": "A 65-year-old woman is recovering in the postoperative unit after hip replacement surgery. She is receiving strong analgesics. The doctor checked her vital signs and found that her heart rate was 52 beats per minute. Which other adverse effect should the medical team be alert for in this patient due to strong analgesics?",
    "options": {
      "A": "Rash",
      "B": "Mydriasis",
      "C": "Diarrhea",
      "D": "Hypertension"
    },
    "correct_answer": "A",
    "explanation": "analgesics, particularly morphine. Given that the patient is receiving Morphine, one of the potential adverse effects to monitor for is a rash Opioids in Analgesia: Major Opioids : Morphine, Fentanyl, Meperidine/ pethidine, Methadone. Other Opioids: Codeine (Morphine derivatives with less affinity for µ receptors), Tramadol, Fentanyl, Buprenorphine, Some Important Opioids: Opioids Effects Morphine Produces respiratory depression and cough suppression. May produce bradycardia and hypotension (Option D ruled out) Nausea and vomiting are common side effects Histamine release may lead to rash, itching, and bronchospasm (in susceptible patients) (Option A) Meiosis is common (Option B ruled out) Constipation (Option C ruled out) Fentanyl More potent than opioid Chest wall rigidity (fast and high dose administration) Fast onset and short duration Sufentanil It is 10 times more potent than fentanyl Fast onset and short duration Remifentanil It is an ultra-short-acting opioid among all opioids. Fast onset and short duration Rapidly broken down by non-specific RBC and tissue estrase Meperidine/ pethidine Synthetic opioids acting on mu and kappa receptors having fewer side effects than other opioids Antimuscarinic property Accumulation in renal failure (seizures) Histamine release (bronchospasm\\ urticaria Contraindicated with Mao inhibitors causes cheese reaction Doc for prevention & treatment of postoperative shivering Naloxone Drug of choice for the treatment of opioid-induced respiratory depression Caution must be used in opioid addicts as giving naloxone may cause an acute withdrawal state with hypertension, pulmonary edema and cardiac arrhythmias Tramadol Inhibits neuronal reuptake of norepinephrine. Potentiates release of serotonin and causes descending inhibition of nociception Reference: https://www.ncbi.nlm.nih.gov/books/NBK459161/ KD Tripathi Essentials of Medical pharmacology, Ed. 8., Page 497-514 Miller’s Anesthesia, Ed.9., Page 680-737",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 5,
    "question": "A 45-year-old man is in the postanesthesia care unit following a routine elective surgery. You are asked to monitor the patient for morphine overdose. Which of the following sets of symptoms best represents the classic triad associated with morphine overdose?",
    "options": {
      "A": "Mydriasis, hypertension, and tachycardia",
      "B": "Hypertension, respiratory depression, and miosis",
      "C": "Respiratory depression, miosis, and altered mental status",
      "D": "Agitation, hyperreflexia, and diaphoresis"
    },
    "correct_answer": "C",
    "explanation": "mental status (decreased level of consciousness) . This triad is a hallmark of opioid overdose. Morphine: Mechanism of Action Mu( µ ) opioid receptor agonism: Primary action. Kappa( κ ) and Delta( δ ) receptor agonism : Lesser extent. Inhibition of pain transmission: Reduces the release of neurotransmitters like substance P and glutamate. Activation of descending inhibitory pathways: Increases pain modulation via descending inhibitory pathways. Pharmacological Effects Central Nervous System: Analgesia, sedation, and euphoria. Respiratory System: Suppression of respiratory centers, leading to respiratory depression. Gastrointestinal System: Decreases peristalsis, causing constipation. Reduces secretion of digestive juices. Cardiovascular System: Vasodilation and histamine release, leading to hypotension. Pupils: Causes miosis (pinpoint pupils). Uses Severe pain management: For chronic or acute severe pain, including post-operative and cancer pain. Myocardial infarction (MI): Relieves pain and anxiety; reduces cardiac workload. Pulmonary edema: Used to alleviate the sensation of dyspnea in acute cases. Cough suppressant: Morphine derivatives (like codeine) are used in some cough formulations. Adverse Effects Respiratory depression: Major life-threatening side effect. Constipation: Due to reduced GI motility. Nausea and vomiting: Activates the brain's chemoreceptor trigger zone (CTZ) . Sedation and drowsiness: Common with therapeutic doses, worsened with higher doses. Tolerance and dependence: Long-term use leads to tolerance, requiring higher doses for the same effect. Morphine Triad (Option C) Respiratory depression: Most critical sign in overdose. Miosis : Pinpoint pupils are a hallmark feature of opioid overdose. Coma: Altered consciousness, leading to coma in severe overdose. Treatment: Naloxone(antidote) Mydriasis, hypertension, tachycardia, agitation, hyperreflexia, and diaphoresis (Options A, B, and D) are not associated with morphine overdose. Reference: KD Tripathi Essentials of Medical pharmacology, Ed. 8., Page 493 - 501 Miller’s Anesthesia, Ed.9., Page 309",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 6,
    "question": "A 45-year-old male in the post-anesthesia care unit (PACU) following surgery is found unresponsive with a respiratory rate of 6 breaths/min and pinpoint pupils. His oxygen saturation is 85%, and his blood pressure is 90/60 mmHg. He had received morphine for intraoperative analgesia. What is the most appropriate next step?",
    "options": {
      "A": "Administer Naltrexone.",
      "B": "Administer Naloxone.",
      "C": "Administer Methadone.",
      "D": "Administer Buprenorphine."
    },
    "correct_answer": "B",
    "explanation": "Naloxone is the specific opioid antagonist that reverses these effects quickly. Morphine (Opioid) toxicity: For a non-tolerant adult , doses of 50 mg i.m. can produce serious toxicity. The lethal dose of morphine is estimated at around 250 mg. Clinical Manifestations: Stupor or coma Flaccid muscles Shallow and infrequent breathing Cyanosis Pinpoint pupils (miosis) Low blood pressure (hypotension) Treatment: Primary goal: Support respiration (positive pressure ventilation) and Maintain blood pressure (Intravenous fluids and vasoconstrictors). Gastric lavage: With potassium permanganate can help remove any unabsorbed drug, even if morphine was injected (due to partitioning in the stomach) Naloxone is the specific antidote: Administer 0.4-0.8 mg i.v., repeated every 2-3 minutes until respiration improves. Naloxone is effective because it acts rapidly and does not have agonistic actions or depress respiration. Due to its short duration of action, naloxone needs to be repeated every 1-4 hours depending on the patient's response. Administer Naltrexone (Option A) : Is for the prevention of relapse once detoxified. Administer Methadone (Option C) : Used in maintenance programs for opiate use disorder, not during acute poisoning. Also used in neonatal abstinence syndrome. Administer Buprenorphine (Option D): Used in maintenance programs for opiate use disorder, not during acute poisoning. Reference: KD Tripathi Essentials of Medical pharmacology, Ed. 8., Page 501 Miller’s Anesthesia, Ed.9., Page 701, 731",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 7,
    "question": "Which of the following statements accurately describes a key difference between sufentanil and remifentanil? liver. κ -opioid receptors.",
    "options": {
      "A": "Remifentanil is more potent than Sufentanil",
      "B": "Remifentanil is metabolized by non-specific plasma esterases, while sufentanil is metabolized by the",
      "C": "Sufentanil acts on µ-opioid receptors whereas Remifentanil acts on",
      "D": "Remifentanil has a longer duration of action compared to sufentanil."
    },
    "correct_answer": "B",
    "explanation": "metabolized by the liver. liver. It is less potent than sufentanil, has a longer duration of action, and acts on µ-opioid receptors. Sufentanil Remifentanil Mechanism of Action µ-opioid receptor agonist µ-opioid receptor agonist (Option C ruled out) Onset of Action Rapid onset (within 1-3 minutes) Very rapid onset (within 1 minute) Duration of Action Intermediate duration (30-45 minutes) Ultra-short duration (5-10 minutes) (Option D ruled out) Metabolism (Option B) Hepatic metabolism Rapid hydrolysis by plasma esterases Elimination Renal excretion Independent of renal or hepatic function Potency Approximately 5-10 times more potent than fentanyl (Option A ruled out) Similar potency to fentanyl Clinical Uses Analgesia in major surgeries, anesthesia adjunct Short procedures, anesthesia, ICU sedation Adverse Effects Respiratory depression, bradycardia, hypotension Respiratory depression, bradycardia, hypotension Special Considerations Requires careful monitoring due to prolonged effects Requires rapid titration due to short duration Reference: KD Tripathi Essentials of Medical pharmacology, Ed. 8., Page 503, 504 Miller’s Anesthesia, Ed.9., Page 309, 310",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  },
  {
    "q_no": 8,
    "question": "A 50-year-old patient is taking phenelzine, a monoamine oxidase inhibitor (MAOI), for depression and is scheduled for elective surgery. When should phenelzine be discontinued before the surgery to minimize the risk of interactions with pethidine?",
    "options": {
      "A": "24 hours before surgery",
      "B": "48 hours before surgery",
      "C": "1 week before surgery",
      "D": "3 weeks before surgery"
    },
    "correct_answer": "D",
    "explanation": "developing serotonin syndrome. MAO inhibitors inhibit the breakdown of serotonin, while pethidine may also have serotonergic effects, leading to excessive serotonin accumulation causing serotonin syndrome , and may present with symptoms such as agitation, confusion, muscle rigidity, fever, and autonomic instability. Pethidine (Meperidine) Mechanism of Action Interacts with µ-opioid receptors Metabolite normeperidine also has analgesic activity. Pharmacological Effects Analgesic potency : 1/10th of morphine but nearly equally effective Rapid onset after i.m. injection, shorter duration (2-4 hours) Less spasmogenic action (less miosis, constipation, urinary retention) Uses Occasionally used to control shivering post-anesthesia Shivering control during IV infusions Pain relief, but clinical use has declined Adverse Effects Dry mouth, blurred vision, tachycardia Less constipation, urinary retention, and miosis compared to morphine Tachycardia due to antimuscarinic action Tremors, mydriasis, hyperreflexia, delirium, myoclonus, convulsions (due to overdose) Prone to excitatory effects in renal failure patients Interactions Excitatory effects are exacerbated when combined with MAO inhibitors or SSRIs (leading to serotonin syndrome), Hence stopped 3 weeks before surgery. Drugs causing Serotonin syndrome: 1. Psychiatric drugs: MAO Inhibitors SSRIs SNRIs TCAs Vilazodone Vortioxetine Buspirone 2. Nonpsychiatric drugs: Tramadol, Ondansetron Triptans, Linezolid, MDMA, Dextromethorphan, Meperidine, St. John’s wort Reference: KD Tripathi Essentials of Medical pharmacology, Ed. 8., Page 503 Miller’s Anesthesia, Ed.9., Page 726, 727",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pain Management-Pain Management"
  }
]