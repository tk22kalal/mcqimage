[
  {
    "q_no": 1,
    "question": "Jackson Rees circuit is used for?",
    "options": {
      "A": "Pediatric anaesthesia",
      "B": "Cardiac anaesthesia",
      "C": "Neuro anaesthesia",
      "D": "Obstetric anaesthesia"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Pediatric anaesthesia Explanation: Type of Circuit: The Jackson-Rees circuit is a modification of the Mapleson F system. Patient Population: It is commonly used in pediatric anesthesia , particularly in infants and small children. Jackson-Rees Circuit in Pediatric Anesthesia Feature Details Circuit Type Modification of Mapleson F circuit Common Usage Pediatric anesthesia Ventilation Mode Both controlled and spontaneous ventilation Dead Space Low, making it suitable for neonates and infants Advantages Low resistance, ease of use, and good control over ventilation Components Fresh gas flow, reservoir bag, expiratory limb with an open end Cardiac anaesthesia (Option B): Incorrect because the Jackson-Rees circuit is mainly used in pediatrics, whereas cardiac anesthesia typically requires closed-circuit ventilation with controlled settings. Neuro anaesthesia (Option C): Incorrect because neuroanesthesia patients require precise ventilation control, often achieved with mechanical ventilators. Obstetric anaesthesia (Option D): Incorrect because obstetric anesthesia mainly involves spinal, epidural, or general anesthesia with different breathing circuits.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Circuits-Previous Year Questions"
  },
  {
    "q_no": 2,
    "question": "In the operating theater, you observe the utilization of a particular vaporizer. Which of the listed gases would you anticipate it to comprise?",
    "options": {
      "A": "a.Desflurane",
      "B": "b.Sevoflurane",
      "C": "c.Halothane",
      "D": "Isoflurane"
    },
    "correct_answer": "A",
    "explanation": "of it can be delivered to the patient. Three types of vaporizers or concentration-calibrated vaporizers are available in the market such as variable bypass, electronically controlled vaporizers, and heated blenders. These instruments are used in the emergency departments, trauma departments, operating rooms, delivery rooms, ambulatory surgical centers and any needy areas that require inhalation agent administration. Some-times it is mounted on the anesthesia machines. Heated-blender vaporizers are now only required for desflurane. It is marketed under the trade name “SupraneTM” by Baxter Pharmaceutical Products Division. Incorrect Choices: b. Sevoflurane is a type of volatile anesthetic that can provide analgesia, hypnosis, autonomic blockade, akinesia, amnesia during the procedural and surgical interventions. It is a commonly used volatile anesthetic agent that is used for outpatient anesthesia particularly across all age groups of peoples and in veterinary medicine. c. Halothane is used as a",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/pimages/images/Anaesthesia_Circuits-Previous_Year_Questions_Q2_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Circuits-Previous Year Questions"
  },
  {
    "q_no": 3,
    "question": "Which circuit is the most efficient for administering anesthesia while allowing for spontaneous breathing?",
    "options": {
      "A": "Mapleson A",
      "B": "Mapleson B",
      "C": "Mapleson C",
      "D": "Mapleson D"
    },
    "correct_answer": "A",
    "explanation": "helps with breathing. The semi-closed circuit, the Mapleson circuit, is clinically used. There are six types of Mapleson circuits ranging from A to F. In Mapleson A circuit , the inspiratory climb is shorter than the expiratory climb. When connected to a spontaneously ventilating patient, this circuit has to supply fresh air to the patient continuously; this is the patient's minute ventilation, and the expiratory gas will be able to go out. Hence, it is the ideal circuit for spontaneous breathing. Hence, option A is the best choice for this question. Incorrect Options: Option B: The Mapleson B this option is incorrect Option C: The Mapleson C this option is incorrect Option D: The Mapleson D circuit is the circuit of choice for controlled ventilation in adults.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Circuits-Previous Year Questions"
  }
]