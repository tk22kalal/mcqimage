[
  {
    "q_no": 1,
    "question": "Question 1: In which of the following areas do B lymphocytes reside?",
    "options": {
      "a": "Spleen follicles",
      "b": "Lymph node paracortex",
      "c": "Periarteriolar lymphoid sheath",
      "d": "Thymic medulla"
    },
    "correct_answer": "a",
    "explanation": "B lymphocytes reside in the splenic follicles. Lymphocytes are part of the adaptive immune system. They include B lymphocytes and T \nlymphocytes. B lymphocytes mature in the bone marrow and then migrate to secondary lymphoid \norgans - follicles of spleen and in follicles of lymph nodes. T lymphocytes are produced in the \nbone marrow but mature in the thymus. They are also present in the periarteriolar lymphoid \nsheaths (PALS) of spleen and paracortex of lymph node. 61 \nSold by @itachibot In a lymph node, follicles may contain a central region called germinal centre. This contains B \ncells that have been stimulated by an antigen.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 2,
    "question": "Question 2: A mother brings her 1-year-old child to the hospital with complaints that he turns blue while \nbreastfeeding. It resolves when he assumes a squatting position. On examination, a cleft \npalate is seen. Labs show hypocalcemia. Which of the following abnormalities is expected to \nbe seen in the lymphoid organs?",
    "options": {
      "a": "Decreased size of germinal centres of lymph nodes",
      "b": "Decreased size of paracortical areas of lymph nodes",
      "c": "Increased size of splenic follicles",
      "d": "Increased size of the peri arteriolar lymphoid sheath of spleen"
    },
    "correct_answer": "b",
    "explanation": "Turning blue on breastfeeding with resolution on squatting describes a tet-spell or a cyanotic \nspell, indicating a congenital cardiac defect. Cleft palate, cardiac defects and hypocalcemia \n(parathyroid hypoplasia/aplasia) suggest a diagnosis of DiGeorge syndrome. In this disorder, \na decreased size of paracortical areas of lymph nodes is noted. DiGeorge syndrome is characterised by thymic aplasia, causing a deficiency of T cells and absent \ncell-mediated immunity. Thus, paracortical areas of lymph nodes and periarteriolar sheaths of the \nspleen, where T cells reside, are reduced in size. B cells are usually not affected. 62 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 3,
    "question": "Question 3: Match the following specialized macrophages with the tissues they are found in.",
    "options": {
      "a": "I-A; II-C; III-D; IV-E; V-B",
      "b": "I-C; II-B; III-D; IV-E; V-A",
      "c": "I-D; II-C; III-A; IV-B; V-E",
      "d": "I-B; II-C; III-D; IV-E; V-A"
    },
    "correct_answer": "d",
    "explanation": "The correct answer is I-B; II-C; III-D; IV-E; V-A. Macrophages can be divided into: 1. Blood macrophages (monocytes) are the largest of the myeloid cells found in the peripheral \nblood. They survive for 3 days. 2. Tissue macrophages present in different organs. They survive for months. The main functions of macrophages are phagocytosis and antigen presentation. The specialised (tissue-specific) macrophages present in different tissues are listed below: • Peripheral blood: Monocytes • Placenta: Hofbauer cells • Liver: Kupffer cells • Brain: Microglial cells • Kidney: Mesangial cells • Lungs: Alveolar macrophages • Bone: Osteoclasts • Connective tissue: Histiocytes Cell \nTissue I. Hofbauer cells \nB. Placenta II. Histiocytes \nC. Connective tissu \ne III. Kupffer cells \nD. Liver IV. Microglia \nE. Brain A. Kidney V. Mesangial cell \ns",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 4,
    "question": "Question 4: Which of the following is the most potent stimulator of naive T-cells? 55 \nSold by @itachibot",
    "options": {
      "a": "Mature dendritic cells",
      "b": "Follicular dendritic cells",
      "c": "B lymphocytes",
      "d": "NK cells"
    },
    "correct_answer": "a",
    "explanation": "Mature dendritic cells are the most potent stimulator of naive T cells. Naive CD4+ T cells are activated when they come in contact with two ligands - MHC class II and a \ncostimulary membrane protein (eg: CD28). Both of these are present in antigen-presenting cells, \nthe most potent of which is the mature dendritic cell. Other professional antigen-presenting cells \ninclude macrophages and B lymphocytes (option C). Other options: 63 \nSold by @itachibot Option B: Follicular dendritic cells are functionally different from dendritic cells. They are not \nantigen-presenting-cells and do not activate naive T cells. Option D: NK cells do not stimulate naive T cells.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 5,
    "question": "Question 5: Nude mice are not resistant to xenograft due to the absence of",
    "options": {
      "a": "B cell",
      "b": "T cell",
      "c": "Both B and T cell",
      "d": "NK cell"
    },
    "correct_answer": "b",
    "explanation": "Nude mice are not resistant to xenograft due to absence of T cell. A xenograft is a tissue graft or organ transplant from a donor of a different species. Nude mice lack body hair, hence the name. They lack a thymus and thus cannot generate mature \nT lymphocytes. The absence of T-lymphocytes makes them unable to mount adaptive immune \nresponses requiring helper T cells and cytotoxic T cells. The absence of functioning T cells also \nprevents the rejection of allografts &amp; xenografts.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 6,
    "question": "Question 6: Which of the following statements about T-cell receptors is false?",
    "options": {
      "a": "In 95% of T cells, the TCR consists of  and  polypeptide chains.",
      "b": " TCR recognize peptide antigens presented by MHC molecules.",
      "c": "Each TCR is non-covalently linked to six polypeptide chains, which form CD3 complex.",
      "d": "The linked CD3 complex and  chains initiate activating signals."
    },
    "correct_answer": "b",
    "explanation": " TCR recognize different type of antigens without the requirement of major histocompatibility \ncomplex (MHC) Each T cell recognizes a specific bound antigen by means of an antigen-specific T-cell receptor \n(TCR). The TCR is a heterodimer and is of two types: •  TCR (95%) recognize peptide antigens that are presented by MHC molecules on the surfaces \nof antigen-presenting cells. •  TCR (5%) recognize peptides, lipids, and small molecules, without a requirement for display \nby MHC proteins. They have particular localization patterns in the mucosal tissues, which protect \nagainst microbes that try to enter through epithelia. 64 \nSold by @itachibot TCRs are non-covalently bound to six polypeptide chains or three dimers (a  pair, a  pair, and \na  or  pair), forming the CD3 complex and the  dimer. The CD3 complex and  dimer convey \nsignals received by the receptor to the interior of the cell.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 7,
    "question": "Question 7: A 52-year-old requires a kidney transplant due to chronic kidney disease. Her 2 children \nmatch her HLA type 4/6 and 5/6 respectively. On what chromosome is this match protein \nsequence located?",
    "options": {
      "a": "Chromosome 5",
      "b": "Chromosome 6",
      "c": "Chromosome 7",
      "d": "Chromosome 8"
    },
    "correct_answer": "b",
    "explanation": "HLA complex of genes is located on the short arm of chromosome 6 (chromosome 6p21). The human leukocyte antigen (HLA) system or complex is a gene complex encoding the major \nhistocompatibility complex (MHC) proteins. In humans, the MHC molecules are called human \nleukocyte antigens (HLA) because they were initially detected on leukocytes by the binding of \nantibodies. The combination of HLA alleles in each individual is called the HLA haplotype. The \nfunction of MHC molecules is to display peptide fragments of protein antigens for recognition \nby antigen-specific T cells. The HLA system is highly polymorphic. Each individual’s HLA alleles differ from the other. It has \nto be checked before organ transplantation. The HLA complex consists of 3 separate clusters of \ngenes: • Class I– A, B and C loci • Class II– DR, D› and DP loci • Class III– Complement C2 and C4 of classical pathway and properdin factor B of the alternate \npathway, heat shock proteins(HSP), TNF  and .",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 8,
    "question": "Question 8: Which of the following statements is false regarding MHC molecules? 56 \nSold by @itachibot",
    "options": {
      "a": "MHC class II presents peptide antigen to CD4 T cells",
      "b": "The action of MHC II occurs via endocytic pathway",
      "c": "MHC Class II presents endogenous antigens",
      "d": "MHC II is present on antigen presenting cells"
    },
    "correct_answer": "c",
    "explanation": "MHC class II presents exogenous antigens while MHC class I presents endogenous antigens. 65 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 9,
    "question": "Question 9: You are observing flow cytometry being performed at a laboratory for MHC class 1 antigen. \nIdentify the cells that lack this antigen.",
    "options": {
      "a": "Platelets",
      "b": "T lymphocytes",
      "c": "B lymphocytes",
      "d": "Red blood cells"
    },
    "correct_answer": "d",
    "explanation": "Red blood cells are anucleated cells that lack MHC class I antigens. MHC class I antigens are present on platelets and all nucleated cells, except sperm cells. They are \nresponsible for the presentation of peptide antigen to CD8 T cells. The human major histocompatibility complex (MHC), or the HLA complex, is a cluster of genes \nwhose products are responsible for antigen presentation to T cells, transplant rejection, etc. HLA \ncomplex of genes is present on the short arm of chromosome 6. The genes are clustered in three \nregions named MHC region-I, II and III. MHC class II antigens are present only on antigen-presenting cells (macrophages, dendritic cells, \nB cells). They present the peptide antigen to CD4 T cells. APCs also contain MHC class I antigens. MHC region III comprises of genes that code for complement factors like C2, C4, C3 convertase, \nfactor B and properdin, heat shock protein, tumor necrosis factor and steroid 21-hydroxylases.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 10,
    "question": "Question 10: A patient newly diagnosed with HIV is found to have a CD4+ count of 78cells/µL. Which of \nthe following is not a function of these cells?",
    "options": {
      "a": "Immunogenic memory",
      "b": "Produce immunoglobulins",
      "c": "Activate macrophages",
      "d": "Activate cytotoxic cells"
    },
    "correct_answer": "b",
    "explanation": "CD4+ is a marker of T helper and memory cells. They do not produce immunoglobulins. CD4+ T cells are activated when an antigen-presenting cell expressing MHC-II binds to them. The \nactivated CD4+ T cell differentiates into T helper (TH) cells and regulatory T cells. The TH cells \nare further differentiated into TH1, TH2 and TH17 cells. Helper T cells have the following \nfunctions: • Activation and proliferation of cytotoxic T cells • Regulation of monocyte-macrophage system • Activation of B cell to produce plasma cells • Production of interleukins Memory cells (Tm) have both CD4+ and CD8+ markers. They provide anamestic immune \nresponse and are thus responsible for immunogenic memory. Immunoglobulins are produced by the plasma cells.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 11,
    "question": "Question 11: Which of the following statements is false regarding the surface markers of T and B cells?",
    "options": {
      "a": "T cells express CD 3",
      "b": "T cells express CD 10",
      "c": "B cells express CD 19",
      "d": "B cells express CD 21"
    },
    "correct_answer": "b",
    "explanation": "T cells do not express CD10. CD10 is a marker of pre-B cell and germinal center B cells. Given below is a list of cell surface markers and the cells they are expressed on: • CD3: All T cells • CD4: Helper T cells • CD8: Cytotoxic T cells • CD4, CD25: Regulatory T cells 66 \nSold by @itachibot • Ig, CD19, CD20, CD21: B Cells • CD10: Pre-B Cells, germinal center B cells • CD40, MHC-II: Macrophages • CD16, CD56: NK Cells • CD34: Hematopoietic stem cells Note : Pan T antigens are antigens found on all T cells and include CD2, CD3, CD5 and CD7.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 12,
    "question": "Question 12: Which of the following markers is used for the identification of memory T cells? 57 \nSold by @itachibot",
    "options": {
      "a": "CD45RA",
      "b": "CD45RB",
      "c": "CD45RC",
      "d": "CD45RO"
    },
    "correct_answer": "d",
    "explanation": "CD45RO is used as a marker for the identification of memory T cells. CD45RA is a marker for virgin or nai■ve T helper cells.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 13,
    "question": "Question 13: In a patient with influenza, there is decreased expression of MHC proteins on the surface of \nthe virus-infected cells. Which component of the immune system acts on such cells?",
    "options": {
      "a": "Cytotoxic T cells",
      "b": "Macrophages",
      "c": "NK cells",
      "d": "Helper T cells"
    },
    "correct_answer": "c",
    "explanation": "Natural killer cells (NK cells) act on virus-infected cells with reduced MHC expression. NK cells are a subtype of lymphocytes that kill damaged or infected cells. NK cells express CD16 \nand CD56. Their action is inhibited when MHC I is expressed on normal cells. This prevents NK \nCells from killing normal cells. In the presence of a viral infection or malignancy, MHC expression \nof a cell is reduced. Thus, NK cells get activated and kill virus-infected/tumor cells. NK cells also \nsecrete cytokines (IFN-) which activate macrophages (option B) for destruction of ingested \nmicrobes. Other options: Option A: Cytotoxic T cells act when cells expressing MHC I present endogenous antigens. Option D: Helper T cells act when cells expressing MHC II (antigen-presenting cells) present \nexogenous antigens.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 14,
    "question": "Question 14: A 9- year-old boy was brought with colicky pain, nausea, vomiting. Lab investigations \nrevealed eosinophilia and stool examination shows the following egg. Which interleukin is \nsecreted in this scenario?",
    "options": {
      "a": "IL-1",
      "b": "IL-3",
      "c": "IL-6",
      "d": "IL-5"
    },
    "correct_answer": "d",
    "explanation": "A child with colicky abdominal pain, nausea, vomiting with eosinophilia likely has a parasitic \ninfection with Ascaris lumbricoides (egg shown in the image). Parasitic infections trigger the \nrelease of IL-5. In a parasitic infection, Th2 cells are stimulated and they produce IL-4 and IL-5. IL-4 stimulates \nthe differentiation of B-cells into IgE-secreting plasma cells, while IL-5 stimulates the maturation \nand release of eosinophils from the bone marrow. The secreted IgE coats the parasite. The \nactivated eosinophils bind to the IgE-coated parasite and kill them through the release of major \nbasic protein. 67 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Structure_and_Functions_of_the_Immune_System_Q14_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 15,
    "question": "Question 15: Macrophages are the major source of  \n.",
    "options": {
      "a": "IL-1",
      "b": "IL-5",
      "c": "IL-7",
      "d": "IFN-"
    },
    "correct_answer": "a",
    "explanation": "Macrophages are the major source of IL-1. Macrophages are phagocytic cells that secrete the following molecules: • Enzymes - Lysozyme, proteases, elastases, collagenases, plasminogen activator. • Cytokines - Interleukins 1, 6, 8, 10, 12; TNF- ; TGF-; prostaglandins. • Platelet-derived growth factor (PDGF), Platelet activated factor (PAF). • Colony-stimulating factor (CSF), Angiotensin-converting enzyme (ACE) • Complements - C2, C4. • Reactive O2 species (ROS)- H2O2, NO, OH. Interferon-gamma (IFN-) is secreted by T-cells. It is one of the most potent macrophage \nactivators.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 16,
    "question": "Question 16: Which of the following mediators of inflammation is an example of a C-X-C chemokine?",
    "options": {
      "a": "Lipoxin LXA– 4",
      "b": "Interleukin IL– 8",
      "c": "Lymphotactin- XCL1",
      "d": "Fractalkine CX3CL1"
    },
    "correct_answer": "b",
    "explanation": "Interleukin-8 is an example of a C-X-C chemokine. Chemokines are chemotactic (chemoattractant) cytokines. They recruit leukocytes to sites of \ninflammation. The C-X-C or alpha chemokines have a total of four cysteines, of which the first \ntwo separated by one amino acid. represented by 'X'.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 17,
    "question": "Question 17: Which of the following is not an antigen-presenting cell?",
    "options": {
      "a": "Helper T cells",
      "b": "Macrophages",
      "c": "Fibroblasts",
      "d": "Dendritic cells"
    },
    "correct_answer": "a",
    "explanation": "T cell is not an antigen-presenting cell. Antigen presenting cells contain MHC class II molecules on their surface. They digest pathogens \nat the site of infection and display those exogenous antigens to T lymphopcytes, thus leading to T \nlymphocyte activation. Examples of antigen-presenting cells include dendritic cells, \nmacrophages, B cells, glial cells (brain), fibroblasts (skin), thymic epithelial cells and vascular \nendothelial cells.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 18,
    "question": "Question 18: A surgeon takes the following 2 images of a patient's arm 6 weeks apart. Which of the \nfollowing mediators promote the process shown below? 59 \nSold by @itachibot",
    "options": {
      "a": "TGF-",
      "b": "IFN-",
      "c": "TNF-",
      "d": "IFN-"
    },
    "correct_answer": "a",
    "explanation": "The image shows wound healing. TGF- (transforming growth factor-) is responsible for wound \nhealing. TGF- is produced by B and T cells and it inhibits their proliferation. It acts as a growth factor for \nfibroblasts and promotes wound healing. It stimulates the production of collagen, fibronectin and \nproteoglycans. It also promotes class switching of B cells to IgA. IL-10 is also involved in wound \nhealing and suppression of inflammation. 68 \nSold by @itachibot Option B: IFN- inhibits viral replication, activates NK cells, and regulates the activity of \nmacrophages and T cells. Option C: TNF- is involved in tumour cytotoxicity, phagocytic cell activation, and antiviral and \nantiparasitic effects. It is an acute phase protein. Option D: IFN- has antiviral activity.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Structure_and_Functions_of_the_Immune_System_Q18_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 19,
    "question": "Question 19: A patient's plasma has high levels of interferon beta. He most likely has an infection due to",
    "options": {
      "a": "Virus",
      "b": "Bacteria",
      "c": "Fungi",
      "d": "Mycoplasma"
    },
    "correct_answer": "a",
    "explanation": "Interferon-beta is secreted during infection due to viruses. Interferons are classified as cytokines. Interferons are non-toxic, non-antigenic and \nspecies-specific molecules. They are inactivated by proteases. They are stable at pH over 2-10, \nexcept INF- (labile at pH 2) and are non-dialysable and non-sedimentable. There are three types of interferons -  ,  and . IFN- or leukocyte interferon is produced by \nleucocytes. It has antiviral activity, is immunoregulaotry and antiproliferative. IFN- or fibroblast \ninterferon is produced by fibroblasts and epithelial cells. It has antiviral activity and is thus \nincreased in viral infections. It enhances MHC class 1 and NK cell activity. IFN- or immune \ninterferon is produced by T-lymphocytes, NK cells . It activates macrophages, increases neutrophil \nfunction, enhances both MHC class 1 and class II expression and has anti-proliferative \n(anti-tumour) functions.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  },
  {
    "q_no": 20,
    "question": "Question 20: A newborn diagnosed with a hepatoblastoma is planned for liver transplantation. Her father \nis found to be an HLA match, and he donates part of his liver. What type of transplantation is \ndescribed here?",
    "options": {
      "a": "IgM",
      "b": "IgG",
      "c": "IgE",
      "d": "IgA"
    },
    "correct_answer": "b",
    "explanation": "The transplant of an organ/tissue from a father to child is an example of an allograft. 69 \nSold by @itachibot Hypersensitivity",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Structure_and_Functions_of_the_Immune_System_Q20_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Structure and Functions of the Immune System"
  }
]