[
  {
    "q_no": 1,
    "question": "Question 1: A 20 year old male presents with acute onset cough and thick sticky sputum. There is a \nhistory of repeated lung infections since childhood. Chest Xray shows evidence of bilateral \nupper lobe bronchiectasis. On evaluation, the chloride concentration in his sweat is &gt;60 \nmEq/L. What is the organism majorly associated with this patient's respiratory disease?",
    "options": {
      "a": "Burkholderia pseudomallei",
      "b": "Pseudomonas putida",
      "c": "Pseudomonas aeruginosa",
      "d": "Burkholderia cepacia"
    },
    "correct_answer": "c",
    "explanation": "Bilateral upper lobe bronchiectasis with a history of repeated lung infections since childhood and \nevelated sweat chloride concentration suggests a diagnosis of cystic fibrosis (CF). Pseudomonas \naeruginosa is a common etiological agent associated with chronic airway infection in patients \nwith cystic fibrosis (CF). 242 \nSold by @itachibot In cystic fibrosis, there is thick inspissated mucus and impaired mucociliary clearance. Due to \nthese factors, lungs are often colonized in infancy and early childhood with Staphylococcus aureus \nand Haemophilus influenzae. In adulthood, they are replaced by P. aeruginosa. This results in \nchronic inflammation, which leads to airway modelling and bronchiectasis. Note: Burkholderia cepacia complex is an opportunistic environmental pathogen. It causes fatal \nrespiratory distress and septicemia in CF patients. This is termed as 'cepacia syndrome'.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 2,
    "question": "Question 2: Which of the following organisms causes scombroid fish poisoning?",
    "options": {
      "a": "Salmonella",
      "b": "Staphylococcus",
      "c": "Pseudomonas aeruginosa",
      "d": "Peptostreptococcus"
    },
    "correct_answer": "c",
    "explanation": "Scombroid fish poisoning is associated with Pseudomonas aeruginosa. It follows the consumption of both scombroid (mackerel-like) fish and nonscombroid fish that \nhave not been refrigerated properly. The musculature of these dark- or red-fleshed fish undergoes \ndecomposition by Morganella morganii, Escherichia coli, Proteus species, Klebsiella species, and \nPseudomonas aeruginosa. There is consequent decarboxylation of the amino acid L-histidine to \nform histamine. A second compound is thought to play a causative role in this intoxication because large doses of \noral histamine do not reproduce the affliction. The toxin or toxins involved are heat stable and are \nnot destroyed by cooking or freezing. Symptoms develop within 15–90 min of ingestion. Most cases are mild, with tingling of lips and \nmouth, mild abdominal discomfort, and nausea. The more severe and commonly described \npresentation includes flushing, conjunctival hyperemia, pruritus, urticaria, and \nangioedema. Without treatment, the symptoms generally resolve within 8–12 h.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 3,
    "question": "Question 3: A patient comes to the dermatology OPD complaining of greenish discoloration of her nails. \nYou diagnose her with green nail syndrome. Production of which of the following helps \ndifferentiate the organism implicated here from other members of its genus?",
    "options": {
      "a": "Pyocyanin",
      "b": "Pyoverdin",
      "c": "Pyorubin",
      "d": "Pyomelanin"
    },
    "correct_answer": "a",
    "explanation": "Green nail syndrome is caused by Pseudomonas aeruginosa. Production of pyocyanin helps \ndifferentiate it implicated here from other Pseudomonas species. Pseudomonas aeruginosa is the only member of the Pseudomonas species that produces \npyocyanin which is a bluish-green pigment. Other species of Pseudomonas also produce pigments \nbut they cannot produce pyocyanin. Some of the other pigments produced by Pseudomonas \nspecies including P. aeruginosa are pyoverdin/flourescein (greenish-yellow pigment), pyorubin \n(red pigment) and pyomelanin (brown pigment).",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 4,
    "question": "Question 4: 238 \nSold by @itachibot The mechanism of action of exotoxin A of Pseudomonas resembles that of  \n.",
    "options": {
      "a": "Cholera toxin",
      "b": "Diphtheria toxin",
      "c": "Tetanus toxin",
      "d": "Anthrax toxin"
    },
    "correct_answer": "b",
    "explanation": "The action of exotoxin A of Pseudomonas aeruginosa is similar to that of the diphtheria toxin. Both exotoxin A and diphtheria toxin cause ADP ribosylation of EF-2 and inhibit protein \nsynthesis. Exotoxin A is a single-chain polypeptide with A and B fragments. The B fragment binds \nthe toxin while the A fragment inactivates EF-2 in the presence of nicotinamide adenine \ndinucleotide (NAD). This leads to the inhibition of polypeptide chain elongation and thus, protein 243 \nSold by @itachibot synthesis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 5,
    "question": "Question 5: A patient with acute onset fever, cough and hemoptysis is diagnosed to have Whitmore's \ndisease. Which of the following organisms causes this condition?",
    "options": {
      "a": "Burkholderia pseudomallei",
      "b": "Burkholderia mallei",
      "c": "Burkholderia cepacia",
      "d": "Paraburkholderia species"
    },
    "correct_answer": "a",
    "explanation": "Burkholderia pseudomallei causes Whitmore's disease. Melioidosis was first described by Whitmore and Krishnaswami. Whitmore isolated the bacillus, \nand hence, it is known as Whitmore bacillus and melioidosis is called Whitmore's disease. \nMelioidosis is similar in presentation to glanders disease (caused by Burkholderia mallei). \nHumans are infected tby contact with contaminated soil via skin abrasions. Types of melioidosis: • Acute - It causes acute pneumonia with upper lobe infiltrates or severe necrotizing disease. It \ncan also mimic tuberculosis with fever, cough, hemoptysis. It may lead to septicemia. • Chronic - It can lead to the development of multiple caseous or suppurative foci, with skin and \nsubcutaneous abscesses. These can lead to lymphangitis and lymphadenopathy. It may involve \nbones and other internal organs. The bacillus has a safety-pin appearance on methylene blue staining. Treatment is divided into \ntwo stages: an intensive 2 week phase of ceftazidime or a carbapenem followed by at least 12 \nweeks of oral cotrimoxazole to eradicate the organism and prevent relapse.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 6,
    "question": "Question 6: A horse-groomer was diagnosed with ulcerative tracheobronchitis. Upon enquiry, it was \ndiscovered that one of his horses had recently died of pneumonia after developing a fever and \nsubcutaneous nodules. Which of the following statements is false about the likely causative \nagent?",
    "options": {
      "a": "It is non-motile.",
      "b": "It is always oxidase negative",
      "c": "It is the causative agent for Glanders disease.",
      "d": "It induces Strauss reaction on inoculation into guinea pigs."
    },
    "correct_answer": "b",
    "explanation": "The development of ulcerative tracheobronchitis after contact with an infected horse is suggestive \nof glanders which is caused by Burkholderia mallei. It is an oxidase variable organism. In this case, the horse likely had glanders, which presents with fever, pneumonia, and \nsubcutaneous nodules called Farcy buds. Discharges from the respiratory tract and skin are highly \ninfectious and can be transmitted to humans through close contact (occupational route). The 244 \nSold by @itachibot horse-groomer likely contracted the infection by the inhalational route and developed acute \nglanders, which is characterised by fever, mucopurulent nasal discharge and ulcerative necrosis of \nupper respiratory tract (ulcerative tracheobronchitis). It may lead to septicemia and has a high \nfatality rate. Percutaneous exposure causes local suppurative skin lesions with associated regional \nlymphadenopathy. B. mallei is a non-motile Gram-negative bacillus causing Glanders disease. It is an aerobe and a \nfacultative anaerobe. It is oxidase variable i.e. it is usually oxidase negative but may occasionally \nshow a positive reaction. It is a biosafety level 3 pathogen and so must be handled only in \nspecialised laboratories. When male guinea pigs are inoculated intraperitoneally with suspected \ninfectious material, it causes Strauss reaction. B. mallei sets up a necrotizing inflammation in the \nscrotal sac within a few days and can be confirmed bacteriologically.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 7,
    "question": "Question 7: Which of the following is Burkholderia cepacia resistant to?",
    "options": {
      "a": "Ceftazidime",
      "b": "Trimethoprim-sulfamethoxazole",
      "c": "Temocillin",
      "d": "Cefotetan"
    },
    "correct_answer": "d",
    "explanation": "Burkholderia cepacia is resistant to cefotetan. B. cepacia complex strains are intrinsically resistant to aminoglycosides, polymixin, first and \nsecond-generation cephalosporins (e.g. cefotetan) and carboxypenicillins. This antimicrobial \nresistance is mediated by efflux pumps, antimicrobial degradation, modifying enzymes or altered \nmembrane functions. B. cepacia is a Gram-negative bacillus which can cause severe necrotizing pneumonia in patients \nwith chronic granulomatous disease. It can lead to fatal septicemia in patients with cystic fibrosis. Antimicrobial agents that are effective against B. cepacia complex include meropenem, \nceftazidime, trimethoprim-sulfamethoxazole, piperacillin and temocillin.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 8,
    "question": "Question 8: An organism cultured in Bordet–Gengou medium shows smooth, refractile, glistening \ncolonies resembling 'bisected pearls' or 'mercury drops'. The organism is most likely  \n.",
    "options": {
      "a": "Bordetella parapertussis",
      "b": "Bordetella bronchiseptica",
      "c": "Bordetella pertussis",
      "d": "Bordetella petrii"
    },
    "correct_answer": "c",
    "explanation": "The organism showing colonies resembling 'bisected pearls' or 'mercury drops' on Bordet-Gengou \nmedium most likely is Bordetella pertussis. Bordetella pertussis is a Gram-negative coccobacillus. It causes whooping cough or pertussis in \nchildren. It can be isolated on the enriched medium Bordet-Genou medium (potato-blood-glycerol agar). \nAfter incubation for 48 to 72 hours, B. pertussis colonies are small, dome-shaped, smooth, \nopaque, viscid, greyish white, refractile, and glistening resembling 'bisected pearls' or 'mercury \ndrops' and are surrounded by a hazy zone of hemolysis. If growth is confluent, an 'aluminium \npaint' appearance is seen. In culture films, Bordetella pertussis bacilli tend to be arranged in loose \nclumps, with clear spaces in between, giving a 'thumbprint' appearance. B. parapertussis (option A) grows on nutrient agar with the production of a brown, diffusible \npigment after two days. It also grows more rapidly than B.pertussis on charcoal blood agar. 245 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 9,
    "question": "Question 9: An 8-year-old boy with incomplete vaccination history comes with vomiting after bouts of \nsevere, violent cough. What is the mechanism of action of the toxin responsible for this child's \ndisease?",
    "options": {
      "a": "Activation of phospholipase and degrades cell membrane",
      "b": "Inactivation of 60S ribosome",
      "c": "ADP ribosylation and lymphocytosis",
      "d": "Activation of guanylate cyclase"
    },
    "correct_answer": "c",
    "explanation": "Post-tussive vomiting and bouts of cough in an unimmunized child points to a diagnosis of \npertussis, caused by Bordetella pertussis. It secretes pertussis toxin (PT), which acts by ADP \nribosylation and disrupts signal transduction of many cell types. This promotes lymphocytosis. The pertussis toxin disrupts protein synthesis and causes necrosis of parts of the epithelium, \nleading to pseudomembrane formation. Pertussis toxin also promotes sensitization to histamine \nand enhances insulin secretion but these effects have not been demonstrable in patients. They are \nonly seen in experimental animals. B. pertussis also produces other toxins like: • Adenylate cyclase toxin (ACT)- It acts by catalysing the production of cAMP by various types of \ncells and inhibiting phagocytosis. • Heat labile toxin (HLT)- It is a cytoplasmic protein present in all bordetellae. It is dermonecrotic \nand lethal in mice. Its pathogenic role is not known. • Tracheal cytotoxin (TCT)- It is low molecular weight peptidoglycan which induces ciliary damage \nin hamster trachea.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 10,
    "question": "Question 10: Which of the following statements is false about pertussis toxin?",
    "options": {
      "a": "It is expressed on the surface of the bacillus.",
      "b": "It cannot be toxoided.",
      "c": "\"A\" portion of A-B structure is the enzymatically active moiety.",
      "d": "It is similar to cholera toxin in its structure and function."
    },
    "correct_answer": "b",
    "explanation": "Pertussis toxin (PT) can be toxoided. PT is one of the toxins produced by Bordetella pertussis. It is expressed on the surface of the \nbacillus and secreted into the surrounding medium. It has an A-B structure, the A portion being \nthe enzymatically active moiety and B, the binding component. PT is similar to cholera toxin in its \nstructure and function. PT has ADP-ribosylating activity and acts on inhibitory Gi  subunit of \nG-protein coupled receptor (GPCR), whereas cholera toxin acts on stimulatory Gs  subunit of 246 \nSold by @itachibot GPCR. Pertussis toxoid is the major component of the acellular pertussis vaccine. A toxoid is a toxin that \nhas lost its toxicity but retains its antigenicity.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 11,
    "question": "Question 11: A 4-year-old unimmunized child presents with whooping cough. Which of the following \nconstituents of the causative organism is responsible for facilitating its adhesion to the \nrespiratory epithelium?",
    "options": {
      "a": "Adenylate cyclase",
      "b": "Lipopolysaccharide",
      "c": "Tracheal cytotoxin",
      "d": "Filamentous hemagglutinin"
    },
    "correct_answer": "d",
    "explanation": "Whooping cough is caused by Bordetella pertussis. Filamentous hemagglutinin (FHA) is \nresponsible for facilitating the adhesion of Bordetella pertussis to the respiratory epithelium. Bordetella pertussis produces 3 hemagglutinins: Pertussis toxin (PT), lipid factor and FHA. FHA is \na surface protein and is readily shed. Along with fimbrae, it helps in the adhesion of B. pertussis \nto the cilia of the respiratory epithelium and to erythrocytes. FHA and PT also promote secondary \ninfection by coating other bacteria such as Haemophilus influenzae and Pneumococci. They then \nassists their binding to respiratory epithelium. This phenomenon has been termed 'piracy of \nadhesins'.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 12,
    "question": "Question 12: What is the incubation period of pertussis in humans?",
    "options": {
      "a": "&lt;7 days",
      "b": "3-5 days",
      "c": "21-30 days",
      "d": "7-14 days"
    },
    "correct_answer": "d",
    "explanation": "The incubation period of pertussis in humans is 7-14 days. Pertussis is caused by Bordetella pertussis. After the incubation period, the disease takes a \nprotracted course comprising three stages: • Catarrhal: It lasts 1-2 weeks and is characterized by coryza, lacrimation, mild cough, low-grade \nfever, and malaise. • Paroxysmal: It lasts 2-4 weeks with the cough becoming more frequent and spasmodic. The \ncough comes in repetitive bursts of 5–10 in number, often within a single expiration. \nPost-tussive vomiting is frequent. The episode may be terminated by an audible whoop, which \noccurs upon rapid inspiration against a closed glottis at the end of a paroxysm. • Convalescent: It lasts 1–3 months and is characterized by gradual resolution of coughing \nepisodes. Whooping cough is also known as '100-day cough'. For 6–12 months following the illness, \nintercurrent viral infections may be associated with a recrudescence of paroxysmal cough.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 13,
    "question": "Question 13: You are evaluating a 6-year-old unimmunised girl with cough and abdominal pain. Her \nmother informs you that her daughter has bouts of violent coughing which frequently ends \nwith a loud whoop and is accompanied by vomiting. She gives history of similar complaints in \na classmate 2-3 weeks back. Which of the following drugs will you prescribe for this patient?",
    "options": {
      "a": "Erythromycin",
      "b": "Penicillin",
      "c": "Ciprofloxacin",
      "d": "Cotrimoxazole"
    },
    "correct_answer": "a",
    "explanation": "The given case scenario of whooping cough, post-tussive vomiting, and abdominal pain, along \nwith positive history of exposure in an unimmunised child is suggestive of pertussis. \nErythromycin or one of the newer macrolides such as azithromycin or clarithromycin is the drug \nof choice for the treatment of this condition. Antibiotic therapy in pertussis is used to eradicate the bacteria from the nasopharynx. The \ntreatment is beneficial if it is started within 10 days of the disease. Macrolides are the drugs of 247 \nSold by @itachibot choice. Trimethoprim-sulfamethoxazole (Cotrimoxazole) is recommended as an alternative for \nindividuals allergic to macrolides. Macrolides may also be used in the chemoprophylaxis of \npertussis. Post-exposure prophylaxis is given to household close contacts, and high-risk contacts \n(infants, immunocompromised, pregnancy).",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 14,
    "question": "Question 14: A young child with unknown immunization history is suspected to have whooping cough. \nWhich of the following methods will you prefer to use to collect a specimen for culture?",
    "options": {
      "a": "Cough plate method",
      "b": "Per-oral swab",
      "c": "Per-nasal swab",
      "d": "Post-nasal swab"
    },
    "correct_answer": "c",
    "explanation": "Whooping cough is caused by Bordotella pertussis. The most effective method for collecting a \nspecimen for the culture of this organism is the per-nasal or nasopharyngeal swab method. Respiratory specimens may be collected for the culture (gold standard) of Bordetella pertussis by \nthree different methods: • Per-nasal swab: A Dacron or rayon tipped swab on a flexible nichrome wire is passed along the \nfloor of the nasal cavity and material is collected from the pharyngeal wall. This specimen is \nthe most effective and best suited for diagnostic procedures. • Cough plate method: A culture plate is held about 10 to 15 cms in front of the patient's mouth \nduring a bout of cough. • Post-nasal (peroral) method: Secretions from the posterior pharyngeal wall are collected with a \ncotton swab on a bent wire passed through the mouth. Other diagnostic tests for pertussis include direct fluorescent aantibody test and PCR on \nnasopharyngeal specimens. Enzyme immunoassays of antibodies after exposure to B. pertussis \ncan also be used for patients between 2-4 weeks of illness.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Pseudomonas and Burkholderiales"
  },
  {
    "q_no": 15,
    "question": "Question 15: 241 \nSold by @itachibot A pregnant woman comes to the ANC clinic for her 2nd dose of the Tdap vaccine. Which of \nthe following constitutes the acellular component of this vaccine?",
    "options": {
      "a": "Hemophilus influenzae",
      "b": "Klebsiella granulomatis",
      "c": "Streptococcus pneumoniae",
      "d": "Neisseria meningitidis"
    },
    "correct_answer": "d",
    "explanation": "Tdap vaccine is the tetanus, diphtheria and acellular pertussis vaccine. The component of the \nacellular pertussis vaccine is inactivated pertussis toxin (PT) and it may contain one or more \nbacterial components such as pertactin, filamentous hemagglutinin, and fimbrial protein. Pertussis vaccine is usually administered in combination with the toxoids of diphtheria and \ntetanus (DTaP). Five doses of pertussis vaccine are recommended - at 2, 4, 6 and 15–18 months of \nage followed by a booster dose at 4–6 years of age. Tdap is now also recommended for pregnant women in between 27 weeks and 36 weeks of \ngestation by the ACOG. This is because infants between the age of 0-2 months are vulnerable to \npertussis as they do not begin their vaccine schedule before 6 weeks of age. Thus to protect these \ninfants, placental transfer of maternal pertussis antibodies has proven to be the most effective \napproach. Children under 4 years who are contacts of patients should receive a booster even if \nthey had been previously immunized. Non-immunized contacts should receive full series of \nvaccination and also chemoprophylaxis with erythromycin for 10 days after contact with the \npatient has ceased. 248 \nSold by @itachibot Haemophilus",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Pseudomonas_and_Burkholderiales_Q15_q.jpg",
    "explanation_image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Pseudomonas_and_Burkholderiales_Q15_exp.jpg",
    "chapter_heading": "Pseudomonas and Burkholderiales"
  }
]