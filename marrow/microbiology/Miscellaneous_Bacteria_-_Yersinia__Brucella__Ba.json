[
  {
    "q_no": 1,
    "question": "Question 1: The milk ring test is found to be positive for a sample of milk. Which organism has it most \nlikely been contaminated with?",
    "options": {
      "a": "Brucella",
      "b": "Bordetella",
      "c": "Bacillus",
      "d": "Burkholderia"
    },
    "correct_answer": "a",
    "explanation": "Milk ring test (MRT) is positive for Brucella. It is used for the detection of infected animals in \ndairy farms. A sample of whole milk is mixed with a drop of Brucella antigen and incubated at 70 °C for 40–50 \nmin. If antibodies are present in the milk, the bacilli are agglutinated and rise with the cream to \nform a blue ring at the top, leaving the rest of the milk unstained (MRT positive). If antibodies are \nabsent, the solution remains uniformly blue (MRT negative).",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 2,
    "question": "Question 2: Which of the following is an intracellular pathogen?",
    "options": {
      "a": "Brucella suis",
      "b": "Haemophilus influenzae",
      "c": "Pseudomonas aeruginosa",
      "d": "Staphylococcus aureus"
    },
    "correct_answer": "a",
    "explanation": "Brucella suis is primarily an intracellular pathogen affecting reticuloendothelial system. This \naccounts for its refractoriness to chemotherapy.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 3,
    "question": "Question 3: A farmer was diagnosed with brucellosis. Which of the following patterns of fever will be seen \nin this disease?",
    "options": {
      "a": "Pel-Ebstein fever",
      "b": "Undulant fever",
      "c": "Relapsing fever",
      "d": "Saddleback fever"
    },
    "correct_answer": "b",
    "explanation": "Brucellosis is a bacterial zoonosis caused by Brucella sp which presents with undulant fever. It is \nreferred to as undulant fever because of the rising and falling of fever like a wave (remittent \nfever). Patients may also have arthralgia, muscular pain, sweating, loss of weight, and appetite. \nCNS symptoms such as fatigue, irritability, and depression might also occur. Other options Option A: Pel-Ebstein fever is seen in Hodgkin's lymphoma. It is characterized by fever lasting 3–\n10 days followed by afebrile periods of 3–10 days. 271 \nSold by @itachibot Option C: Relapsing fever is seen in infection with Borrelia recurrentis in which days of fever are \nfollowed by a several-day afebrile period and then relapse into additional days of fever. A similar \npicture is also seen in malaria. Option D: Saddleback fever is seen in dengue. Saddleback fever is defined as temperature \n&gt;37.5°C with defervescence of at least one day, followed by a second peak lasting at least one \nday.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 4,
    "question": "Question 4: A 56-year-old dairy farmer presented with remittent fever and night sweats for 1 month. On \nexamination, he was hypotensive and pallor was present. Rose Bengal card tests done on milk 262 \nSold by @itachibot samples from his farm were found to be positive. Which blood culture method with a biphasic \nmedium will be used to isolate the organism?",
    "options": {
      "a": "BACTEC method",
      "b": "Castaneda method",
      "c": "Septi-check method",
      "d": "Oxoid signal method"
    },
    "correct_answer": "b",
    "explanation": "The given case scenario of remittent fever with anemia with a positive Rose Bengal card test is \nsuggestive of brucellosis. Castaneda method for blood culture is used to isolate Brucella sp. In the Castaneda method, blood is inoculated into a bottle of trypticase soy broth or brucella broth \nin a biphasic blood culture bottle (with liquid and solid media in the same bottle). This method \nminimizes materials and manipulation, thus reducing the chances of contamination and risk of \ninfection to laboratory workers. Blood cultures are positive in only 30–50% of cases even when repeated samples are \ntested. B.melitensis and B.suis are isolated more readily than B.abortus. The below image shows \nCastaneda's bottle. Lab diagnosis of brucellosis is done using the following methods: • Blood culture with • Castaneda's method - recommended • BACTEC - an automated method. It is faster than Castaneda's method. • Serological tests: • Standard agglutination test (SAT) • ELISA for specific IgG/IgM 272 \nSold by @itachibot • Dipstick assays • Detection in milk and infected cattle is carried out by: • Microscopic demonstration by staining or immunofluorescence • Milk ring test • Rose Bengal card test",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 5,
    "question": "Question 5: A 50-year-old farmer presents with fever, weight loss, and lower backache for three weeks. \nBlood reports show predominant lymphocytosis. What are the drugs of choice for treating \nthis condition?",
    "options": {
      "a": "Cotrimoxazole and rifampicin",
      "b": "Doxycycline and cotrimoxazole",
      "c": "Doxycycline and streptomycin",
      "d": "Streptomycin and rifampicin"
    },
    "correct_answer": "c",
    "explanation": "The given scenario of a farmer with fever, weightloss and back pain with a predominant \nlymphocytosis points towards a diagnosis of acute brucellosis. The drugs of choice for this \ncondition in adults are intramuscular streptomycin with doxycycline. The usual alternative regimen (and the current World Health Organization recommendation) is \nrifampin plus doxycycline. However, this is associated with a higher relapse rate, possibly because \nrifampicin increases clearance of doxycycline and reduces serum doxycycline levels. In children, cotrimoxazole along with rifampicin or gentamycin may be used for the treatment of \nbrucellosis. Note: B. melitensis is endemic to the Middle East.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 6,
    "question": "Question 6: A 34-year-old man presents to the hospital with fever, joint pain and a rash on his hands. He \ngives a history of a rat bite 1 week back. Which of the following can cause this disease?",
    "options": {
      "a": "1 and 3.",
      "b": "2 and 4.",
      "c": "3 and 5.",
      "d": "2 and 5."
    },
    "correct_answer": "d",
    "explanation": "The given case scenario is suggestive of rat-bite fever. This can be caused by Streptobacillus \nmoniliformis and Spirillum minus. Rat-bite fever (RBF) is characterized by fever, rash, and arthralgia which usually occurs days or \nweeks after a bite. The two types of rat-bite fever are: • Streptobacillary RBF develops 2–10 days after a rat bite, associated with sudden onset of fever, \nheadache, and myalgia followed by petechial rash and arthritis. It is also called Haverhill fever or \nErythema arthrititicum epidemicum. • Spirillary RBF is similar to streptobacillary type but it is also associated with regional \nlymphadenopathy. It is also called Sodoku. Diagnosis is based on demonstration of causative organisms in peripheral blood films. Serology \ncan also be used for diagnosis. RBF is treated with intravenous Penicillin G. Alternative drugs include ampicillin, cefuroxime, \nand cefotaxime. Note: Pasteurella multocida causes cellulitis and lymphangitis following bites by cats and dogs. Bartonella henselae causes cat sratch disease and bacillary angiomatosis. Borellia burgdorferi causes Lyme disease. 273 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 7,
    "question": "Question 7: While evaluating the Pap smear of a patient, you come across the following finding. What is \nthe diagnosis? 263 \nSold by @itachibot",
    "options": {
      "a": "Lymphogranuloma venereum",
      "b": "Bacterial vaginosis",
      "c": "Trichomoniasis",
      "d": "Gonorrhea"
    },
    "correct_answer": "b",
    "explanation": "The given image shows clue cells which are seen in bacterial vaginosis. They are epithelial cells \nwith their surface covered by adherent bacilli seen in stained or unstained films. Bacterial vaginosis is a polymicrobial infection characterized by a malodorous (fishy smell) vaginal \ndischarge. Causative organisms include: • Gardnerella vaginalis • Mycoplasma hominis • Prevotella • Ureaplasma • Peptostreptococcus. Bacterial vaginosis is diagnosed using Amsel's criteria and Nugent's score: 1. Amsel's Criteria: (any 3 should be present) • Thin, white/yellow homogenous vaginal discharge • pH of Vaginal fluid&gt;4.5 • Fishy odour of discharge accentuated on adding 10% KOH (Whiff test) • Clue cells seen on microscopy 2. Nugent's score is obtained by counting the number of Gardnerella vaginalis, Mobilincus and \nlactobacillus in the gram-stained smear of vaginal discharge. A score of 7 is diagnostic Treatment is oral metronidazole 500 mg BD for 7 days. The images below show clue cells from microscopy. 274 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q7_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 8,
    "question": "Question 8: A patient from Kolar, Karnataka presented with fever and hemoptysis. The findings of his \nperipheral smear examination are given below. Which of the following is the causative \norganism?",
    "options": {
      "a": "Yersinia pestis",
      "b": "Bacillus anthracis",
      "c": "Bordetella pertussis",
      "d": "Klebsiella pneumonia"
    },
    "correct_answer": "a",
    "explanation": "The given case scenario and the image showing the characteristic \"safety-pin appearance\" in \nperipheral smear is suggestive of plague caused by Yersinia pestis. On staining with Giemsa stain or methylene blue (Wayson's stain), the bacteria has bipolar \nstaining with two ends densely stained and the central area clear. This is the characteristic \n'safety-pin appearance' seen in Y. pestis. Bipolar staining is also shown by the following organisms: • Haemophilus ducreyi • Vibrio parahemolyticus • Calymmatobacterium granulomatis • Burkholderia mallei • Burkholderia pseudomallei. Note: In India, 4 foci of plague are known: • Kolar at the trijunction of Tamil Nadu, Andhra Pradesh, and Karnataka. • Beed-Latur belt in Maharashtra • Rhoru, Himachal Pradesh • Uttarakhand The image given below shows the safety-pin appearance of Yersinia pestis on Wayson's stain 275 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q8_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 9,
    "question": "Question 9: A child from Uttarakhand suddenly developed fever with chills and malaise. He also \ndeveloped a tender swelling which is shown in the image. There's a history of similar \ncomplaints in the community. What is false about the disease he's likely suffering from?",
    "options": {
      "a": "Wild rodents and their infected fleas are the primary reservoir.",
      "b": "The septicemic form cannot be acquired directly.",
      "c": "The pneumonic form is far more contagious than the bubonic form.",
      "d": "The bubonic form may progress to the pneumonic form."
    },
    "correct_answer": "b",
    "explanation": "The given case scenario of sudden-onset fever with painful lymphadenopathy and a history of \nsimilar complaints in the community is suggestive of a diagnosis of plague caused by Yersinia \npestis. The septicemic form of the disease may be acquired directly if the bacteria enter the \nbloodstream via infected blood transfusions. Wild rodents and their infected fleas are the primary reservoirs of Yersinia pestis. Infection is \ntransmitted to humans by the bite of infected fleas. Human plague occurs in 3 clinical forms (in increasing order of severity): bubonic plague&lt; \npneumonic plague&lt; septicemic plague Bubonic plague- It is the most common variety of the disease. It is named after the buboes \nmeaning swollen lymph nodes, which typically develop within a week after an infected flea bite. \nOther clinical features include sudden onset of fever and chills, headache, and fatigue. Pneumonic plague- Bubonic plague can advance and spread to the lungs. It is the most virulent \nform of plague. Any person with pneumonic plague may transmit the disease via droplets to other \nhumans. The symptoms include dyspnoea, chest pain, cough, fever, and hemoptysis. Septicemic plague- When the bacteria enter the bloodstream directly and multiply there, it is \nknown as septicemic plague. When left untreated, both bubonic and pneumonic plague can lead \nto septicemic plague.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q9_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 10,
    "question": "Question 10: A sudden epidemic of pneumonic plague has occurred in the Beed-Latur belt of Maharashtra. \nThe primary contact of a suspected case came to you for preventive treatment. What will you \nprescribe for chemoprophylaxis in this patient?",
    "options": {
      "a": "Penicillin",
      "b": "Rifampicin",
      "c": "Erythromycin",
      "d": "Doxycycline"
    },
    "correct_answer": "d",
    "explanation": "The drug of choice for chemoprophylaxis of plague is doxycycline. It is given for 7 days to all close \ncontacts of a patient having pneumonic plague. 276 \nSold by @itachibot Ciprofloxacin, levofloxacin, and moxifloxacin are the other first-line drugs used for antimicrobial \nprophylaxis. The drug of choice for the treatment of plague is streptomycin. Streptomycin is nephrotoxic and \nototoxic and should, therefore be cautiously used. Doxycycline or ciprofloxacin (and other \nfluoroquinolones) are considered as alternative drugs for the treatment of plague.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 11,
    "question": "Question 11: Which of the following organisms do not cause yersiniosis?",
    "options": {
      "a": "Yersinia enterocolotica",
      "b": "Yersinia pestis",
      "c": "Yersinia enterocolitica and Yersinia pseudotuberculosis",
      "d": "Yersinia pestis and Yersinia pseudotuberculosis"
    },
    "correct_answer": "b",
    "explanation": "The term yersiniosis denotes infections with yersiniae other than Y.pestis. Yersiniosis includes zoonotic infections by Y.pseudotuberculosis and Y.enterocolitica.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 12,
    "question": "Question 12: A 65-year-old patient presents to the OPD with high fever, chest pain, dyspnoea, and \nhemoptysis. The patient also complains of watery diarrhea. The direct fluorescent antibody \nstained film of his pleural fluid is given below. Identify the most likely etiologic agent.",
    "options": {
      "a": "Chlamydia pneumoniae",
      "b": "Legionella pneumophila",
      "c": "Hemophilus influenzae",
      "d": "Klebsiella pneumoniae"
    },
    "correct_answer": "b",
    "explanation": "The given clinical vignette and the image showing fluorescent organisms in the direct fluorescent \nantibody (DFA) stained film of pleural fluid suggest the diagnosis of Legionnaire's disease, caused \nby Legionella pneumophila. Two distinct clinical patterns of legionellosis have been identified: • Legionnaires' disease presents with fever, non-productive cough, and dyspnea rapidly \nprogressing to pneumonia if left untreated. Patients can also develop a hyponatremia. Diarrhea \nand encephalopathy are also common. It is often included in the differential diagnosis of atypical \npneumonia. Atypical pneumonia is also caused by: • Chlamydia pneumonia • Chlamydia psittaci • Mycoplasma pneumonia • Coxiella burnetii • Viruses such as influenza virus, adenovirus and respiratory syncytial virus • Pontiac fever is a milder, non-fatal, influenza-like illness with fever, chills, myalgia, and \nheadache. Other options: Option A: Chlamydia pneumonia causes pharyngitis, sinusitis, bronchitis, and pneumonia. It has \nalso been associated with adult onset asthma. Outbreaks have been reported in closed \ncommunities. Real-time PCR is used for its diagnosis. Option C: Haemophilus influenzae typically causes pneumonia in infants. While the primary \ninfections occur due to capsulated strains, bronchopneumonia may occur as a secondary infection \ndue to non-capsulated strains. Gram stain and culture are used for diagnosis. Option D: Klebsiella pneumonia causes fatal pneumonia, which occurs in middle -aged or older \npersons with risk factors such as alcoholism, chronic bronchopulmonary disease or diabetes \nmellitus. Gram stain and culture are used for diagnosis. 277 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q12_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 13,
    "question": "Question 13: BCYE medium is used to culture: 266 \nSold by @itachibot",
    "options": {
      "a": "Leptospira",
      "b": "Bacillus cereus",
      "c": "Campylobacter",
      "d": "Legionella"
    },
    "correct_answer": "d",
    "explanation": "BCYE medium (buffered charcoal yeast extract agar) is used to culture Legionella pneumophila. Legionella pneumophila has fastidious growth requirements and grows on complex media such \nas BCYE medium with L-cysteine and antibiotic supplements (e.g., polymyxin B, cefazolin, \nvancomycin). The charcoal acts as a detoxifying agent. It grows slowly, and the colonies may take \n3–6 days to appear. Other options: Option A: Leptospira is cultured on EMJH (Ellinghausen, McCullough, Johnson and Harris) \nmedium Option B: Bacillus cereus is cultured on PEMBA (Polymyxin pyruvate egg-yolk mannitol–\nbromothymol blue) agar Option C: Campylobacter is cultured on Skirrow's, Campy BAP or Butzler's agar.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 14,
    "question": "Question 14: A 60-year-old man is diagnosed with Legionnaires’ disease. He had recently attended a \nconference. What is the most likely way he acquired the infection?",
    "options": {
      "a": "From the air-conditioned rooms at the conference",
      "b": "From a chronic carrier of the disease",
      "c": "From sharing a towel with a fellow colleague in the conference",
      "d": "From drinking the water provided at the conference"
    },
    "correct_answer": "a",
    "explanation": "This patient most likely acquired infection with Legionella pneumophila from inhalation of \naerosol in the air-conditioned rooms at the conference. Legionella pneumophila can be found in natural, freshwater environments, but generally is not \npresent in sufficient numbers to cause disease. Infection is typically by inhalation of aerosols \nproduced by cooling towers, air conditioners, and showerheads which act as disseminators No animal reservoirs exist. No evidence of human-to-human transmission has been found and no \ncarrier state is established.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 15,
    "question": "Question 15: A patient presented with fever and regional lymphadenopathy, following a scratch from his \npet kitten. His lymph node biopsy specimen was examined with Warthin-Starry staining; the \nfindings are shown in the given image. What is the causative organism of this condition?",
    "options": {
      "a": "Bartonella henselae",
      "b": "Bartonella bacilliformis",
      "c": "Bartonella quintana",
      "d": "Borrelia burgdorferi"
    },
    "correct_answer": "a",
    "explanation": "This patient presents with fever and lymphadenopathy after a cat scratch and the above image \nshows the black short rod-shaped bacilli arranged in chains or clumps, suggestive of cat scratch \ndisease, This condition is caused by Bartonella henselae. Cat scratch disease presents as a febrile illness with lymphadenopathy following a cat scratch. \nPatients present with a painless papule or pustule at the site of the scratch and lymph node \nenlargement and can be suppurative. The disease is usually self resolving. However, it can be \ntreated with azithromycin only in patients who have severe complications.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q15_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 16,
    "question": "Question 16: Choose the correct statement regarding 5-day fever.",
    "options": {
      "a": "Transmitted by Phlebotomus sandflies.",
      "b": "Incubation period is 5 days",
      "c": "No animal reservoir is known",
      "d": "Treatment is necessary only in the severe cases"
    },
    "correct_answer": "c",
    "explanation": "5-day fever is an exclusively human disease and no animal reservoir is known. 278 \nSold by @itachibot 5-day fever is also known as trench fever/quintan fever. It is caused by Bartonella quintana. It is \ncharacterized by sudden onset of fever accompanied by headache, malaise, restlessness, and shin \npain. Trench fever is transmitted by the body louse. (Option A). It has an incubation period ranging \nfrom 14-30 days. Symptoms coincide with the release of B. quintana in blood every 3-5 days with \neach episode lasting 5 days. Recrudescence and relapses are common. (Option B) All cases are treated using doxycycline. Macrolides and fluoroquinolones can also be used in its \ntreatment. (Option D)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 17,
    "question": "Question 17: A young man presented to the ER with fever and suppurative lymphadenopathy of his left \naxilla a few days after he sustained a scratch from his pet cat. Which of the following will \nmost likely be seen on biopsy of the lymph node?",
    "options": {
      "a": "Foreign body granuloma",
      "b": "Naked granuloma",
      "c": "Durck granuloma",
      "d": "Stellate granuloma"
    },
    "correct_answer": "d",
    "explanation": "The given scenario points to a diagnosis of cat-scratch disease caused by B. henselae. Stellate \ngranulomas are characteristically present in this condition. They are granulomas containing \ncentral granular debris and neutrophils; giant cells are uncommon. The image below shows a stellate granuloma Other options: Option A: Foreign body granulomas are incited by relatively inert foreign bodies, such as \ntalc, sutures. Epithelioid cells and giant cells are apposed to the surface of the foreign body. \nThe foreign material can usually be identified in the center of the granuloma. The given image shows suture granuloma. The suture material is surrounded by lymphocytic \ninfiltration 279 \nSold by @itachibot Option B: Naked granulomas are seen in sarcoidosis. They are non-caseating granulomas \nminimally surrounded by lymphocytes. The image below shows a naked granuloma Option C: Durck granulomas are seen in cerebral malaria. The image below shows a Durck \ngranuloma 280 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 18,
    "question": "Question 18: A patient who is a known case of AIDS presents to the OPD with fever, chills, weight loss and \nthe cutaneous lesions shown below. The microscopic examination of the lesions revealed \npredominant neutrophilic infiltration. What is the most likely diagnosis? 268 \nSold by @itachibot",
    "options": {
      "a": "Kaposi sarcoma",
      "b": "Verruga peruana",
      "c": "Bacillary angiomatosis",
      "d": "Eczema herpeticum"
    },
    "correct_answer": "c",
    "explanation": "This clinical vignette of a patient with HIV infections and the violaceous lesions with a \nneutrophilic infiltrate is suggestive of bacillary angiomatosis. Bacillary angiomatosis is seen in severely immunocompromised patients and is caused by B. \nhenselae or B. quintana. It is characterized by neovascular proliferative lesions involving the skin. \nIt consists of lobular proliferation of small blood vessels lined by enlarged endothelial cells \ninterspersed with mixed infiltrates of neutrophils and lymphocytes, with a predominance of \nthe former. Both bacillary angiomatosis and Kaposi's sarcoma can have the clinical presentation mentioned in \nthe question. However, the major differentiating factor is the microscopic examination: • Bacillary angiomatosis predominantly has mixed infiltrate accompanied by neutrophils with \nclumps of bacilli. • Kaposi's sarcoma predominantly has plasma cells and lymphocytic infiltrates.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q18_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 19,
    "question": "Question 19: A patient has presented with lesions on the dorsum of the hand followed by axillary \nlymphadenopathy. What significant history will you ask for in this case?",
    "options": {
      "a": "History of exposure to rats",
      "b": "History of exposure to cats",
      "c": "History of similar complaint in family members",
      "d": "History of tick bite"
    },
    "correct_answer": "b",
    "explanation": "This scenario of lesions on the hand followed by axillary lymphadenopathy is suggestive of cat \nscratch disease, hence we should ask about the history of exposure to cats. It is caused by \nBartonella henselae. Bartonella henselae is an intracellular, pleomorphic, gram-negative bacillus. They can be \nidentified in lymph node biopsy with Warthin-Starry Silver stain. In addition to cat scratch \ndisease, in immunocompromised individuals, it can also cause bacillary angiomatosis and peliosis \nhepatis. 281 \nSold by @itachibot In immunocompetent hosts, cat scratch disease is a self limiting illness. However in patients with \nsevere disease, azithromycin can be used to treat the infection.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 20,
    "question": "Question 20: Which of the following is incorrectly matched?",
    "options": {
      "a": "Bartonella henselae- Bacillary angiomatosis",
      "b": "Ehrlichia chaffeensis - Human monocytic ehrlichiosis",
      "c": "Ehrlichia phagocytophila - Human granulocytic ehrlichiosis",
      "d": "Bartonella bacilliformis - Parinaud's oculoglandular syndrome"
    },
    "correct_answer": "d",
    "explanation": "Parinaud's oculoglandular syndrome is an atypical form of cat scratch disease and is caused \nby Bartonella henselae . Bartonella henselae also causes bacillary angiomatosis in HIV-infected \nand other immunodeficient patients. . It presents as vascular nodules or tumours on the skin, \nmucosa, and other locations. Bartonella bacilliformis causes Oroya fever also known as Carrion's disease. Note: Ehrlichia phagocytophila has been renamed as Anaplasma phagocytophilum.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  },
  {
    "q_no": 21,
    "question": "Question 21: A patient with fever and hemolytic anemia developed characteristic Peruvian warts 1 month \nlater. What is the causative organism for this disease?",
    "options": {
      "a": "Neisseria meningitidis",
      "b": "Pseudomonas aeruginosa",
      "c": "Streptococcus pneumoniae",
      "d": "E.coli"
    },
    "correct_answer": "c",
    "explanation": "The above clinical scenario of fever, hemolytic anemia followed by verruga peruana lesions \n(Peruvian warts) is suggestive of Oroya fever. It is caused by Bartonella bacilliformis. The vector \nfor Oroya fever is sandfly. Oroya fever or Carrion’s disease is associated with verruga peruana which are cutaneous vascular \nlesions carrying the bacteria. It presents as fever with progressive anemia due to bacterial invasion of erythrocytes. A \nlate sequela in survivors of Oroya fever or in those with asymptomatic infection is verruga \nperuana, which is characterized by vascular nodular skin lesions carrying the bacteria that occur \nin successive crops. An image of verruga peruana is given below. Image shows verruga peruana lesions. 282 \nSold by @itachibot Bartonella quintana causes trench fever or 5 day fever. Bartonella henselae causes cat scratch disease. It also causes bacillary angiomatosis and bacillary \npeliosis in HIV infected people. 283 \nSold by @itachibot Gram Negative Cocci",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q21_q.jpg",
    "explanation_image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Miscellaneous_Bacteria_-_Yersinia__Brucella__Ba_Q21_exp.jpg",
    "chapter_heading": "Miscellaneous Bacteria - Yersinia  Brucella  Ba"
  }
]