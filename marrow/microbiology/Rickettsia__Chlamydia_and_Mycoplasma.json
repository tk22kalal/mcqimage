[
  {
    "q_no": 1,
    "question": "Question 1: Transovarial transmission is a feature of which of the following diseases?",
    "options": {
      "a": "Scrub typhus",
      "b": "Epidemic typhus",
      "c": "Endemic typhus",
      "d": "Trench fever"
    },
    "correct_answer": "a",
    "explanation": "Transovarial transmission is a feature of Orientia tsutsugamushi which causes scrub typhus. Transovarial transmission refers to passing on the disease-causing bacteria from parent arthropod \nto offspring arthropod. Orientia tsutsugamushi is maintained by transovarial transmission in \ntrombiculid mites. It is also seen in Rickettsia rickettsii, Rickettsia conorii, and Rickettsia akari. The image below shows a trombiculid mite. Trench fever (option D) is caused by Bartonella quintana.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 2,
    "question": "Question 2: A 36-year-old trekker presented with fever, headache, and rashes following a tick bite. He was \nlater diagnosed to have Rocky Mountain spotted fever. Which of the following statements is \nfalse about the microbe implicated?",
    "options": {
      "a": "Obligate intracellular organism",
      "b": "Beta-lactams are ineffective",
      "c": "Reproduce by binary fission",
      "d": "Cell wall is absent"
    },
    "correct_answer": "d",
    "explanation": "Rocky Mountain spotted fever is caused by Rickettsia rickettsii. A cell wall is present in rickettsial \norganisms. Rickettsiae are obligate intracellular, gram-negative pleomorphic coccobacilli. They are unable to \ngrow in cell-free media and are thus cultured in yolk sacs of embryonated eggs. They are \nnon-motile, non-capsulated organisms that contain both DNA and RNA. They reproduce by \nbinary fission and are transmitted by arthropods like ticks and lice (except Coxiella burnetii and \nBartonella henselae). The rickettsiae are localized in endothelial cells of small blood vessels (except Ehrlichia and \nAnaplasma) in humans. They cause endothelial cell enlargement and degeneration, predisposing 307 \nSold by @itachibot to thrombus formation. Tetracyclines, macrolides, and fluoroquinolones are effective against this \ngroup but, beta-lactams are ineffective.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 3,
    "question": "Question 3: Which of the following statements is true regarding endemic murine typhus?",
    "options": {
      "a": "Man to man transmission occurs",
      "b": "It is caused by R.prowazekii",
      "c": "Vector is Xenopsylla cheopis",
      "d": "Neill-Mooser reaction is negative"
    },
    "correct_answer": "c",
    "explanation": "The vector for endemic murine typhus is the rat flea, Xenopsylla cheopis. Endemic murine typhus is cuased by Rickettsia typhi (option B) while epidemic typhus is caused \nby Rickettsia prowazekii. The zoonotic reservoir for R. typhi is the rat. Humans are infected \nwhen flea feces contaminate pruritic bite lesions. Transmission can also occur via inhalation of \naerosols of dried feces of rickettsemic rat flea. No man-to-man transmission occurs. Patients \npresent with fever, chills, vomiting and a maculopapular rash that is more prominent on the \ntrunk. Diagnosis is by serology and treatment is with doxycycline. When male guinea pigs are inoculated intraperitoneally with blood from a case of endemic typhus, \nthey develop fever and a characteristic scrotal inflammation. The scrotum becomes enlarged and \nthe testes cannot be pushed into the abdomen. This is known as the Neil-Mooser reaction. It is \npositive with Rickettsia typhi (option D) and negative with Rickettsia prowazekii. The image below shows the rat flea, Xenopsylla cheopis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 4,
    "question": "Question 4: Multiple inmates at a prison are suspected to have epidemic typhus following an arthropod \ninfestation. Which of the following vectors is implicated in the spread of this disease? 299 \nSold by @itachibot",
    "options": {
      "a": "A",
      "b": "B",
      "c": "C",
      "d": "D"
    },
    "correct_answer": "b",
    "explanation": "Louse (image B), Pediculus humanus corporis, transmits epidemic typhus. Gaol fever/ Jail fever/ epidemic typhus is caused by Rickettsia prowazekii. 308 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q4_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 5,
    "question": "Question 5: A 45-year-old man from Kashmir presents with fever, chills and rash for 1 week. The rash \nappeared on the 5th day of the fever starting from the trunk and progressing to the limbs. \nEpidemic typhus is suspected. Which of the following statements is incorrect about the \ndisease?",
    "options": {
      "a": "Transmitted by a louse",
      "b": "Brill-Zinsser disease is a recrudescent form",
      "c": "Rash is present on palms and soles",
      "d": "Transovarian transmission does not occur"
    },
    "correct_answer": "c",
    "explanation": "Epidemic typhus rash spares the palms and soles. Epidemic typhus, caused by Rickettsia prowazekii, is transmitted by the louse Pediculus humanus \ncorporis. There is no transovarial transmission of R. prowazekii. The disease spreads through \ninfected louse feces deposited when the louse feeds on the human host. It is commonly seen in \npoor unhygienic or cold conditions. Epidemic typhus starts with fever and chills. A characteristic rash appears on the fourth or fifth \nday, starting on the trunk and spreading over the limbs but sparing the face, palms, and soles. In \nsome patients who recover from epidemic typhus, the rickettsiae may remain latent in the \nlymphoid tissues or organs for years. Such latent infection may, at times, be reactivated leading to \nrecrudescent typhus (Brill-Zinsser disease). Transovarial transmission refers to passing on the disease-causing bacteria from parent arthropod \nto offspring arthropod. It occurs with Orientia tsutsugamushi, Rickettsia rickettsii, R. conorii and \nR. akari. Note: Rash on palms and soles is typically described in Rocky Mountain spotted fever, secondary \nsyphilis and hand, foot, and mouth disease The image below shows the rash of epidemic typhus. 309 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 6,
    "question": "Question 6: What is the drug of choice for scrub typhus?",
    "options": {
      "a": "Doxycycline",
      "b": "Ciprofloxacin",
      "c": "Chloramphenicol",
      "d": "Azithromycin"
    },
    "correct_answer": "a",
    "explanation": "The drug of choice for scrub typhus is doxycycline. To treat scrub typhus, oral doxycycline 100 mg is given twice daily for 7–15 days. In the case of \npregnant women, oral azithromycin 500 mg for 3 days may be used as doxycycline is \ncontraindicated in pregnancy. Scrub typhus is a rickettsial infection caused by Orientia tsutsugamushi. The vector is a \ntrombiculid mite. Humans are infected when they are bitten by the mite larvae known as chiggers. \nThe incubation period is 1- 3 weeks. Patients develop a characteristic eschar at the site of the mite \nbite, along with regional lymphadenopathy and maculopapular rash. It can be associated with \nfever, headache, myalgia, meningoencephalitis, myocarditis, and pneumonia. Serologic assays are used for diagnosis. Weil-Felix reaction is a heterophile agglutination reaction \nused for diagnosis, wherein the sera are tested for agglutinins to the O antigens of Proteus strains \nOX19, OX2, and OXK. OXK alone is agglutinated in scrub typhus.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 7,
    "question": "Question 7: A 25-year-old man came with complaints of fever and a skin lesion as shown below. He gives \na history of hiking in scrub forests a week prior, where he suffered an insect bite. On \nexamination, there is regional lymphadenopathy and a maculopapular rash. Which of the \nfollowing arthropods is involved in the spread of this disease?",
    "options": {
      "a": "Gamasid mite",
      "b": "Trombiculid mite",
      "c": "Tick",
      "d": "Louse"
    },
    "correct_answer": "b",
    "explanation": "A history of contact with scrub vegetation with fever, regional lymphadenopathy, maculopapular \nrash, and eschar at the bite site is suggestive of scrub typhus. Scrub typhus is caused by Orientia tsutsugamushi and transmitted by trombiculid mite. \nDoxycycline 100mg BD for 7-14 days is the drug of choice for treatment of scrub typhus in adults. \nIn case of pregnant women and children, azithromycin or chloramphenicol may be preferred \nwhere doxycycline is relatively contraindicated. 310 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q7_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 8,
    "question": "Question 8: A wildlife photographer presents with a blackish lesion at the site of an insect bite from a few \ndays back. He also gives a history of fever. A positive Weil-Felix test with OX K agglutinins \nwas observed. What is the diagnosis?",
    "options": {
      "a": "Rocky mountain spotted fever",
      "b": "Epidemic typhus",
      "c": "Endemic typhus",
      "d": "Scrub typhus"
    },
    "correct_answer": "d",
    "explanation": "In the above clinical scenario, a history of insect bite followed by the development of a \ncharacteristic eschar at the site of the bite and a positive Weil-Felix test with OX K agglutinins \nsuggests a diagnosis of scrub typhus. Weil-Felix reaction is a heterophile agglutination reaction, wherein the sera are tested for \nagglutinins to the O antigens of certain Proteus strains OX 19, OX 2, and OX K. The basis of the \ntest is sharing an alkali stable carbohydrate antigen by some Rickettsiae and by some strains of \nProteus. DISEASE \nOX 1 \n9 OX 2 \nOX \nK Epidemic typhus \n+++ \n+ \n- Endemic typhus \n+++ \n+/- \n- Rocky Mountain spotted fev \ner ++ \n++ \n- Scrub typhus \n- \n- \n+++ Rickettsial pox \n- \n- \n- Trench fever \n- \n- \n- Q fever \n- \n- \n-",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 9,
    "question": "Question 9: A veterinarian presents with new-onset mitral regurgitation and fever. An echo reveals valve \nvegetations and blood cultures show no growth. Q fever is suspected. Which of the following \nstatements is false regarding the organism implicated?",
    "options": {
      "a": "Obligate intracellular",
      "b": "Gram-negative bacteria",
      "c": "Survives Holder's method of pasteurisation",
      "d": "Transmitted by mites"
    },
    "correct_answer": "d",
    "explanation": "Coxiella burnetii is the causative organism of Q fever. It is transmitted by ixodid ticks in \nanimals; however, it is not transmitted to humans via ticks. Coxiella burnetii is a filterable, obligate intracellular pathogen. They are gram-negative but are \nbetter stained with Gimenez, Giemsa stains. They are heat resistant and hence survive Holder's \nmethod of pasteurization. Q fever is a zoonosis and the primary source of human infection are infected cattle, sheep, and \ngoats. It spreads through the inhalational route. Veterinarians are at higher risk due to increased \nexposure. Acute disease resembles influenza, nonbacterial (atypical) pneumonia, and hepatitis. \nChronic disease presents as culture-negative bacterial endocarditis in patients with valvular heart \ndisease.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 10,
    "question": "Question 10: A patient presents with redness of the eye and foreign body sensation. On examination, there \nis follicular hypertrophy in the lower lids and moderately abundant exudates. Chlamydial \ninfection is suspected. Which strains could have caused this condition?",
    "options": {
      "a": "Serotypes D to K",
      "b": "Serotypes A, B, Ba and C",
      "c": "Serotype L1, L2, L3",
      "d": "Serotype H- K"
    },
    "correct_answer": "a",
    "explanation": "Redness, foreign body sensation with follicular hypertrophy in the lower lids and moderately \nabundant exudates suggests inclusion conjunctivitis which is caused by Chlamydia trachomatis \nserotypes D to K. 311 \nSold by @itachibot Inclusion conjunctivitis is a type of acute follicular conjunctivitis caused by C. trachomatis \nserotypes D to K. The infection is transmitted to the eye from genitals, or contaminated swimming \npools. Patients present with foreign body sensation, redness and mucopurulent discharge. On \nexamination, there is acute follicular hypertrophy of the lower palpebral conjunctiva and fornix, \nnon-tender pre-auricularlymphadenopathy and superficial keratitis in upper half of cornea. C. trachomatis is a Gram-negative, obligate intracellular bacteria. It cannot produce ATP. It \ncauses a variety of human diseases (ocular and genitourinary) and has two main biological \nvariants: • TRIC biovar which causes trachoma inclusion conjunctivitis (TRIC biovar). This is further \ndivided into 12 serological variants: • A, B, Ba, C serovars which cause blinding or endemic trachoma • D to K servovars which cause inclusion conjunctivitis • LGV biovar (L1, L2, L3 serotypes) which causes lymphogranuloma venereum",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 11,
    "question": "Question 11: A thick, yellowish discharge is noted from the eyes of a five-day-old neonate in the step-down \nward during rounds. An iodine-stained smear of the exudates is positive for large cytoplasmic \ninclusions as shown in the image. Which of the following is false about the organism \nresponsible for the above condition? 302 \nSold by @itachibot",
    "options": {
      "a": "Filterable organisms",
      "b": "Obligate intracellular",
      "c": "Possess only DNA",
      "d": "Cannot grow on artificial media"
    },
    "correct_answer": "c",
    "explanation": "The given clinical scenario of a thick yellowish discharge from the eye showing iodine-stained \ninclusion bodies is suggestive of inclusion conjunctivitis caused by Chlamydia trachomatis. As \nchlamydia is a bacteria, it possesses both DNA and RNA. Chlamydiae are obligate intracellular organisms that produce basophilic inclusion bodies. They \nare filterable like viruses. They are called energy parasites as they lack enzymes for ATP synthesis. \nThey cannot grow on artificial media but can grow on cell lines like McCoy, HeLa, or the yolk sac \nof the chick embryo. Chlamydiae occur in two forms, the elementary body and the reticulate body. The extracellular, \ninfective form is called the elementary body. The intracellular, non-infective, growing, \nand replicative form is called the reticulate body. These are found inside a membrane-bound \ncompartment called the inclusion body which can be visualized within infected epithelial cells by \niodine or Giemsa stain. The cell wall of the reticulate body is fragile and pliable, leading \nto pleomorphism. 312 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q11_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 12,
    "question": "Question 12: A poultry worker was admitted to ICU with severe pneumonia. Bronchoalveolar lavage was \ndone; it showed Levinthal Cole Lillie bodies. Which of the following is the causative organism \nfor the above condition?",
    "options": {
      "a": "Legionella pneumophila",
      "b": "Chlamydia psittaci",
      "c": "Mycoplasma pneumoniae",
      "d": "Moraxella catarrhalis"
    },
    "correct_answer": "b",
    "explanation": "Pneumonia in a poultry worker with Levinthal-Cole-Lillie bodies on bronchoalveolar lavage \nspecimens is suggestive of psittacosis. Levinthal-Cole-Lillie bodies are inclusion bodies of Chlamydia psittaci seen in infected cells \nincluding alveolar macrophages from patients suffering from psittacosis. C. psittaci can be \ntransmitted to humans by direct contact with infected birds or by inhalation of aerosols from \navian feather dust. Psittacosis presents with fever, chills, muscular aches and pains, severe \nheadache, hepatosplenomegaly and gastrointestinal symptoms. Severe pneumonia may develop. It \nis treated with tetracycline.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 13,
    "question": "Question 13: A patient presented with painful swellings on both sides of the groin as shown in the image. \nThe clinician suspects lymphogranuloma venereum. Which is the most common serovar \ncausing the above condition? 303 \nSold by @itachibot",
    "options": {
      "a": "L1",
      "b": "L2",
      "c": "L3",
      "d": "L4"
    },
    "correct_answer": "b",
    "explanation": "Lymphogranuloma venereum (LGV) is caused most commonly by Chlamydia trachomatis LGV \nserovar L2. LGV is a sexually transmitted disease, characterized by suppurative inguinal adenitis.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q13_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 14,
    "question": "Question 14: What is the incubation period of lymphogranuloma venereum?",
    "options": {
      "a": "1-5 days",
      "b": "7-10 days",
      "c": "10-30 days",
      "d": "30-60 days"
    },
    "correct_answer": "c",
    "explanation": "The incubation period of Lymphogranuloma venereum ranges from 10-30 days. Chlamydia trachomatis serovars L1, L2, and L3 cause lymphogranuloma venereum (LGV). The \nmost common presentation is the inguinal syndrome, which is characterized by painful inguinal \nlymphadenopathy. 313 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 15,
    "question": "Question 15: Lesion scrapings from a genital ulcer show numerous polymorphs, but no bacteria. Which of \nthe following is the most appropriate culture medium for organisms responsible for the above \ncondition?",
    "options": {
      "a": "McCoy cells",
      "b": "Thayer-Martin agar",
      "c": "Robertson’s cooked meat",
      "d": "PPLO broth"
    },
    "correct_answer": "a",
    "explanation": "Clinical scrapings from a genital ulcer showing polymorphs in the absence of bacteria is suggestive \nof chlamydial infection and the most appropriate culture medium is McCoy cells (human synovial \ncarcinoma cell line). C. trachomatis is a small gram-negative bacterium and an obligate intracellular parasite that \nappears as an intracytoplasmic inclusion body. The gram stain of the cervical smear would show \nleucocytes but no organisms. Hence, selective culture media like the McCoy cells culture is used to \nisolate the organism. Option B: Thayer–Martin agar is used for isolation of Neisseria spp. Option C: Robertson’s cooked meat is used for the culture of anaerobes, especially Clostridia Option D: Pleuropneumonia-like organisms (PPLO) broth is used to culture Mycoplasma spp. and \nUreaplasma spp. Note: Abnormal urethral gram stain showing &gt;10 PMNs/1000Å~ field in women with dysuria \nbut without coliform bacteriuria supports the diagnosis of chlamydial urethritis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 16,
    "question": "Question 16: A 28-year-old woman presented with a 3-day history of mucopurulent cervical discharge. \nGram staining of the discharge revealed numerous pus cells, but no organisms. What is the \ninvestigation of choice for the diagnosis of this infection?",
    "options": {
      "a": "Saline mount",
      "b": "Serum antibody testing by immunofluorescence",
      "c": "Culture in Thayer Martin media",
      "d": "Nucleic acid amplification test"
    },
    "correct_answer": "d",
    "explanation": "Mucopurulent cervical discharge for 3 days is suggestive of acute cervicitis. As gram stain does not \nshow any organism, gonococcal infection is less likely. In this case, Chlamydia trachomatis is the \nmost likely organism. For C. trachomatis, the investigation of choice is the nucleic acid \namplification test (NAAT). NAATs are the most sensitive tests to detect chlamydia. These tests also have a high specificity \ncomparable to culture, and in contrast to culture, do not depend on viable pathogens. Therefore, \nNAATs are generally considered the test of choice for chlamydia and have replaced culture as the \ndiagnostic gold standard. Mucopurulent cervicitis is the inflammation of the columnar epithelium and subepithelium of the \nendocervix in women. Its commonly caused by Neiserria gonorrhoeae and Chlamydia \ntrachomatis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 17,
    "question": "Question 17: Which of the following microbes is also referred to as Eaton's agent ?",
    "options": {
      "a": "Klebsiella pneumoniae",
      "b": "Corynebacterium diphtheria",
      "c": "Chlamydia trachomatis",
      "d": "Mycoplasma pneumoniae"
    },
    "correct_answer": "d",
    "explanation": "Eaton's agent refers to Mycoplasma pneumoniae. Eaton was the first to isolate Mycoplasma pneumoniae. Because it was filterable, it was \nconsidered to be a virus previously. It was formerly known as PPLO– Pleuro pneumonia-like organism.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 18,
    "question": "Question 18: A 20-year-old military recruit presented with fever, sore throat, and non-productive cough \nwhich showed no improvement with beta-lactam antibiotics. X-ray showed peribronchial \npneumonia with thickened bronchial markings. Primary atypical pneumonia is suspected. \nWhich of the following statements is false regarding the organism responsible for this \ncondition?",
    "options": {
      "a": "Obligate intracellular",
      "b": "Cell wall is absent",
      "c": "Highly pleomorphic",
      "d": "Multiply by binary fission"
    },
    "correct_answer": "a",
    "explanation": "314 \nSold by @itachibot The above clinical scenario of fever, non-productive cough, no improvement with beta-lactam \nantibiotics along with X-ray features showing peribronchial pneumonia with thickened bronchial \nmarkings is suggestive of Mycoplasma pneumonia, also known as primary atypical pneumonia or \nwalking pneumonia. Mycoplasmas are not obligate intracellular parasites. They are free-living bacteria devoid of cell \nwalls. They are highly pleomorphic, with no fixed shape or size. Because of their plasticity, they can pass through bacterial filters and have often been \nmistaken for viruses. Mycoplasmas do not possess spores, flagella, or fimbria. Some species exhibit gliding \nmotility. Mycoplasmas are gram-negative, but are better stained by Giemsa stain.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 19,
    "question": "Question 19: Diene’s method of staining is used for which of the following organisms? 305 \nSold by @itachibot",
    "options": {
      "a": "Mycoplasma",
      "b": "Chlamydiae",
      "c": "Anthrax",
      "d": "Diphtheria"
    },
    "correct_answer": "a",
    "explanation": "Diene's method is used for mycoplasma. Mycoplasma shows a ‘fried-egg’ colony on Diene’s method of staining. The central dark bluish \narea represents the area of mycoplasmal down growth whereas the pale blue periphery indicates \nsuperficial growth of mycoplasma on the agar.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  },
  {
    "q_no": 20,
    "question": "Question 20: Mycoplasma is inherently resistant to which of the following antibiotics?",
    "options": {
      "a": "Leptospira interrogans",
      "b": "Treponema pallidum",
      "c": "Borrelia burgdorferi",
      "d": "Helicobacter pylori"
    },
    "correct_answer": "a",
    "explanation": "Mycoplasma is inherently resistant to beta-lactam antibiotics. Mycoplasma lack cell wall, and therefore, are inherently resistant to beta-lactam antibiotics as \nthese drugs act on the cell wall. 315 \nSold by @itachibot Spirochetes",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q20_q.jpg",
    "explanation_image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Rickettsia__Chlamydia_and_Mycoplasma_Q20_exp.jpg",
    "chapter_heading": "Rickettsia  Chlamydia and Mycoplasma"
  }
]