[
  {
    "q_no": 1,
    "question": "Question 1: What route of administration of the shocking dose of an antigen is most effective in causing \nan anaphylactic reaction?",
    "options": {
      "a": "Intradermal",
      "b": "Intravenous",
      "c": "Subcutaneous",
      "d": "Oral"
    },
    "correct_answer": "b",
    "explanation": "The intravenous route of administration is the most effective route of administration for shocking \ndose in causing anaphylaxis. Anaphylaxis is a type I hypersensitivity syndrome. There are 2 clinical syndromes which are \ncharacterised as: • Anaphylaxis - acute, potentially fatal systemic form • Atopy - chronic, recurrent, non-fatal, localized form Priming dose: For induction of hypersensitivity reactions, the host should have contact with the \nantigen, leading to priming of the appropriate B or T lymphocytes. Shocking dose: Subsequent contact with allergen causing manifestations of hypersensitivity. 75 \nSold by @itachibot Effectiveness: intravenous &gt; intraperitoneally~subcutaneously &gt; intradermally (least)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 2,
    "question": "Question 2: Which type of reaction is the Schultz-Dale phenomenon?",
    "options": {
      "a": "Type II hypersensitivity reaction",
      "b": "Type I hypersensitivity reaction",
      "c": "Type III hypersensitivity reaction",
      "d": "Type IV hypersensitivity reaction"
    },
    "correct_answer": "b",
    "explanation": "The Schultz–Dale phenomenon is a type I hypersensitivity reaction. It describes in-vitro contraction of smooth muscles that have been exposed to antigens, \ndemonstrating immediate hypersensitivity reaction in some human and animal tissues. Other type I hypersensitivity reactions are the Prausnitz-Kustner reaction and the Theobald Smith \nphenomenon.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 3,
    "question": "Question 3: The presence of which of the following antibodies is demonstrated by the Prausnitz-Kustner \nreaction?",
    "options": {
      "a": "IgM",
      "b": "IgG",
      "c": "IgE",
      "d": "IgA"
    },
    "correct_answer": "c",
    "explanation": "The presence and activity of IgE antibodies are demonstrated by the Prausnitz–Küstner (P–K) \nreaction. In this method, the serum is injected from an allergic person into the skin of a nonallergic \nindividual. Then a suspected antigen is later injected into the same site. A positive P-K reaction is \na wheal and flare reaction seen in the non-allergic individual. This indicates that the suspected \nantigen is causing hypersensitivity. Because of the danger of transmitting viral hepatitis and \nAIDS, this test is no longer used.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 4,
    "question": "Question 4: A child, upon ingestion of shellfish, developed a tingling sensation in the mouth, swelling of \nthe face, lips, and tongue, and also complained of abdominal pain and dizziness. What type of \nreaction is this? 70 \nSold by @itachibot",
    "options": {
      "a": "IgE mediated reaction",
      "b": "T cell mediated cytotoxic reaction",
      "c": "IgG mediated reaction",
      "d": "IgA mediated hypersensitivity reaction"
    },
    "correct_answer": "a",
    "explanation": "This child who developed tingling in the mouth, and swelling of the lips and face after eating shelf \nlife is an example of an IgE mediated type of hypersensitivity reaction. 76 \nSold by @itachibot Anaphylaxis is a severe, potentially life-threatening allergic reaction that occurs rapidly and \naffects the whole body. It is characterized by a sudden release of histamines and other chemicals \nfrom the immune system in response to an allergen, such as certain foods, medications, insect \nstings, or latex. The onset of symptoms can occur within minutes to a few hours after exposure to \nthe allergen.The primary mediators are histamine and serotonin. The secondary mediators are \nprostaglandins and leukotrienes. Clinically, anaphylaxis can present with a combination of symptoms that typically include: • Respiratory Symptoms: Patients often experience wheezing and respiratory distress due to \nbronchoconstriction. Other signs may include shortness of breath, coughing, and a feeling of \ntightness in the chest. • Skin Symptoms: Urticaria (hives) and angioedema (swelling of the skin and mucous membranes) \nare common. These skin reactions usually develop rapidly, often within minutes to two hours of \nexposure to the allergen. • Cardiovascular Symptoms: Hypotension (low blood pressure) is a key indicator of anaphylaxis. \nPatients may also experience tachycardia (increased heart rate) and, in severe cases, shock. • Gastrointestinal Symptoms: Abdominal pain, vomiting, diarrhea, and cramps can occur, \nparticularly if the anaphylaxis is triggered by food allergens. • Neurological Symptoms: Dizziness, lightheadedness, or loss of consciousness can occur due to \nthe sudden drop in blood pressure and reduced oxygen supply to the brain.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 5,
    "question": "Question 5: Two days after penicillin administration, a patient developed antibodies that resulted in \nhemolysis. Which type of hypersensitivity reaction is this?",
    "options": {
      "a": "Type I",
      "b": "Type II",
      "c": "Type III",
      "d": "Type IV"
    },
    "correct_answer": "b",
    "explanation": "Development of antibodies resulting in hemolysis after penicillin administration is an example of \na type II reaction. This is a drug-induced type II hypersensitivity reaction. Penicillin in high doses can result in immune-mediated hemolysis via the hapten mechanism. In \nthis, the drug attaches to surface of RBC membrane. Antibodies are produced that are targeted \nagainst this combination of penicillin and RBCs. 77 \nSold by @itachibot Complement is activated by the attached antibody leading to the removal of red blood cells by the \nspleen.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 6,
    "question": "Question 6: A skin transplant was done from a sister to her brother. After a few years, a brother-to-sister \nskin transplant was done, but rejection occurred. What is this phenomenon known as?",
    "options": {
      "a": "Schwartzman reaction",
      "b": "Theobald Smith phenomena",
      "c": "Eichwald Silmser effect",
      "d": "Schultz Dale phenomena"
    },
    "correct_answer": "c",
    "explanation": "The above scenario describes an Eichwald-Silmser effect, which is a unilateral sex-linked \nhisto-incompatibility. While transplants between same-sex siblings are successful, grafts from female to male are also \nsuccessful, but an exception is seen when the donor is a male and the recipient is a female. Such \ngrafts are rejected as the grafted male tissue (XY) will have antigens determined by the Y \nchromosome which will be absent in the female (XX) recipient.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 7,
    "question": "Question 7: A 9-year-old girl is brought with complaints of sensitivity to light and profuse lacrimation. On \ninspection, the given finding is seen on her upper tarsal conjunctiva. What type of \nhypersensitivity reaction is this? 71 \nSold by @itachibot",
    "options": {
      "a": "Type I",
      "b": "Type II",
      "c": "Type II and III",
      "d": "Type IV"
    },
    "correct_answer": "a",
    "explanation": "Spring catarrh or vernal keratoconjunctivitis is a type I hypersensitivity reaction. It is a bilateral, seasonally recurrent, chronic conjunctivitis due to type I hypersensitivity allergic \nreaction to an external antigen. The antigen reacts with IgE, this stimulates mast cell \ndegranulation leading to the release of histamine and other mediators of the allergic response. Spring catarrh is one of the several forms of allergic conjunctivitis.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Hypersensitivity_Q7_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 8,
    "question": "Question 8: Which type of hypersensitivity reaction is involved in the hyperacute rejection of renal \ntransplants?",
    "options": {
      "a": "Type IV",
      "b": "Type III",
      "c": "Type II",
      "d": "Type I"
    },
    "correct_answer": "c",
    "explanation": "Hyperacute graft rejection is an example of type II hypersensitivity reaction. It is mediated by preformed antibodies. It is a rare event that occurs in kidney transplantation. 78 \nSold by @itachibot Graft rejectio \nn Time taken for rejection \nImmune mechanisms involve \nd Type of hypersensitivity Hyperacute \nMinutes to hours \nPreformed antibodies \nII Acute \nWeeks to months \nCytotoxic T-cell mediated \nIV Chronic \nMonths to years \nChronic DTH mediated and \nAb mediated IV",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 9,
    "question": "Question 9: Which of the following statements is not true about anaphylaxis?",
    "options": {
      "a": "It is a type I hypersensitivity reaction",
      "b": "Large amount of histamine released",
      "c": "Primary mediators like IL 4, IL 5 and GM-CSF are released",
      "d": "Mediated through allergen specific IgE"
    },
    "correct_answer": "c",
    "explanation": "IL4, IL5, GM-CSF are secondary mediators and not primary mediators. Anaphylaxis is a type I reaction and is mediated through IgE. Primary mediators are preformed contents of mast cells and basophil granules such as histamine, \nserotonin. They cause vasodilation and bronchoconstriction. Secondary mediators are newly \nformed upon stimulation by mast cells, basophils, and other leucocytes (such as leukotrienes IL3, \nIL4, IL5, IL6; GM-CSF, and prostaglandins) which lead to inflammatory cell infiltrates.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 10,
    "question": "Question 10: While studying the patient data on hypersensitivity reactions over the last 2 months, you are \ntasked with classifying the cases by type. Who among the following patients falls under type \nII hypersensitivity?",
    "options": {
      "a": "A patient with berylliosis",
      "b": "Eczematous reaction on the hand of an HCW wearing powdered gloves",
      "c": "A patient with heat intolerance, sinus tachycardia, and proptosis",
      "d": "Glomerulonephritis in a patient with systemic lupus erythematosus"
    },
    "correct_answer": "c",
    "explanation": "Heat intolerance, sinus tachycardia, and proptosis of the eye suggest a diagnosis of Grave's \ndisease. It is a type II hypersensitivity reaction that results in the binding of \nanti-thyroid-stimulating hormone (anti-TSH) antibodies to TSH receptors and stimulates the \nthyroid cells to produce thyroid hormones. Type II hypersensitivity reactions involve combining the of IgG antibodies with the antigenic \ndeterminants on the surface of cells leading to cytotoxic effects. 79 \nSold by @itachibot Other options: Option A: Berylliosis is a type IV hypersensitivity reaction. Option B: Eczematous reaction on the hand of an HCW wearing powdered gloves (contact \ndermatitis) is a type IV hypersensitivity reaction. Option D: Glomerulonephritis in a patient with SLE (systemic lupus erythematosus) is a type III \nhypersensitivity reaction.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 11,
    "question": "Question 11: A 22-year-old hiker presents with an itchy rash on her wrist. She gives a history of getting \nbrushed with poison ivy on a trek the previous day. What cells are involved in this reaction?",
    "options": {
      "a": "T cells",
      "b": "B cells",
      "c": "Macrophages",
      "d": "Langerhans cells"
    },
    "correct_answer": "a",
    "explanation": "The history and image suggest a diagnosis of contact dermatitis, a type IV hypersensitivity \nreaction mediated by T cells. These are delayed hypersensitivity reactions and are induced by \nsensitized T cells, which on contact with the specific antigen releases cytokines that produce \nbiological effects on leucocytes, macrophages, and tissue cells. Two types of delayed hypersensitivity are: • Tuberculin type • Contact dermatitis type",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Hypersensitivity_Q11_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 12,
    "question": "Question 12: A 45-year-old hypertensive man complains of fever, migraine, loss of appetite, and myalgia. \nOn examination, splinter hemorrhages and palpable purpura are noted. On CT angiography, 73 \nSold by @itachibot aneurysm and stenosis of medium-sized vessels are observed. What is the type of \nhypersensitivity reaction associated with this disease?",
    "options": {
      "a": "Type I hypersensitivity",
      "b": "Type II hypersensitivity",
      "c": "Type III hypersensitivity",
      "d": "Type IV hypersensitivity"
    },
    "correct_answer": "c",
    "explanation": "The most likely diagnosis is polyarteritis nodosa. It is an example of a type III hypersensitivity \nreaction. In type III hypersensitivity, immune complexes may deposit in tissues or blood vessels, and elicit \nan acute inflammatory reaction by activating the complement system. The inflammatory reaction \ncauses tissue injury. 80 \nSold by @itachibot The pathogenesis of systemic immune complex disease can be divided into three phases: • Formation of immune complexes • Deposition of immune complexes • Inflammation and tissue injury. Examples of type III hypersensitivity reactions: • Post-streptococcal glomerulonephritis • SLE • Polyarteritis nodosa • Reactive arthritis • Serum sickness • Arthus reaction • Farmer’s lung • Hypersensitivity pneumonitis • Type II lepra reaction • Henoch Schonlein purpura",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 13,
    "question": "Question 13: Which type of hypersensitivity reaction is implicated in the autoimmune disease shown \nbelow?",
    "options": {
      "a": "Type I",
      "b": "Type II",
      "c": "Type III",
      "d": "Type IV"
    },
    "correct_answer": "b",
    "explanation": "The disease shown in the image is myasthenia gravis. It is an example of type II hypersensitivity. Type II hypersensitivity reactions are mediated by antibodies directed towards self-antigens- cell \nsurface or extracellular matrix. 81 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Hypersensitivity_Q13_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  },
  {
    "q_no": 14,
    "question": "Question 14: A 24-year-old patient comes with recurrent episodes of sneezing, rhinorrhea, and watering of \nthe eyes. She says she has these symptoms throughout the year. Which of the following \nimmunoglobulins will be elevated in her case?",
    "options": {
      "a": "Tuftsin deficiency",
      "b": "Wiskott-Aldrich syndrome",
      "c": "Chronic granulomatous disease",
      "d": "Chediak-Higashi syndrome"
    },
    "correct_answer": "c",
    "explanation": "The clinical vignette describes a case of chronic allergic rhinits. IgE is elevated in these cases. Perennial allergic rhinitis, a type of chronic rhinitis is a year-round problem and is often caused \nby indoor allergens such as dust and animal dander in addition to pollens that may exist at the \ntime. Symptoms tend to occur regardless of the time of the year. 82 \nSold by @itachibot Immune Disorders",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Hypersensitivity_Q14_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Hypersensitivity"
  }
]