[
  {
    "q_no": 1,
    "question": "Question 1: Which of the following organisms is capsulated?",
    "options": {
      "a": "Clostridium tetani",
      "b": "Clostridium difficile",
      "c": "Clostridium perfringens",
      "d": "Clostridium botulinum"
    },
    "correct_answer": "c",
    "explanation": "Clostridium perfringens is the capsulated organism among the given options. Most of the clostridial species are non-capsulated except C.perfringens and C.butyricum. All clostridia are motile, with a peritrichate flagella, with the exception of: • C. perfringens • C. tetani type VI.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 2,
    "question": "Question 2: A young man presented with complaints of severe abdominal pain and watery diarrhoea eight \nhours after consuming meat at a restaurant. A stool sample was sent for culture and the \nisolated organism showed this appearance on litmus milk fermentation. Which of the \nfollowing is the most likely causative organism?",
    "options": {
      "a": "Bacillus anthracis",
      "b": "Clostridium tetani",
      "c": "Clostridium perfringens",
      "d": "Clostridium botulinum"
    },
    "correct_answer": "c",
    "explanation": "154 \nSold by @itachibot The given clinical history and the image showing stormy fermentation of lactose in litmus milk is \nsuggestive of gastroenteritis caused by Clostridium perfingens type A. The fermentation of lactose by this organism leads to the formation of acid which coagulates the \ncasein in litmus milk. The clotted milk is disrupted due to vigorous gas production and this \ncharacteristic finding is obtained that is called stormy fermentation.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Clostridium_and_Bacillus_Q2_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 3,
    "question": "Question 3: Which of the following reactions are positive for Clostridium perfringens?",
    "options": {
      "a": "M'fadyean reaction, CAMP test",
      "b": "M'fadyean reaction, Reverse CAMP test,",
      "c": "Target hemolysis, Reverse CAMP test",
      "d": "Stormy fermentation, Elek's test"
    },
    "correct_answer": "c",
    "explanation": "Target hemolysis and reverse CAMP test are positive for Clostridium perfringens. A narrow zone of complete hemolysis due to -toxin and a wider zone of incomplete hemolysis \ndue to  -toxin results in development of target hemolysis on blood agar by C. perfringens. In the reverse CAMP test, C.perfringens is streaked over the centre of the plate and Streptococcus \nagalactiae is streaked at right angles to it. A positive reverse CAMP test shows the presence of an \narrow-shaped zone of enhanced hemolysis pointing towards C.perfringens.  -toxin produced by \nC.perfringens interacts with the CAMP factor and produce synergistic hemolysis. M'fadyean reaction is positive Bacillus anthracis. The CAMP test is positive for Streptococcus agalactiae where it is inoculated on a plate streaked \nwith Staphylococcus aureus. Elek's test is positive for Corynebacterium diptheriae.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 4,
    "question": "Question 4: A middle-aged diabetic man presented to the ER with severe abdominal pain, diarrhea and \nvomiting following consumption of pork and sweet potato curry. Following admission, the \npatient developed intra-abdominal sepsis and was taken into emergency surgery. \nHistopathology of the resected intestine showed mucosal necrosis. Which of the following \ntoxins is likely implicated in his condition?",
    "options": {
      "a": " -toxin",
      "b": "-toxin",
      "c": "-toxin",
      "d": "-toxin"
    },
    "correct_answer": "b",
    "explanation": "The condition described here is necrotising enteritis(pigbel) that is caused by -toxin \nof Clostridium perfringens type-C. This is a severe and often fatal enteritis caused by C.perfringens type C strains with heat-resistant \nspores that germinate in the intestine producing beta toxin, causing mucosal necrosis. The \nevocative name 'pigbel' is New Guinea pidgin for abdominal pain and diarrhea following \nunaccustomed feasting on pig meat along with trypsin inhibitors like sweet potatoes. Immunisation with the type C toxoid has been shown to protect against this condition.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 5,
    "question": "Question 5: Which of the toxins produced by clostridium species is the basis of Nagler's reaction?",
    "options": {
      "a": " -toxin",
      "b": "-toxin",
      "c": "-toxin",
      "d": "-toxin"
    },
    "correct_answer": "a",
    "explanation": " -toxin produced by Clostridium perfringens forms the basis of Nagler's reaction. The  -toxin of C.perfringens has lecithinase activity. When C.perfringens is grown on a \nmedia containing egg yolk with the  -antitoxin spread on one half of the plate, colonies on the \nother half without the antitoxin will be surrounded by a zone of opacity. There will be no opacity \naround the colonies on the half of the plate with the antitoxin due to the specific neutralization of \n -toxin. This is known as Nagler's reaction. 155 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 6,
    "question": "Question 6: A patient presents with a laceration over his leg following trauma with an unclean sharp \nmetal rod 3 days ago. He also complains of difficulty in opening his mouth and abdominal \ncramps. Microscopy of the wound discharge revealed rod-shaped bacilli with terminal \nspherical spores. Which of the following is the organism most likely implicated here?",
    "options": {
      "a": "Clostridium perfringens",
      "b": "Clostridium botulinum",
      "c": "Clostridium tertium",
      "d": "Clostridium tetani"
    },
    "correct_answer": "d",
    "explanation": "The above clinical vignette is strongly suggestive of tetanus caused by Clostridium tetani. It is a \ngram-positive, slender bacillus that has a spherical and terminal spore, giving it a characteristic \ndrumstick appearance. The genus clostridium consists of gram-positive, anaerobic, spore-forming bacilli. Classification of Clostridium based on shape and position of spores: • Central or equatorial: Clostridium bifermentans • Subterminal: Clostridium perfringens, Clostridium novyi, and Clostridium botulinum • Oval and terminal (tennis racket shaped ): Clostridium tertium and Clostridium difficile • Spherical and terminal (drumstick appearance): Clostridium tetani The below image shows the characteristic drumstick appearance of C. tetani. 156 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 7,
    "question": "Question 7: Which of the following is the first sign of generalized tetanus?",
    "options": {
      "a": "Fever",
      "b": "Increased respiratory and GI secretions",
      "c": "Trismus",
      "d": "Autonomic disturbance"
    },
    "correct_answer": "c",
    "explanation": "The first sign of generalized tetanus is increased tone of the masseter muscle, which results \nin trismus or lock-jaw. Tetanus: • Route of entry of organism- injury, unhygienic surgery, abortion/delivery, otitis media • The incubation period is 6-10 days. • First clinical sign- increased masseter tone (trismus/lock-jaw) followed by descending tetanus • Deep tendon reflex is exaggerated. • In neonates, difficulty in feeding is the usual presentation. • Diagnosis is always clinical, microscopy is unreliable. • Treatment includes cleaning the entry wound first in order to remove anaerobic foci of infection \nand prevent further toxin production. Metronidazole is preferred for antibiotic therapy. Antitoxin \nshould be given early in an attempt to deactivate any circulating tetanus toxin. Spasms are \ncontrolled by heavy sedation with benzodiazepines. Symptomatic treatment is given for \nrespiratory and cardiovascular derangements.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 8,
    "question": "Question 8: Strychnine toxin acts by blocking the action of glycine at the post-synaptic receptors in the \nmotor neurons of the anterior horn of the spinal cord. Which of the following has a similar \nmechanism of action but acts presynaptically?",
    "options": {
      "a": " -toxin of C. perfringens",
      "b": "Botulinum toxin",
      "c": "Tetanus toxin",
      "d": "Toxin A of C. difficile"
    },
    "correct_answer": "c",
    "explanation": "Tetanus toxin has similar mechanisms of action as strychnine but acts pre-synaptically. Strychnine prevents the uptake of glycine at inhibitory synapses post-synaptically, while \ntetanospasmin blocks release of inhibitory neurotransmitters like glycine and \ngamma-aminobutyric acid (GABA) pre-synaptically. This leads to increased release of \nacetylcholine, thereby leading to the development of spastic paralysis. 157 \nSold by @itachibot The image below depicts the mechanism of action of tetanus toxin.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 9,
    "question": "Question 9: An 18-year-old girl presents with a contaminated wound sustained 4 hours ago. She had \nreceived complete immunization against tetanus 7 years ago. Which of the following \ninjections should be given to her?",
    "options": {
      "a": "Full course tetanus toxoid",
      "b": "Single dose tetanus toxoid",
      "c": "Human tetanus immunoglobulin",
      "d": "Human tetanus immunoglobulin and single dose of toxoid"
    },
    "correct_answer": "b",
    "explanation": "As she has received complete immunization against tetanus 7 years back, she should be given a \nsingle dose of tetanus toxoid for her contaminated wound.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 10,
    "question": "Question 10: 149 \nSold by @itachibot An elderly diabetic man presented to the ER with a contaminated wound with necrotic \nmaterial. As a first-year surgical resident, which of the following would be your first step in \ntreating the conditon?",
    "options": {
      "a": "Anti-gas gangrene serum",
      "b": "Debridement",
      "c": "Antibiotics",
      "d": "Tetanus toxoid"
    },
    "correct_answer": "b",
    "explanation": "Initial treatment for contaminated wounds with necrotic material is debridement. A contaminated wound with necrotic material is suggestive of a higher risk of clostridial \ninfection that may lead to gas gangrene. Emergent surgical exploration and \nthorough debridement are extremely important in the management of gas gangrene. Antibiotics \n(penicillin G plus clindamycin) and anti-gas gangrene serum have to be initiated after \ndebridement. Hyperbaric oxygen therapy may also be considered.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 11,
    "question": "Question 11: An 18-year-old man presented with sudden onset descending paralysis and blurred vision 3 \ndays after the intake of canned food. On examination, the patient has quadriparesis with \nareflexia. Both the pupils are nonreactive. What is the most probable diagnosis?",
    "options": {
      "a": "Poliomyelitis",
      "b": "Botulism",
      "c": "Gullian Barre Syndrome",
      "d": "Tetanus"
    },
    "correct_answer": "b",
    "explanation": "The given clinical vignette of acute onset descending flaccid paralysis with a history of \nconsumption of canned food is suggestive of botulism. The incubation period from ingestion of contaminated food to the onset of symptoms in \nfood-borne botulism is usually 8–36 h but can be as long as 10 days and is dose-dependent. The \nclinical syndrome of botulism consists of bilateral cranial-nerve palsies that may progress to \nrespiratory compromise, a bilateral descending flaccid paralysis of voluntary muscles, and even \ndeath. 158 \nSold by @itachibot Cranial nerve deficits may manifest as some of the following: • diplopia • dysarthria • dysphonia • ptosis • ophthalmoplegia • facial paralysis and impaired gag reflex The absence of cranial nerve palsies makes botulism highly unlikely, as does a lack of cranial \nnerve deficits at the onset of illness. Pupillary reflexes may be depressed and fixed or dilated \npupils are sometimes noted. The cornerstones of treatment for botulism are meticulous intensive care and administration of \nbotulinum antitoxin. Option A: In poliomyelitis, weakness is generally asymmetric, more proximal than distal, and may \ninvolve the legs (most commonly), the arms, or the abdominal, thoracic, or bulbar muscles. Option C: Guillain–Barre syndrome is usually associated with ascending flaccid paralysis. Option D: Tetanus causes spastic paralysis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 12,
    "question": "Question 12: Which of the following organisms is predominantly proteolytic in Robertson cooked meat \nmedium?",
    "options": {
      "a": "Clostridium perfringens",
      "b": "Clostridium botulinum A",
      "c": "Clostridium difficile",
      "d": "Clostridium septicum"
    },
    "correct_answer": "b",
    "explanation": "Clostridium botulinum A is predominantly proteolytic in Robertson cooked meat medium. In Robertson cooked meat media, the saccharolytic species like C.perfringens, C.difficile, and \nC.septicum turn the meat pink, while the proteolytic species such as C.botulinum A turn the \nmeat black. Examples of predominantly proteolytic clostridia: • C.bifermentans • C.botulinum A, B, F • C.histolyticum C. tetani is slightly proteolytic but not saccharolytic. Examples of predominantly saccharolytic clostridia: • C.perfringens • C.septicum • C.novyi • C.difficile C.botulinum C, D and E are saccharolytic but not proteolytic. 159 \nSold by @itachibot",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 13,
    "question": "Question 13: Which of the following organisms form the citron bodies?",
    "options": {
      "a": "Clostridium septicum",
      "b": "Clostridium histolyticum",
      "c": "Clostridium tetani",
      "d": "Clostridium perfringens"
    },
    "correct_answer": "a",
    "explanation": "Citron bodies are boat or leaf-shaped pleomorphic bacteria, usually associated with Clostridium \nsepticum. It is a gram-positive, spore-forming, obligate anaerobic bacterium. Gram stain morphology of Clostridium septicum from CSF (a) and blood culture (b) in 1000× \nmagnification with spore formation(arrow) is shown below.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 14,
    "question": "Question 14: An elderly diabetic lady was brought to the hospital with complaints of diarrhoea and \nabdominal pain. She had recently been treated with intravenous clindamycin for cellulitis. \nShe was febrile at the time of examination and the blood reports revealed a Hb level of 12g/dl; \nWBC count of 18000/mm3; and C-reactive protein 160mg/l. What is the most sensitive test to \ndetect the causative organism?",
    "options": {
      "a": "Glutamate dehydrogenase immunoassay",
      "b": "PCR to detect toxin gene",
      "c": "Toxigenic culture",
      "d": "ELISA to detect toxin antigen"
    },
    "correct_answer": "c",
    "explanation": "The given clinical vignette of a patient having diarrhea following antibiotic administration is \nsuggestive of pseudomembranous colitis due to Clostridium difficile. Toxigenic culture is the most \nsensitive method for the detection of Clostridium difficle infection. The methods for diagnosis of Clostridium difficle infection are: • Toxigenic culture- Anaerobic incubation of the sample in cycloserine-cefoxitin-fructose agar \n(CCFA) or its variant for several days. This is followed by identification of the organism in the \ngrowth and tests to confirm toxin production. This method has a sensitivity of 100%. • Cell cytotoxicity neutralization assay (CCNA)- A stool filtrate is prepared and applied onto a \nmonolayer of an appropriate cell line. The cells are observed for toxin-induced cytopathic effect \n(CPE). This is followed by a neutralization assay to confirm that the CPE is attributable to \nC.difficile toxins. Sensitivity is around 75-85% when compared to toxigenic culture (reference \nstandard) • Nucleic acid amplification tests (e.g.PCR)- More sensitive (93.3%) for C.difficile detection than \ntoxin immunoassays but less sensitive than toxigenic culture. • Toxin immunoassays- Enzyme immunoassays using monoclonal or polyclonal antibodies against \nC.difficile toxins. Sensitivity is lower than other tests. 160 \nSold by @itachibot • Glutamate dehydrogenase immunoassays- Detects glutamate dehydrogenase, a metabolic \nenzyme produced by all isolates of C.difficile (toxigenic and nontoxigenic). The test is highly \nsensitive but has low specificity. Specificity Test \nSubstance detected \nSensitivit \ny High \nLow* Toxigenic culture \nC.difficilevegetative cells or s \npores C.difficilenucleic acid for toxi \nn genes High \nLow/mode \nrate Nucleic acid amplification tes \nts Glutamate dehydrogenase \nC.difficilecommon antigen \nHigh \nLow* CCNA \nFree toxins \nHigh \nHigh Free toxins \nLow \nModerate Toxin A and B immunoassay \ns *Must be combined with a to \nxin test to increase specificity",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 15,
    "question": "Question 15: A veterinarian developed an ulcer with central black eschar over the forearm as shown in the \nimage. Which of the following is the most probable causative organism?",
    "options": {
      "a": "Pseudomonas aeruginosa",
      "b": "Yersinia pestis",
      "c": "Bacillus anthracis",
      "d": "Francisella tularensis"
    },
    "correct_answer": "c",
    "explanation": "The given clinical scenario is suggestive of cutaneous anthrax which is caused by Bacillus \nanthracis. Human anthrax presents in one of three ways: • Cutaneous Anthrax(hide porter’s disease)- Black eschar at the base, with a very prominent \ninflammatory ring around the eschar, is referred to as a malignant pustule. • Pulmonary Anthrax(Wool sorter’s disease)- Hemorrhagic pneumonia. • Intestinal Anthrax- Hemorrhagic diarrhoea. It occurs mainly in primitive communities that eat \nthe carcasses of animals dying of anthrax. Robert Koch validated the germ theory of disease after discovering the anthrax bacillus as the \ncause of anthrax. He also discovered the causative agents of tuberculosis and cholera. Hence, he is \nknown as the Father of Bacteriology. Koch's postulates, which link specific microorganisms to specific diseases, state that the \nmicroorganism must be: • Found in abundance in diseased organisms, but not in healthy organisms. • Isolated from a diseased organism and grown in pure culture • Able to cause disease when inoculated into a healthy organism • Re-isolated from the diseased experimental host and identical to the original specific causative \nagent 161 \nSold by @itachibot",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Clostridium_and_Bacillus_Q15_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 16,
    "question": "Question 16: Which of the following bacilli characteristically shows the M’Fadyean’s reaction?",
    "options": {
      "a": "Bacillus cereus",
      "b": "Clostridium",
      "c": "Bacillus anthracis",
      "d": "Corynebacterium diphthteriae"
    },
    "correct_answer": "c",
    "explanation": "M'Fadyean’s reaction is shown by Bacillus anthracis. When a blood film containing anthrax bacilli is stained with polychrome methylene blue for a few \nseconds and examined under the microscope, amorphous purplish material is noticed around the \nbacilli. This represents the capsular material and is called M'Fadyean’s reaction. The following micrograph shows M'Fadyean's reaction:",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 17,
    "question": "Question 17: A dairy farmer presented to the dermatology OPD with an ulcer with central black eschar \nover the forearm. Which of the following media can be used as a selective medium for the \ngrowth of the likely etiological agent?",
    "options": {
      "a": "PLET medium",
      "b": "Buffered charcoal yeast extract medium",
      "c": "Cetrimide Agar",
      "d": "MYPA agar"
    },
    "correct_answer": "a",
    "explanation": "Based on his profession and clinical description of the lesion, the diagnosis is most likely to \nbe cutaneous anthrax (most common form of anthrax) caused by Bacillus anthracis. The selective \nmedium for this organism is PLET (polymyxin-lysozyme-EDTA-thallous acetate) medium. Other options: Option B: Buffered charcoal yeast extract medium is used for Legionella. Option C: Cetrimide agar is a selective medium for Pseudomonas aeruginosa. Option D: Mannitol, Egg Yolk, Phenol red, Polymyxin Agar (MYPA) medium is a selective medium \nfor Bacillus cereus.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 18,
    "question": "Question 18: A swab was taken from an ulcer and sent to the laboratory for culture. The following image \ndepicts a blood agar culture plate on which gamma phage suspension has been applied. \nWhich of the following is the most likely organism implicated? 152 \nSold by @itachibot",
    "options": {
      "a": "Erysipelothrix rhusiopathiae",
      "b": "Clostridium butyricum",
      "c": "Bacillus anthracis",
      "d": "Bacillus cereus"
    },
    "correct_answer": "c",
    "explanation": "The given image with a circular spot of diminished growth in the culture plate from a swab from \nan ulcer depicts the gamma phage lysis assay. The most likely organism implicated is Bacillus \nAnthracis. 162 \nSold by @itachibot This test is performed by inoculating Bacillus Anthracis in sheep blood agar followed by the \napplication of gamma phage suspension over one area of the culture plate. The gamma phage \nsuspension inhibits the growth of Bacillus anthracis colonies resulting in an an area of diminished \ngrowth called a plaque.",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Clostridium_and_Bacillus_Q18_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 19,
    "question": "Question 19: Which of the following tests is used for the diagnosis of anthrax?",
    "options": {
      "a": "Paul- Bunnell test",
      "b": "Kahn test",
      "c": "Ascoli's thermoprecipitation test",
      "d": "Rose-Waaler test"
    },
    "correct_answer": "c",
    "explanation": "Ascoli's thermoprecipitation test is used for the diagnosis of anthrax caused by Bacillus anthracis. \nIt is an example of a ring precipitation test. Option A: Paul-Bunnell test is used to diagnose infectious mononucleosis. Option B: Kahn test is used to diagnose syphilis. Option D: Rose-Waaler test is used to diagnose rheumatoid arthritis.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 20,
    "question": "Question 20: A young patient presented to the medicine OPD with complaints of nausea and vomiting. He \ngave a history of having fried rice from a local Chinese restaurant a few hours ago. What is \nthe most likely causative organism?",
    "options": {
      "a": "Clostridium perfringens",
      "b": "Bacillus cereus",
      "c": "Staphylococcus aureus",
      "d": "Bacillus anthracis"
    },
    "correct_answer": "b",
    "explanation": "Based on the symptoms and a history of consuming fried rice 6 hours ago, we can diagnose this to \nbe a case of food poisoning due to Bacillus cereus. Food poisoning cause by B. cereus is of two types: Bacillus cereus \nDiarrheal type \nEmetic type 8-16 hours \n1-5 hours Incubation peri \nod Toxin \nSecreted in intestine \nPreformed Heat \nHeat labile \nHeat stable Food items \nMeat \nRice Clinical feature \nDiarrhea, abdominal cram \nps Vomiting, abdominal cra \nmps",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Clostridium and Bacillus"
  },
  {
    "q_no": 21,
    "question": "Question 21: Which of the following can grow in an acidic pH?",
    "options": {
      "a": "Mycolic acid",
      "b": "Muramic acid",
      "c": "Teichoic acid",
      "d": "Talosaminuronic acid"
    },
    "correct_answer": "b",
    "explanation": "Among the given options, lactobacilli is the one that can grow in an acidic pH. It is a gram-positive, facultatively anaerobic, non-motile, non–spore-forming bacterium. \nLactobacillus derives lactic acid from glucose, creating an acidic environment, and can grow in an \nacidic medium. It is found in the vagina as part of its normal microbiota. 163 \nSold by @itachibot Mycobacteria Tuberculosis",
    "image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Clostridium_and_Bacillus_Q21_q.jpg",
    "explanation_image": "https://github.com/tk22kalal/mcqimage/blob/main/mxmicrobiology/Clostridium_and_Bacillus_Q21_exp.jpg",
    "chapter_heading": "Clostridium and Bacillus"
  }
]