[
  {
    "q_no": 1,
    "question": "Which of the following conditions is not reversed with the administration of atropine?",
    "options": {
      "A": "Bradycardia",
      "B": "Muscle weakness due to neuromuscular blockade",
      "C": "Excessive salivation",
      "D": "Bronchoconstriction"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Muscle weakness due to neuromuscular blockade Explanation: Muscle weakness due to neuromuscular blockade is not reversed by atropine administration. Atropine is an antimuscarinic (anticholinergic) agent that competitively blocks muscarinic acetylcholine receptors. It has no effect on nicotinic acetylcholine receptors at the neuromuscular junction , which are responsible for skeletal muscle contraction. Therefore, atropine cannot reverse muscle weakness caused by neuromuscular blocking agents. Atropine Classification Anticholinergic drug (Muscarinic receptor antagonist) Competitive antagonist at muscarinic receptors Mechanism of Action Competitive inhibition of postganglionic acetylcholine muscarinic receptors Blocks all subtypes of muscarinic receptors (M I , M I , M I ) Direct vagolytic action leading to parasympathetic inhibition Allows preexisting sympathetic stimulation to predominate Pharmacological Actions 1. CNS Effects Overall CNS stimulant action Stimulates medullary centers (vagal, respiratory, vasomotor) Depresses vestibular excitation (antimotion sickness property) Suppresses tremor and rigidity in parkinsonism High doses: cortical excitation, restlessness, hallucinations, delirium Very high doses: respiratory depression and coma 2. CVS Heart: Tachycardia (primary effect) - blocks M I receptors on SA node (Option A Ruled Out) Initial transient bradycardia may occur with IM/SC injection Abbreviates refractory period of A-V node Facilitates A-V conduction Shortens P-R interval Blood Pressure: No consistent/marked effect on BP Tachycardia and vasomotor center stimulation tend to raise BP Histamine release and direct vasodilator action (at high doses) tend to lower BP Blocks vasodepressor action of cholinergic agonists 3. Eye Mydriasis (pupil dilation) Cycloplegia (paralysis of accommodation) Abolition of light reflex Effects last 7-10 days with topical application May increase intraocular tension, especially in narrow angle glaucoma Has mild local anesthetic action on cornea 4. Smooth Muscles Relaxes all visceral smooth muscles with parasympathetic innervation (M I blockade) Reduces tone and amplitude of GI contractions Slows passage of chyme; may cause constipation Causes bronchodilation , reduces airway resistance (Option D Ruled Out) Relaxes ureter and urinary bladder Relaxation of biliary tract (less marked) Minimal effect on uterus 5. Glandular Secretions Markedly decreases sweat, salivary , tracheobronchial and lacrimal secretions ( M I blockade) (Option C Ruled Out) 6. Body Temperature Higher doses can cause rise in body temperature Due to inhibition of sweating and stimulation of temperature regulating center Children are highly susceptible to atropine fever Relative Sensitivity of Organs Decreasing order of sensitivity: Saliva, sweat, bronchial secretion > eye, bronchial muscle, heart > smooth muscle of intestine, bladder > gastric glands and",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 2,
    "question": "A patient who received a supraclavicular brachial plexus block with 0.5% bupivacaine develops hypotension and arrhythmias. What is the first-line treatment for this situation?",
    "options": {
      "A": "Invasive ventilation",
      "B": "20% intralipid infusion",
      "C": "Sodium bicarbonate",
      "D": "Cardiopulmonary resuscitation"
    },
    "correct_answer": "B",
    "explanation": "Toxicity (LAST) caused by bupivacaine as seen by the cardiac side effects (hypotension and arryhthmia). Treatment of choice is 20% intralipid infusion. Local Anesthetic Systemic Toxicity (LAST): Clinical Features CNS effects: Early and less severe. First symptom: circumoral paraesthesia First sign: nystagmus At low plasma concentration: mild sensory disturbances. Increased concentration: CNS excitation, seizure activity. Higher concentration: CNS depression, coma, respiratory depression, arrest. Cardiac effects: Usually late but severe form of toxicity, may lead to death. Hypotension, dysrhythmias, myocardial depression. Potent agents (bupivacaine, ropivacaine, levobupivacaine) linked to cardiovascular collapse, heart block. Safety profile Bupivacaine has more risk to cause LAST than Lidocaine Most potent highly lipid soluble drugs are more likely to cause Prevention Risk recognition and dose reduction. Careful aspiration before injection. Incremental administration (3-5 mL) with continuous heart rate monitoring. Use ultrasonographic guidance to confirm anesthetic deposit. Use a vasoactive agent like epinephrine to reduce systemic absorption and serve as an intravascular indicator. Treatment Recognize LAST (Local Anesthetic Systemic Toxicity) early and call for help. Airway management: Secure airway, ventilate with 100% oxygen. Administer 20% Lipid Emulsion: Bolus: 12 mL/kg over 2-3 min. Infusion: at 0.25 mL/kg/min-0.5ml/kg/min for 15-20 mins Maximum initial dose: 12 ml/kg Administration of antiepileptics: for seizure control, benzodiazepines such as Lorazepam is preferred. Cardiopulmonary resuscitation: if necessary, monitor the patient at least for initial 2-6 hours following resuscitation. Incorrect Options: Invasive ventilation and Cardiopulmonary resuscitation (Option A and D): This is indicated only if there is a cardiac arrest. Since the question stem indicates hypotension and arrhythmia, this is not the correct answer. Sodium bicarbonate (Option C): Lipid emulsion therapy is preferred over sodium bicarbonate for bupivacaine toxicity because it directly binds and sequesters bupivacaine, reducing its concentration and toxic effects on the heart and brain. Sodium bicarbonate can help correct metabolic acidosis, but it doesn’t target bupivacaine toxicity directly and is less effective in severe cases. Lipid emulsion therapy is considered the most effective treatment for life-threatening toxicity. Reference: Barash Clinical Anesthesia 9th edition pages 1706-1721",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 3,
    "question": "A 45-year-old patient undergoing surgery was administered 85 mg of rocuronium to induce anesthesia, but the induction failed. Which drug should be administered for immediate reversal of the rocuronium?",
    "options": {
      "A": "Neostigmine",
      "B": "Sugammadex",
      "C": "Glycopyrrolate",
      "D": "Edrophonium"
    },
    "correct_answer": "B",
    "explanation": "reverse steroidal non-depolarizing neuromuscular blocking drugs rocuronium and vecuronium. It works by rapidly encapsulating free rocuronium in the plasma, which decreases its concentration. This creates a concentration gradient that drives more rocuronium out of the neuromuscular junction and into the plasma, where it is then encapsulated by sugammadex. It increases the speed of neuromuscular blockade reversal and greatly reduces the risk of residual neuromuscular paralysis. Incorrect Options: Options A , C, and D are less effective than sugammadex for reversing rocuronium. Reference: .",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 4,
    "question": "A patient is given a nicotinic receptor antagonist as a muscle relaxant. Which drug is given postoperatively to recover from muscle weakness?",
    "options": {
      "A": "Physostigmine",
      "B": "Neostigmine",
      "C": "Carbachol",
      "D": "Succinylcholine"
    },
    "correct_answer": "B",
    "explanation": "weakness induced by a nicotinic receptor antagonist (such as a non-depolarizing neuromuscular blocking agent) is Neostigmine . Neostigmine : An acetylcholinesterase inhibitor that increases the concentration of acetylcholine at the neuromuscular junction. This facilitates the activation of nicotinic receptors, effectively reversing the effects of non-depolarizing neuromuscular blockers (e.g., rocuronium, vecuronium) and restoring normal muscle function. Neostigmine is often co-administered with an anticholinergic agent (e.g., glycopyrrolate or atropine) to counteract muscarinic side effects such as bradycardia and excessive salivation. It is specifically effective against non-depolarizing neuromuscular blockers and is not used for depolarizing agents like succinylcholine. Incorrect Options: Physostigmine (Option A): Although physostigmine is also a cholinesterase inhibitor, it primarily crosses the blood-brain barrier and is used to reverse central nervous system effects of anticholinergic toxicity. It is not routinely used to reverse neuromuscular blockade. Carbachol (Option C) is a direct cholinergic agonist that mimics acetylcholine. It is used in ophthalmology (e.g., for glaucoma) but not for reversing the effects of muscle relaxants. Succinylcholine (Option D) is a depolarising neuromuscular blocker used to induce paralysis during short procedures. It is not used to reverse muscle relaxation and may even worsen weakness if given postoperatively. Reference: Miller’s Anesthesia, 8th Edition, Page 425 https://pmc.ncbi.nlm.nih.gov/articles/PMC5568091/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 5,
    "question": "Which method is considered the most effective for evaluating the extent of muscle relaxation?",
    "options": {
      "A": "Tetanic stimulation",
      "B": "Double-burst stimulation",
      "C": "Train of four",
      "D": "Electromyography"
    },
    "correct_answer": "C",
    "explanation": "assessing the degree of muscle relaxation during anesthesia. It involves stimulating a motor nerve at a high frequency and observing the resulting muscle twitch responses. By comparing the amplitude of the fourth twitch to the first, anesthesiologists can accurately quantify neuromuscular blockade and tailor drug dosages to achieve optimal relaxation while minimizing the risk of residual paralysis.. Incorrect Options A, B, and D are not the most effective for evaluating the extent of muscle relaxation. Option A: Tetanic stimulation: Unlike tetanic stimulation, which induces sustained muscle contraction, TOF delivers a series of four brief stimuli, allowing for the assessment of fade in muscle twitch responses as neuromuscular blockade increases. Option B: Double burst stimulation: While double burst stimulation delivers two bursts of electrical impulses in rapid succession, TOF provides four individual stimuli, allowing for a more detailed assessment of fade in muscle twitch responses. Option D: Electromyography: EMG measures muscle electrical activity, which may be influenced by factors other than neuromuscular blockade, such as muscle fatigue or electrode placement. Reference: Morgan & Mikhail's Clinical Anesthesiology",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 6,
    "question": "What is the mechanism of action of the curare group of muscle relaxants?",
    "options": {
      "A": "Persistently depolarizing at neuromuscular junction",
      "B": "Competitively blocking the binding of ACh to its receptors",
      "C": "Repetitive stimulation of ACh receptors on muscle endplate",
      "D": "Inhibiting the calcium channels on presynaptic membrane"
    },
    "correct_answer": "B",
    "explanation": "competitively bind to the nicotinic acetylcholine receptors at the neuromuscular junction, preventing the binding of acetylcholine (ACh) and thereby inhibiting muscle contraction. Incorrect Options: Options A, C, and D are incorrect. Reference: Morgan & Mikhail's Clinical Anesthesiology",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  },
  {
    "q_no": 7,
    "question": "How do the muscle relaxants in the curare group work?",
    "options": {
      "A": "Persistently depolarizing at neuromuscular junction",
      "B": "Competitively blocking the binding of ACH to its receptors",
      "C": "Repetitive stimulation of ACh receptors on muscle endplate",
      "D": "Inhibiting the calcium channels on presynaptic membrane"
    },
    "correct_answer": "B",
    "explanation": "neuromuscular blocking agent that blocks neuromuscular transmission. This process allows the central nervous system to control muscle action at the neuromuscular junction. It paralyzes muscles that bind directly to nicotinic receptors in the postsynaptic membrane, blocking acetylcholine binding and depolarizing the motor plate, thereby causing muscle paralysis. Hence, it competitively binds with the acetylcholine receptors. Hence, option B is the correct answer to the question given. Option A: It does not work by persistently depolarizing the neuromuscular junction, Option C: It does not work by repetitive stimulation of the acetylcholine receptors Option D: It does not work by inhibiting the calcium channels. Reference: Morgan & Mikhail's Clinical Anesthesiology",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Previous Year Questions"
  }
]