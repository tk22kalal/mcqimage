[
  {
    "q_no": 1,
    "question": "Which of the following statements about Minimal Alveolar Concentration (MAC) is true?",
    "options": {
      "A": "MAC is the lowest for nitrous oxide",
      "B": "MAC is used to compare the potency of inhaled anesthetics",
      "C": "MAC is a measure of the blood concentration of anesthetic agents",
      "D": "MAC does not vary with age"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) MAC is used to compare the potency of inhaled anesthetics. Explanation: Minimal Alveolar Concentration (MAC) is a standard measure used in anesthesia to assess the potency of inhaled anesthetics. It represents the concentration of anesthetic in the alveoli needed to prevent movement in 50% of patients exposed to a surgical/painful stimulus. A lower MAC value indicates a more potent anesthetic, meaning less is needed to achieve the desired anesthetic effect. Methoxyflurane has the least MAC Nitrous oxide has the highest MAC MAC 95: Minimal alveolar concentration at which 95% of patients do not respond to any stimuli. MAC 95 = 1.3 × MAC MAC awake: MAC at which 50% of patients become awake. MAC awake = 0.3 × MAC MAC is a measure of the blood concentration of anesthetic agents (Option C) : Mean Alveolar Concentration (MAC) is not actually a measure of the blood concentration of anesthetic agents; rather, it refers specifically to the concentration of inhaled anesthetics in the alveoli of the lungs. MAC does not vary with age (Option D): MAC value is inversely proportional to age. Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition, Pg.294-296",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 2,
    "question": "During a routine surgical procedure requiring general anesthesia, an anesthesiologist is determining the appropriate dosage of sevoflurane for a 45-year-old patient. Several factors could influence the Mean Alveolar Concentration (MAC) needed to achieve adequate anesthesia. The anesthesiologist considers the following factors: Patient Age: The patient is 45 years old. Body Temperature: The patient has a normal body temperature of 37°C. Use of Opioids: The patient has received a dose of fentanyl prior to induction. Which factor is likely to decrease the MAC value for sevoflurane in this patient?",
    "options": {
      "A": "Height",
      "B": "Gender",
      "C": "Use of opioids",
      "D": "Thyroid status"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Use of opioids Explanation: Opioids decrease MAC value. Opioids like fentanyl have a synergistic effect with anesthetics, meaning they can enhance the anesthetic effect. This allows for a lower MAC to achieve the same anesthetic depth, effectively decreasing the required concentration of sevoflurane. Factors increasing MAC Factors decreasing MAC Factors not affecting MAC Young patient (maximum at 6 months) Chronic alcoholic Acute amphetamine/cocaine user Hypernatremia Hyperthermia Red hair Elderly person Acute alcoholic Chronic amphetamine user Hyponatremia Hypothermia Hypoxia Hypercarbia Anemia (low hemoglobin) Pregnancy Local anaesthetics I.V. induction Gender (Option B) Height (Option A) Thyroid status (Option D) Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition. Pg.297",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 3,
    "question": "A 45-year-old male is undergoing general anesthesia for a routine surgery. The anesthesiologist uses two different inhalational agents: one with a high blood-gas partition coefficient and another with a low blood-gas partition coefficient. Which of the following is TRUE regarding the blood-gas partition coefficient and its clinical implications? quickly than one with a low coefficient. the alveoli to maintain anesthesia. of action compared to one with a low coefficient.",
    "options": {
      "A": "An inhalational agent with a high blood-gas partition coefficient will achieve anesthesia more",
      "B": "An inhalational agent with a low blood-gas partition coefficient will require a higher concentration in",
      "C": "An inhalational agent with a high blood-gas partition coefficient will have a slower onset and offset",
      "D": "The blood-gas partition coefficient has no effect on the pharmacokinetics of inhalational anesthetics."
    },
    "correct_answer": "C",
    "explanation": "slower onset and offset of action compared to one with a low coefficient. Correct Answer: C) An inhalational agent with a high blood-gas partition coefficient will have a slower onset and slower recovery than one with a low coefficient. Explanation: Anesthetic agents having a high blood-gas partition coefficient (B/G) will have a high solubility in blood leading to a low alveolar concentration, slow induction, and slow recovery. Blood gas coefficient: Indicates the speed of onset and recovery of inhalational agent Indicates solubility of the inhalational agent in the blood Inversely proportional to the speed of onset High B/G has a slow onset (Option A) Low B/G has a fast onset The inhalational agent enters the lungs → blood vessels → brain An inhalational agent with a low blood-gas partition coefficient will require a higher concentration in the alveoli to maintain anesthesia (Option B): This is misleading. While low solubility agents reach higher concentrations in the alveoli more quickly, they do not necessarily require higher concentrations to maintain anesthesia. The blood-gas partition coefficient has no effect on the pharmacokinetics of inhalational anesthetics (Option D): This is false. The blood-gas partition coefficient is critical in determining how quickly an anesthetic will act and how it will be eliminated from the body. Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition. Pg 282-283",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 4,
    "question": "Which of the following anesthetics is ordered from lowest to highest in terms of Minimum Alveolar Concentration (MAC) values (indicating potency)?",
    "options": {
      "A": "Desflurane, Isoflurane, Halothane",
      "B": "Halothane, Isoflurane, Desflurane",
      "C": "Sevoflurane, Nitrous Oxide, Desflurane",
      "D": "Nitrous Oxide, Sevoflurane, Halothane"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Halothane, Isoflurane, Desflurane Explanation: Halothane has the lowest MAC and a higher blood-gas partition coefficient, making it the most potent of the three. Isoflurane has a moderate MAC and partition coefficient. Desflurane has the highest MAC, indicating it is the least potent of the three. Mnemonic for most potent to least potent: MaHI S traight D rive - M ethoxyflurane, H alothane, I soflurane, S evoflurane, D esflurane. Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition, Pg.294-297",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthetics_Q4_exp.png",
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 5,
    "question": "All the following statements about the systemic effects of inhalational agents are correct except:",
    "options": {
      "A": "Isoflurane can be safely used in patients with head injury",
      "B": "Halothane is the anesthetic agent of choice in patients with ischaemic heart disease",
      "C": "Almost all inhalational agents cause bronchodilation",
      "D": "Sevoflurane is the anesthetic of choice in bronchial asthma"
    },
    "correct_answer": "B",
    "explanation": "disease Correct Answer: B) Halothane is the anesthetic agent of choice in patients with ischaemic heart disease. Explanation: Halothane is contraindicated in patients with ischaemic heart disease. Halothane decreases cardiac output, BP, and PR Halothane causes hypotension by direct myocardial depression Halothane causes bradycardia by blunting carotid body receptor response Halothane is a common inhalational agent used in the respiratory system (due to maximum bronchodilation) while Isoflurane is the common inhalational agent used in CNS and CVS Central Nervous System: Inhalational agents are CNS depressant They reduce cerebral metabolic rate Commonly used inhalational agent is isoflurane They increase the cerebral blood flow thereby increasing the ICP, so they are avoided in head injury and neurosurgery (maximum with halothane) Isoflurane is an inhalational agent of choice in head injury as it decreases the ICP (Option A) Most epileptogenic agent: Enflurane (increases ICP and also causes epilepsy) Respiratory system Almost all inhalational agents cause bronchodilation (Option C) Reduces the Respiratory rate Causes decreased mucociliary function (except ether) Maximum bronchodilation is seen with halothane, therefore 2nd best inhalational agent for bronchial asthma is halothane. Best inhalational agent for bronchial asthma: Sevoflurane (Option D) Cardiovascular system Reduces heart rate, BP, and systemic vascular resistance Halothane increases the sensitivity of the myocardium toward catecholamines Halothane, isoflurane, enflurane - prolong QT interval Gastrointestinal system: Reduces the liver blood flow Halothane hepatitis: maximally metabolized produces trifluoroacetic acid as an end product that reacts with liver cells (immunologically) causing acute fulminant hepatic necrosis. Uterus: All agents are good uterine relaxants so there is a high chance of PPH Reference: Morgan's and Mikhail's Anesthesiology, 7th Edition, Page 299,300",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 6,
    "question": "A 45-year-old woman is undergoing elective cholecystectomy under general anesthesia. The anesthesiologist is using halothane as the primary inhalational anesthetic. During the procedure, the surgeon encounters unexpected bleeding and requests local infiltration with adrenaline (epinephrine) for hemostasis. What is the most appropriate response of the anesthesiologist to the surgeon's request for adrenaline infiltration?",
    "options": {
      "A": "Agree to the use of adrenaline without any concerns",
      "B": "Refuse the use of adrenaline completely due to high-risk",
      "C": "Allow the use of adrenaline, but advise using a dilute solution and limiting the total dose",
      "D": "Suggest switching to a different inhalational anesthetic before using adrenaline"
    },
    "correct_answer": "C",
    "explanation": "total dose Correct Answer: C) Allow the use of adrenaline, but advise using a dilute solution and limiting the total dose Explanation: This scenario highlights the important interaction between halothane and adrenaline (epinephrine) The key points to consider are: Halothane sensitizes the myocardium to the arrhythmogenic effects of catecholamines, including adrenaline. This interaction can potentially lead to severe cardiac arrhythmias , particularly ventricular arrhythmias. However, the risk is dose-dependent and can be mitigated by using appropriate precautions. Completely avoiding adrenaline may compromise surgical hemostasis, which is also important for patient safety. Modern practice allows for the cautious use of adrenaline with halothane under certain conditions. Reference: Barash Clinical Anaesthesiology, 9th Edition, Pg. 1425, 1426 American Society of Anaesthesiology",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 7,
    "question": "A 68-year-old patient with a history of liver disease is scheduled for a prolonged liver transplant surgery. Which of the following inhalational anesthetics would be most appropriate to use in this case?",
    "options": {
      "A": "Halothane",
      "B": "Desflurane",
      "C": "Methoxyflurane",
      "D": "Isoflurane"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Desflurane Explanation: Desflurane is the least metabolized inhalational agent in the liver , with <0.01% metabolized in the liver and 99.9% in the lungs. This minimal hepatic metabolism makes it safer for patients with liver disease. Metabolism of inhalational anesthetic agents Anesthetic Metabolism Key Characteristics Specific Indications/Contraindications Halothane 20% in liver (maximum) Most hepatotoxic Can cause greatest reduction in cardiac output Desflurane <0.01% in liver, 99.9% in lungs Least metabolized in the liver Minimally metabolized in the body Readily excreted by exhalation Choice for liver and renal transplant Induction or maintenance of anesthesia in adults Maintenance of anesthesia in pediatric patients after induction with other agents Methoxyflurane 70% in tissues Most potent and slow onset Most nephrotoxic Nephrotoxic effect attributed to inorganic fluoride produced by it Reference: Miller’s Textbook of Anaesthesiology, 9th Edition, Pg. 522, 526, 528, 530, 536",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 8,
    "question": "A 45-year-old woman with a history of moderate alcohol use undergoes general anesthesia for an emergency appendectomy. The anesthesiologist uses halothane for induction and maintenance. Two weeks after the surgery, the patient presents with fatigue, nausea, jaundice, and tender hepatomegaly. Laboratory tests reveal the following: AST (Aspartate Aminotransferase): 850 U/L (normal range: 5-40 U/L) ALT (Alanine Aminotransferase): 920 U/L (normal range: 7-56 U/L) Total Bilirubin: 4.8 mg/dL (normal range: 0.1-1.2 mg/dL) Direct Bilirubin: 3.2 mg/dL (normal range: 0.0-0.3 mg/dL) Which of the following best explains the patient's condition?",
    "options": {
      "A": "Direct hepatotoxicity of halothane",
      "B": "Immune-mediated hepatotoxicity of halothane",
      "C": "Alcohol-induced liver failure precipitating due to surgical stress",
      "D": "Postoperative sepsis"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Immune-mediated hepatotoxicity of halothane Explanation: The patient's presentation is consistent with halothane-induced hepatitis , also known as Type-2 halothane hepatotoxicity. This is an immune-mediated reaction that typically occurs 1-2 weeks after exposure to halothane, especially in patients with previous exposure or risk factors such as moderate alcohol use. Halothane Category Details Chemical Properties - Clear, heavy, colorless liquid - Sweet, non-irritating odor, photosensitive (stored in an amber bottle with thymol preservative) - Structure of an alkane - Highly soluble in blood and tissues, hence can cause delayed recovery Systemic Effects - Cardiovascular: Myocardial depression, sensitization to catecholamines - Respiratory: Respiratory depression - Central Nervous System: General anesthesia, increased cerebral blood flow Uses - Induction and maintenance of general anesthesia - Less commonly used now due to side effect profile - Still used in some resource-limited settings Side Effects - Type 1 Hepatotoxicity: Mild, self-limiting liver injury (20-30% of patients) - Type 2 Hepatotoxicity (Halothane Hepatitis): Severe, potentially fatal (1 in 35,000 after single exposure) - Cardiorespiratory instability - Arrhythmias, especially in children - Malignant hyperthermia (rare) Metabolism - 20-45% metabolized in the liver - Produces trifluoroacetyl (TFA) protein adducts which are immunogenic and are responsible for causing halothane hepatitis. Reference: Miller’s Textbook of Anaesthesiology, 9th Edition, Pg. 528, 529",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 9,
    "question": "A 60-year-old man with hypertension and coronary artery disease is undergoing general anesthesia for abdominal surgery. The anesthesiologist chooses to use isoflurane for the maintenance of anesthesia. Which of the following is a correct statement about isoflurane's effects and properties?",
    "options": {
      "A": "It causes significant myocardial depression",
      "B": "It increases systemic vascular resistance",
      "C": "It is highly metabolized in the liver",
      "D": "It provides cardio-protection through ischemic preconditioning"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) It provides cardio-protection through ischemic preconditioning Explanation: Isoflurane is a volatile anesthetic used for the induction and maintenance of general anesthesia. It provides cardio-protection through ischemic preconditioning , which can help reduce ischemia-reperfusion injury to the heart. This makes it a good choice for patients with coronary artery disease. Category Details Chemical Properties - Halogenated ether compound - Non-flammable - Strong, pungent odor Cardiovascular Effects - Minimal impact on left ventricular function - Dose-dependent decrease in systemic vascular resistance - Mild increase in heart rate - Coronary vasodilation - Coronary steal syndrome - (HIND Drugs - Hydralazine, Isoflurane, Nitroprusside, Dipyradiamole) - Cardioprotection through ischemic preconditioning Respiratory Effects - Decrease in tidal volume - Minimal increase in respiratory rate - Overall decrease in minute ventilation - Increased PaCO2 CNS Effects - Increased cerebral blood flow at >1 MAC - Increased intracranial pressure at >1 MAC - Decreased cerebral metabolic rate Uses - Induction of general anesthesia (less commonly used due to odor, irritation, and laryngospasm) - Maintenance of general anesthesia - agent of choice in cardiothoracic and neurosurgery. Side Effects - Dose-dependent hypotension - Potential trigger for malignant hyperthermia Metabolism - Minimal hepatic metabolism (0.2%) - Metabolized to trifluoroacetic acid - No significant renal or hepatic toxicity at clinical doses It causes significant myocardial depression (Option A): Isoflurane has minimal impact on left ventricular function. It increases systemic vascular resistance (Option B): Isoflurane has a dose-dependent decrease in systemic vascular resistance. It is highly metabolized in the liver (Option C): Isoflurane undergoes minimal hepatic metabolism (only about 0.2%). Reference: Miller’s Textbook of Anaesthesiology, 9th Edition, Pg. 511, 527, 536",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 10,
    "question": "A 55-year-old female is scheduled for elective surgery. The anesthesiologist is reviewing the anesthesia plan, which includes the use of sevoflurane. Which of the following statements regarding sevoflurane is TRUE ?",
    "options": {
      "A": "It significantly increases heart rate during anesthesia.",
      "B": "It can be given to the patient with raised intracranial pressure.",
      "C": "It is known to cause significant renal toxicity.",
      "D": "It doesn’t reverse bronchospasm."
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) It can be given to the patient with raised intracranial pressure. Explanation: Sevoflurane and isoflurane when compared to other inhalational agents will cause less increase in cerebral blood flow and intracranial pressure. Sevoflurane Properties Sevoflurane is a fluorinated ether with low blood solubility ( λ b/g 0.65), allowing for rapid induction and emergence. Its non-pungency makes it suitable for inhalation induction, especially in pediatric patients. It is used with conventional vaporizers. Uses Ideal for smooth and rapid inhalation induction, particularly in daycare procedures (4-8% concentration with nitrous oxide and oxygen). It is commonly used for both pediatric and adult anesthesia. C/I Should be avoided in cases of severe hypovolemia, susceptibility to malignant hyperthermia, . Systemic Effects Cardiovascular Mild myocardial depression with a slight reduction in systemic vascular resistance and blood pressure. It causes a minimal heart rate increase and may prolong the QT interval. (Option A) Hepatic Decreases portal vein flow but increases hepatic artery flow, maintaining overall hepatic perfusion. Renal Slightly decreases renal blood flow but has no known association with significant renal toxicity. (Option C) Compound A , a degradation product of sevoflurane, is nephrotoxic in animals but has no known adverse effects on humans. Neuromuscular Provides adequate muscle relaxation for intubation but is often combined with other agents or muscle relaxants. Cerebral Slight increases in cerebral blood flow (CBF) and intracranial pressure. High concentrations may impair CBF autoregulation. Seizures have not been reported. Respiratory (Option D) Depresses respiration and helps reverse bronchospasm. Thus, agent of choice in asthmatics. Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition, Pg. 312-315",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 11,
    "question": "Which of the following statements about the systemic effects of desflurane is true?",
    "options": {
      "A": "Increase in systemic vascular resistance.",
      "B": "Severe nephrotoxicity.",
      "C": "Increases cerebral blood flow (CBF) while decreasing cerebral oxygen consumption.",
      "D": "No effect on respiratory rate."
    },
    "correct_answer": "C",
    "explanation": "consumption. Correct Answer: C) Increases cerebral blood flow (CBF) while decreasing cerebral oxygen consumption. Explanation: Desflurane increases cerebral blood flow and intracranial pressure while decreasing cerebral oxygen consumption. Desflurane Properties Desflurane is a fluorinated ether with high vapor pressure (681 mm Hg at 20°C) and very low blood solubility ( λ b/g 0.42), allowing rapid induction and emergence. It requires a special vaporizer (tec 6) for precise anesthetic control. TEC 6 Uses Desflurane is ideal for rapid induction and emergence due to its low blood solubility, but it is not suitable for inhalation induction due to its pungency and airway irritation. C/I It should be avoided in patients with severe hypovolemia, malignant hyperthermia, and intracranial hypertension. Systemic Effects Cardiovascular Desflurane decreases systemic vascular resistance and arterial blood pressure. (Option A) It causes moderate increases in heart rate, central venous pressure, and pulmonary artery pressure, particularly during rapid concentration increases, which can be managed with fentanyl, esmolol, or clonidine. Respiratory Causes decreased tidal volume and increased respiratory rate. It is pungent and can cause airway irritation, making it unsuitable for inhalation induction. (Option D) Hepatic Minimal metabolism and risk of anesthetic-induced hepatitis, with maintained hepatic oxygen delivery. Renal Minimal nephrotoxicity, but decreases in urine output and glomerular filtration occur with reduced cardiac output. (Option B) Neuromuscular Desflurane causes a dose-dependent decrease in neuromuscular response, enhancing the effects of nondepolarizing neuromuscular blockers. Cerebral Increases cerebral blood flow (CBF), intracranial pressure, and cerebral blood volume but decreases cerebral oxygen consumption. CBF can be lowered through hyperventilation.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 12,
    "question": "A 30-year-old male with a family history of severe reactions to anesthesia is scheduled for surgery under general anesthesia. The anesthetic plan includes nitrous oxide (N I O) along with other agents. Given his history, which of the following statements about nitrous oxide is FALSE ?",
    "options": {
      "A": "Nitrous oxide is a colorless and odorless gas.",
      "B": "It can trigger malignant hyperthermia.",
      "C": "It is contraindicated in patients with Pneumothorax.",
      "D": "It causes MI in patients with CAD."
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) It can trigger malignant hyperthermia. Explanation: Nitrous oxide does not trigger malignant hyperthermia, which is a severe reaction typically associated with certain volatile anesthetics and succinylcholine. Nitrous Oxide Properties Nitrous oxide (N I O) is a colorless, odorless, nonflammable gas, stored as a liquid under pressure. (Option A ruled out) It supports combustion and is a relatively inexpensive anesthetic. It is an NMDA receptor antagonist. Stored in blue color cylinders at 745 psi pressure. Uses Commonly used in combination with volatile anesthetics to reduce their required dose via the second gas effect. It provides analgesia in dental surgery, labor, and minor surgical procedures. Nitrous oxide has minimal muscle relaxation effects and doesn't trigger malignant hyperthermia. Contraindications Should be avoided in patients with air-containing cavities because it can cause rapid expansion of these air cavities (e.g., pneumothorax, air embolism, intestinal obstruction, pneumocephalus, intraocular air, tympanic membrane grafting). (Option C ruled out) It is unsuitable for patients needing high oxygen concentrations and is typically avoided in early pregnancy due to possible teratogenic effects. Side Effects Can cause myocardial depression in patients with coronary artery disease or hypovolemia. (Option D ruled out) It may increase pulmonary vascular resistance, lead to nausea and vomiting, and impair the body's response to infection. Chronic exposure may result in bone marrow suppression and neurological deficits due to vitamin B12 enzyme inhibition . Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition, Pg.298- 303 Miller’s Textbook of Anaesthesiology, 9th Edition, Pg. 533",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 13,
    "question": "Which of the following statements best describes the second gas effect of Nitrous oxide when administered along with Isoflurane?",
    "options": {
      "A": "Decreased concentration of Isoflurane in the alveoli",
      "B": "Increased concentration of Isoflurane in the alveoli",
      "C": "Increase concentration of Nitrous oxide in alveoli",
      "D": "No effect on the concentration of gases in the alveoli"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Increased concentration of Isoflurane in the alveoli Explanation: As N I O is rapidly absorbed into the blood, it decreases its own concentration in the alveoli (Option C ruled out) , which allows for a relatively higher concentration of the second anaesthetic gas (Isoflurane in this case). Second Gas Effect The second gas effect occurs when a second lesser soluble Inhalational anaesthetic is given alongside nitrous oxide (N I O), leading to a concentration effect. (Example: 2% of a less soluble potent anaesthetic is administered with 70% N I O and 28% oxygen) ↓ N I O partitions into the blood quickly due to its high partial pressure. ↓ As N I O is absorbed, its concentration in the alveoli decreases. ↓ Increase in concentration of less soluble potent anaesthetic in the alveoli. (Remaining gases in alveoli: 35 parts N I O, 28 parts oxygen, 2 parts potent anesthetic) Potent anesthetic concentration increases to 3.1%. As N I O partitions into the blood, it leaves behind a higher relative concentration of the potent anesthetic in the alveoli. This results in an increased concentration of the anesthetic gas, although the clinical impact on speeding induction is minimal. Decreased concentration of Isoflurane in the alveoli (Option A): The second gas effect actually leads to an increased concentration of Isoflurane in the alveoli. No effect on the concentration of gases in the alveoli (Option D): The second gas effect directly influences the concentration of the anaesthetic gas in the alveoli by increasing the concentration of Isoflurane in the alveoli. Reference: Miller Anaesthesia. 9th edition. Pg. 518 Barash Clinical Anaesthesia. 9th edition. Pg. 1394, 1395",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 14,
    "question": "A 35-year-old patient is recovering from anesthesia after a dental procedure that involved the use of nitrous oxide (N2O). As the anesthesiologist prepares to discontinue N2O, they consider the potential risks associated with it. To prevent this complication in the patient, which of the following actions should be taken?",
    "options": {
      "A": "Administer room air immediately after stopping N2O.",
      "B": "Administer 100% oxygen for 5 to 10 minutes after stopping N2O.",
      "C": "Continue N2O for an additional 10 minutes.",
      "D": "Reduce the concentration of N2O gradually over the next 15 minutes."
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Administer 100% oxygen for 5 to 10 minutes after stopping N2O. Explanation: The possible risk associated with N2O stoppage is diffusion hypoxia. Administering 100% oxygen for 5 to 10 minutes after discontinuing nitrous oxide helps to counteract the dilution of alveolar gases, preventing diffusion hypoxia and ensuring adequate oxygenation. Diffusion hypoxia occurs during recovery from anesthesia due to the washout of high concentrations of N2O, leading to lower O2 and CO2 levels in the alveoli, which is called the fink effect. This can cause hypoxemia (low blood oxygen) and hypocarbia (low carbon dioxide), which may suppress respiratory drive and worsen hypoxemia. To prevent diffusion hypoxia, it is recommended to administer 100% O2 for 5 to 10 minutes after stopping nitrous oxide. The alveolar membrane is the main route for eliminating inhalation anesthetics. Factors that speed up induction also enhance recovery, including high fresh gas flows, low circuit volume, and increased ventilation. Administer room air immediately after stopping N2O (Option A) can lead to further dilution of alveolar O2 and CO2, increasing the risk of hypoxemia and respiratory depression. Continuing N2O for an additional 10 minutes (Option C) would not resolve the risk of diffusion hypoxia and would prolong the potential adverse effects. Reducing the concentration of N2O gradually over the next 15 minutes (Option D) does not effectively prevent diffusion hypoxia, and the immediate administration of 100% oxygen is necessary to counteract its effects. Reference: Morgan's and Mikhail's Anaesthesiology, 7th Edition, Pg.288 Barash Clinical Anaesthesia, 9th edition, Pg. 1402",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 15,
    "question": "Which among the following statements explains the concept of Mayer Overton's rule? structure.",
    "options": {
      "A": "The lipid solubility of the agent is directly proportional to the potency of the agent",
      "B": "The rule asserts that all anesthetics act through the same mechanism of action regardless of their",
      "C": "The rule indicates that anesthetics with lower boiling points are more potent.",
      "D": "None of the above"
    },
    "correct_answer": "A",
    "explanation": "agent Correct Answer: A) The lipid solubility of the agent is directly proportional to the potency of the agent Explanation: Meyer Overton rule: Lipid solubility of the agent is directly proportional to the potency of the agent Potency is measured by MAC and is inversely proportional to MAC value. While anesthetics may share some mechanisms, they can have vastly different structures and effects, which the rule does not address (Option B) The boiling point does not correlate with anesthetic potency in the context of the Meyer-Overton rule (Option C) Reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1301419/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  },
  {
    "q_no": 16,
    "question": "During a surgical procedure, the anesthesiologist is monitoring the patient and observes signs of complete respiratory depression, total loss of reflexes, and dilated, non-reactive pupils. According to Guedel’s stages of anesthesia, which stage is the patient most likely in, and what are the implications for airway management?",
    "options": {
      "A": "Stage I (Analgesia)",
      "B": "Stage II (Excitement)",
      "C": "Stage III (Surgical Anesthesia)",
      "D": "Stage IV (Overdose)"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Stage IV (Overdose) Explanation: Stage IV of Guedel’s staging represents overdose/ medullary paralysis and presents with: Respiratory arrest Cardiovascular collapse Dilated, non-reactive pupils Guedel’s Staging: Stage I (Analgesia) (Option A): In this stage, the patient is conscious and can respond to verbal commands. Airway management is typically not necessary as they can maintain their airway. Stage II (Excitement) (Option B): Patients may exhibit erratic breathing and are often agitated. Close monitoring and potential airway interventions may be needed to prevent airway obstruction Stage III (Surgical Anesthesia) (Option C): This is the stage where the patient is deeply unconscious, and controlled ventilation is essential. While airway management is critical, reflexes may still be present. Stage IV (Overdose): Indicates severe respiratory depression and potential cardiovascular instability. Immediate airway intervention and resuscitation are required, as the patient may not be breathing adequately or may be unresponsive.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthetics"
  }
]