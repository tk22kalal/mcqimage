[
  {
    "q_no": 1,
    "question": "Which of the following is true about brain death? independently. present.",
    "options": {
      "A": "Complete loss of cerebral cortical function but preservation of brainstem reflexes.",
      "B": "Irreversible loss of all brain function, including the brainstem, with inability to breathe",
      "C": "Persistent vegetative state where higher brain functions are lost, but spontaneous respiratory effort is",
      "D": "Reversible coma with absence of brainstem reflexes."
    },
    "correct_answer": "B",
    "explanation": "breathe independently. Correct Answer: B) Irreversible loss of all brain function, including the brainstem, with inability to breathe independently. Explanation: Brain death is a permanent, irreversible, and complete loss of brain function (both cerebral and brain-stem functions). Definition of brain death Brain death is a state of irreversible cessation of all cerebral and brain-stem function with preservation of cardiac activity and maintenance of respiratory and somatic function by artificial means. (Option D ruled out) It is the only type of brain damage recognized as morally, ethically, and legally equivalent to death. Complete loss of cerebral cortical function but preservation of brainstem reflexes (Option A): In brain death, there is a total and irreversible loss of all brain functions, including both the cerebral cortex and the brainstem. Hence, this option is incorrect. Persistent vegetative state where higher brain functions are lost, but spontaneous respiratory effort is present (Option C): This statement refers to a persistent vegetative state which is not the same as brain death. Cerebral cortical function is lost, but the brainstem remains functional, allowing for basic reflexes and the ability to breathe spontaneously. Thus, this is true but describes a different condition from brain death. Hence, this option is incorrect for this question. Reference: Harrison’s principle of internal medicine, Edition 21st- Pg No. 188",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 2,
    "question": "A 58-year-old woman is admitted with a traumatic brain injury and is being evaluated for brain death. Her core body temperature is 36.5°C, and her systolic blood pressure is 95 mm Hg despite volume resuscitation. Neuromuscular blocking agents were recently administered. Which of the following should be done before proceeding with the brain death diagnosis? clearance before proceeding.",
    "options": {
      "A": "Administer vasopressors to increase systolic blood pressure above 100 mm Hg and wait for drug",
      "B": "Perform brainstem reflex testing immediately since her core temperature is adequate.",
      "C": "Reduce the temperature to less than 36°C to continue with the exam.",
      "D": "Start administering antidotes for neuromuscular blockade and proceed with the diagnosis."
    },
    "correct_answer": "A",
    "explanation": "and wait for drug clearance before proceeding. Correct Answer: A) Administer vasopressors to increase systolic blood pressure above 100 mm Hg and wait for drug clearance before proceeding. Explanation: Before deciding to proceed with the diagnosis of brain death, several conditions must be evaluated and met. In this scenario, the patient’s systolic BP should be >100 mmHg to meet the criteria, and administering vasopressors would help stabilize the blood pressure t o meet the required threshold. The team must wait for five half-lives of drug clearance (adjusted for the patient's renal and hepatic function) to ensure the drugs (neuromuscular agent) have cleared, as they can interfere with the neurologic exam by paralyzing the patient, falsely mimicking brain death. Pre-evaluation for brain death: Several conditions must be evaluated and met before deciding to proceed with the diagnosis of brain death. The cause of the coma must be identified. Any confounding factors , such as severe metabolic, endocrine, or acid-base abnormalities, should be ruled out and corrected. If drug intoxication or recent use of neuromuscular blocking agents is suspected, it is necessary to wait for five half-lives of drug clearance, adjusted for the patient’s kidney and liver function. (Option B & D ruled out) The patient's core body temperature should be above 36°C. (Option C ruled out) The systolic blood pressure must be higher than 100 mm Hg, with vasopressors administered if required. A neurologic examination suggests widespread cortical destruction that is reflected by deep coma and unresponsiveness to all forms of simulations and should include testing for brainstem reflexes. Reference: Harrison’s principle of internal medicine, 21st Edition, Page 188 Brain Death - StatPearls - NCBI Bookshelf (nih.gov)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 3,
    "question": "A 30-year-old patient is unconscious following a massive intracerebral hemorrhage. Upon neurological examination, the pupils are fixed and dilated at 5 mm, and there is no response to cold caloric testing or corneal stimulation. However, when tracheal suctioning is performed, the patient exhibits a slight cough. Which of the following conclusions is accurate?",
    "options": {
      "A": "Brain death cannot be confirmed due to the presence of the cough reflex.",
      "B": "Brain death can be confirmed as the pupils are fixed and non-reactive.",
      "C": "Brain death can be confirmed, and the cough reflex is a false-positive result.",
      "D": "Cold caloric testing is unreliable in this setting."
    },
    "correct_answer": "A",
    "explanation": "(mediated by the vagus nerve, CN X). Since the patient exhibits a cough response, this suggests that some brainstem function is still intact. Therefore, brain death cannot be confirmed. Brainstem reflexes in a setting of brain death In the clinical examination of a patient undergoing brain death evaluation, all brainstem reflexes must be tested and must be absent to confirm a diagnosis of brain death. (Option A) Brainstem reflex Cranial nerves Findings in brain death patient. Pupillary light reflex II and III Pupils should be fixed, mid-size/dilated (4-9 mm), and not reactive to light. Oculovestibular reflex III, VI, VIII The oculovestibular reflex can be tested using the oculocephalic reflex (Doll's eyes) or caloric testing. In the absent oculocephalic reflex, the eyes move with the head. This test should only be done if the cervical spine is stable. Cold caloric testing involves irrigating one ear with ice water, and an absent reflex is indicated by no eye movement toward the irrigated side within 1 minute. The other ear is tested after 5 minutes. Corneal reflex V and VII Loss of corneal reflex Performed using a cotton swab or drops of water/normal saline. Gag reflex IX Loss of gag reflex Performed after stimulation of bilateral posterior pharyngeal membranes without elevation of the palate. Cough reflex X Loss of cough reflex Confirmed after tracheal suctioning without reaction. Brain death can be confirmed as the pupils are fixed and non-reactive (Option B): The diagnosis of brain death requires the absence of all brainstem reflexes, including the cough reflex, which is still present in this case. Therefore, brain death cannot be confirmed solely based on fixed, non-reactive pupils. Brain death can be confirmed, and the cough reflex is a false-positive result: This statement is false (Option C): The cough reflex is not a false-positive result but an actual brainstem reflex that indicates some remaining brainstem activity. The presence of this reflex means that brain death cannot be confirmed. This option is incorrect. Cold caloric testing is unreliable in this setting: Cold caloric testing is a reliable method for assessing brainstem function. In this case, the absence of response to cold caloric testing suggests brainstem dysfunction. However, since the cough reflex is present, brain death cannot be confirmed. Hence, this option is incorrect. Reference: Brain Death - StatPearls - NCBI Bookshelf (nih.gov)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 4,
    "question": "A 40-year-old male is unconscious following a traumatic brain injury and is being evaluated for brain death. His blood pressure is stabilized with noradrenaline infusion to maintain a systolic BP of 110 mm Hg. The patient is preoxygenated for 10 minutes with 100% FiO2, achieving a PaO2 of 230 mm Hg. The ventilator is disconnected, and 100% FiO2 is administered via insufflation tubing at 6 L/min near the carina. After 10 minutes, no respiratory movements are observed. Arterial blood gas analysis reveals a PaCO2 of 65 mm Hg, and the SpO2 remains at 98% throughout the test. What is the most appropriate conclusion regarding this apnea test?",
    "options": {
      "A": "The apnea test is negative since the patient needs vasopressors.",
      "B": "SpO2 should drop below 90% for a valid apnea test.",
      "C": "The apnea test is positive, indicating brain death.",
      "D": "The apnea test should be extended for another 5 minutes to confirm brain death."
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) The apnea test is positive, indicating brain death. Explanation: In this case, all criteria for a positive apnea test are met, confirming brain death. Apnea test for brain death If clinical evaluation and brain stem reflexes are inconclusive: Stimulate the brain stem with an apnea test. This test analyses whether the patient is brain dead or not by temporarily terminating the ventilator support or breathing. Preparation of Apnea Test: Pre-evaluation for brain death should be done and corrected if any abnormalities are detected. Vasopressors should be adjusted to maintain a SBP ≥ 100 mmHg. (Option A ruled out) Procedure of Apnea Test: Note: If PaCO 2 rise is <20 mmHg after 10 mins of providing apnea: Redo the apnea test or do ancillary tests. (Option D ruled out) The apnea test has to be discontinued if: Presence of any respiratory movement (abdominal or chest excursions or brief gasp). SBP decreases to <90 mm Hg. Oxygen saturation is less than 85% for more than 30 seconds. (Option B ruled out)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 5,
    "question": "A 45-year-old patient is suspected of having brain death after a severe head injury. The clinical evaluation is incomplete due to confounding factors. Which of the following ancillary tests is considered the gold standard for assessing cerebral blood flow in determining brain death?",
    "options": {
      "A": "Computed Tomography (CT) Angiography",
      "B": "Four-vessel angiography",
      "C": "Magnetic Resonance Angiography (MRA)",
      "D": "Electroencephalogram (EEG)"
    },
    "correct_answer": "B",
    "explanation": "determination of brain death. Types of Ancillary Tests Category Tests Purpose Traditional Tests Four-vessel angiography Gold standard to assess brain blood flow Radionuclide imaging Evaluates cerebral blood flow Emerging Tests CT Angiography Visualizes brain blood vessels CT Perfusion Measures dynamic blood flow in the brain Magnetic Resonance Angiography (MRA) Creates images of blood vessels using magnetic fields Xenon CT Assesses cerebral blood flow with xenon gas Functional & Electrodiagnostic Tests Transcranial Doppler Testing Measures blood flow velocity in cerebral arteries Electroencephalogram (EEG) Records brain's electrical activity Evoked Potentials Measures brain's electrical response to stimuli Objectives of Ancillary Testing Validate test accuracy compared to: Clinical diagnosis Four-vessel angiography Radionuclide imaging Assess prevalence of: False negatives: Incorrectly not declaring brain death False positives: Incorrectly declaring brain death Evaluate the safety profiles of these tests. CT Angiography (Option A) is an emerging test used to visualize brain blood vessels but is not the gold standard. MRA (Option C) uses magnetic fields to image blood vessels but is not the gold standard. EEG (Option D) measures brain electrical activity and is used to evaluate brain function, but it is not a test for blood flow and not the gold standard for determining brain death. Reference: https://pubmed.ncbi.nlm.nih.gov/32648194/ https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3828391/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 6,
    "question": "A 30-year-old patient requires conscious sedation for a dental procedure. The anesthesiologist considers various agents for this purpose. Which of the following drugs is commonly preferred for inducing moderate sedation due to its favorable safety profile and effectiveness in achieving anxiolysis without significant cardiopulmonary complications?",
    "options": {
      "A": "Propofol",
      "B": "Dexmedetomidine",
      "C": "Midazolam",
      "D": "Methohexital"
    },
    "correct_answer": "C",
    "explanation": "favorable safety profile and minimal cardiopulmonary effects. Conscious sedation: known as procedural sedation and/or moderate sedation, is a procedure to relieve anxiety and depress the level of consciousness in patients, before minor procedures. Drug of Choice for Conscious Sedation: Midazolam : Commonly used for moderate sedation in dental and ambulatory procedures Provides anxiolysis and sedation with minimal cardiopulmonary complications Has a strong safety profile Other drugs: Drugs Disadvantages Propofol May cause respiratory depression Decreases BP/CVS depression (Option A ruled) Etomidate E–Endocrine gland Suppression of the adrenal gland (Endocrine) Myoclonus Ketamine Kap on his Head Emergence delirium (because increases cerebral blood flow) Excessive bronchial secretions and salivation Hypertension Increase ICP Dexmedetomidine Hypotension Bradycardia (Option C ruled out) Methohexital Suppression of respiration (Option D ruled out) Reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5672508/ https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5005095/ https://pubmed.ncbi.nlm.nih.gov/30124543/ https://www.medicinenet.com/what_drugs_are_used_for_conscious_sedation/drug-class.htm",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  },
  {
    "q_no": 7,
    "question": "Which of the following statements about non-operating room anesthesia (NORA) is false?",
    "options": {
      "A": "NORA can be safely performed in outpatient clinics with trained personnel.",
      "B": "Airway management complications are less common in NORA than in operating rooms.",
      "C": "NORA requires specific sedation techniques based on procedure complexity.",
      "D": "Midazolam is the commonly used agent, owing to its safety profile."
    },
    "correct_answer": "B",
    "explanation": "rooms. Non-Operating Room Anesthesia (NORA) NORA involves sedation and anesthesia for procedures outside traditional operating rooms, increasingly utilized in settings like radiology suites and outpatient clinics. (Option A ruled out) Key Aspects of NORA Growing Demand Increased patient visits Complex procedures Greater emphasis on pain management Anesthesia providers managing sedation in diverse environments Challenges Inadequate Support : Limited staff and resources compared to operating rooms Airway Management Risks : Higher incidence of airway complications requiring vigilant monitoring (Option B) Sedation Techniques Selection based on: (Option C ruled out) Procedure type Expected pain levels Patient characteristics (age, comorbidities) Required sedation depth Common Agents Used Midazolam : Rapid onset, safety profile (Option D ruled out) Propofol : Quick recovery, necessitates careful airway monitoring Safety Considerations Major complications are rare when managed by trained personnel Ongoing evaluation of complication rates and mortality as procedures grow more complex Future Trends Continued expansion of NORA practices Development of standards to improve safety and efficacy Reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6761785/ https://pubmed.ncbi.nlm.nih.gov/34074883/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Brain Death-Brain Death"
  }
]