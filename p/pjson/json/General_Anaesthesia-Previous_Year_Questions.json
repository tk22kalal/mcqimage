[
  {
    "q_no": 1,
    "question": "Which drug is used to reverse the muscle relaxant effects of vecuronium when renal function is normal?",
    "options": {
      "A": "Sugammadex",
      "B": "Neostigmine",
      "C": "Atropine",
      "D": "Physostigmine"
    },
    "correct_answer": "A",
    "explanation": "and reverses its effects. It is particularly useful in patients with normal renal function and is known for its rapid action. Incorrect Options: Options B, C, and D are not preferred in a reversal of vecuronium.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 2,
    "question": "A 25-year-old patient undergoing orthopedic surgery who underwent general anesthesia suddenly developed a rise in EtCO2, temperature, and also muscle rigidity. Which of the following drugs leads to such complications?",
    "options": {
      "A": "Propofol",
      "B": "Nitrous oxide",
      "C": "Etomidate",
      "D": "Halothane"
    },
    "correct_answer": "D",
    "explanation": "reaction to certain anesthetic agents, including halothane. It is characterized by increased EtCO2, hyperthermia, and muscle rigidity. Incorrect Options: Options A, B, and C are not associated with malignant hyperthermia.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 3,
    "question": "Which of the following drugs is used for the reversal of anesthesia?",
    "options": {
      "A": "Neostigmine",
      "B": "Atropine",
      "C": "Glycopyrrolate",
      "D": "Midazolam"
    },
    "correct_answer": "A",
    "explanation": "of neuromuscular blockade. Neostigmine is a cholinesterase inhibitor that increases acetylcholine levels by blocking the enzyme acetylcholinesterase, enhancing nerve transmission. Uses: Myasthenia Gravis : Improves muscle strength by enhancing neuromuscular transmission. Reversal of Neuromuscular Blockade : Reverses muscle paralysis from certain anesthetics after surgery. Postoperative Urinary Retention : Stimulates bladder function. Anticholinergic Toxicity : Helps treat toxicity from anticholinergic drugs. Side Effects: Muscarinic effects : Bradycardia, hypotension, excessive salivation, nausea, diarrhea. Nicotinic effects : Muscle weakness, twitching, respiratory issues (in overdose). Cholinergic Crisis : Overdose can cause severe muscle weakness and respiratory distress. Incorrect Options: Atropine & Glycopyrrolate (Options B and C) are used to manage bradycardia and to reduce secretions and are not used for reversing neuromuscular blockade Midazolam (Option D): Benzodiazepine is not used as a reversal agent. Reference: Miller’s Anaesthesia, 9th Edition, Page 345, 346",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 4,
    "question": "Inhalational induction of choice in children is:",
    "options": {
      "A": "Sevoflurane",
      "B": "Desflurane",
      "C": "Halothane",
      "D": "Isoflurane"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Sevoflurane Explanation: The preferred method for inducing anesthesia through inhalation in children is Sevoflurane. Sevoflurane Properties Sevoflurane is a fluorinated ether with low blood solubility ( λ b/g 0.65), allowing for rapid induction and emergence. Its non-pungency makes it suitable for inhalation induction, especially in pediatric patients. It is used with conventional vaporizers. Uses Ideal for smooth and rapid inhalation induction, particularly in daycare procedures (4-8% concentration with nitrous oxide and oxygen). It is commonly used for both pediatric and adult anesthesia. C/I Should be avoided in cases of severe hypovolemia, susceptibility to malignant hyperthermia, and intracranial hypertension. Systemic Effects Cardiovascular Mild myocardial depression with slight reduction in systemic vascular resistance and blood pressure. It causes minimal heart rate increase and may prolong the QT interval. Hepatic Decreases portal vein flow but increases hepatic artery flow, maintaining overall hepatic perfusion. Renal Slightly decreases renal blood flow but has no known association with significant renal toxicity. Compound A , a degradation product of sevoflurane, is nephrotoxic in animals but has no known adverse effects on humans. Neuromuscular Provides adequate muscle relaxation for intubation but is often combined with other agents or muscle relaxants. Cerebral Slight increases in cerebral blood flow (CBF) and intracranial pressure. High concentrations may impair CBF autoregulation. Seizures have not been reported. Respiratory Depresses respiration and helps reverse bronchospasm. Thus agent of choice in asthmatics. Reference: Morgan's and Mikhail's Anaesthesiology - 7th Edition. Pg. 312-315 (PDF)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 5,
    "question": "Arrange the following agents on the basis of their potency. Nitrous Oxide Halothane Isoflurane Methoxyflurane Halothane > Isoflurane",
    "options": {
      "A": "Methoxyflurane > Halothane > Isoflurane > Nitrous Oxide",
      "B": "Methoxyflurane > Isoflurane > Halothane > Nitrous Oxide",
      "C": "Methoxyflurane > Nitrous Oxide > Halothane > Isoflurane Methoxyflurane > Nitrous Oxide >",
      "D": "Methoxyflurane > Nitrous Oxide > Halothane > Isoflurane"
    },
    "correct_answer": "A",
    "explanation": "inhalational anesthetic agents is measured by their Minimum Alveolar Concentration (MAC) . A lower MAC value indicates higher potency because less anesthetic is required to achieve anesthesia. Methoxyflurane : The most potent inhalational anesthetic with the lowest MAC value. Halothane : More potent than isoflurane but less potent than methoxyflurane. Isoflurane : Has a higher MAC than halothane, indicating lower potency. Nitrous Oxide : Has the highest MAC (over 100%), making it the least potent anesthetic. Minimum Alveolar Concentration (MAC) is a measure used to compare the potency of inhalational anesthetic agents. It is defined as: The alveolar concentration of an anesthetic at 1 atmosphere of pressure that prevents movement in 50% of patients in response to a standard surgical stimulus, such as a skin incision. Key Points about MAC: Inverse Relationship with Potency : Lower MAC = Higher potency (less anesthetic needed to achieve the desired effect). Higher MAC = Lower potency (more anesthetic required). Factors Affecting MAC : Age : MAC decreases with age. Body temperature : Hypothermia reduces MAC. Concurrent medications : Drugs like opioids and benzodiazepines decrease MAC. Physiological state : Pregnancy and certain conditions (e.g., hypoxia, hypotension) lower MAC. Alcohol : Acute alcohol intake reduces MAC, while chronic use increases it. Clinical Use : MAC is used to determine the dosing of inhalational anesthetics. For surgical anesthesia, a concentration higher than MAC (e.g., 1.2–1.5 MAC) is typically used to ensure immobility in nearly all patients. MAC Values for Common Agents (Approximate): Nitrous Oxide : >100% (very low potency) Methoxyflurane : 0.16% (extremely high potency) Halothane : 0.75% Isoflurane : 1.15% Reference: Miller’s Anaesthesia, Edition 9, Pg 551",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 6,
    "question": "What is the most likely cause of a young patient experiencing desaturation and bilateral basal crepitations shortly after undergoing surgery with general anesthesia using 02, Nitrous oxide, and Desflurane?",
    "options": {
      "A": "ARDS",
      "B": "Pleural effusion",
      "C": "Negative pressure pulmonary oedema",
      "D": "Atelectasis"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Negative pressure pulmonary oedema Explanation: The most likely cause of desaturation and bilateral basal crepitations in a young patient shortly after undergoing surgery with general anesthesia using O2, nitrous oxide, and desflurane is Negative Pressure Pulmonary Edema (NPPE). NPPE can occur when there is significant negative intrathoracic pressure, often due to upper airway obstruction or laryngospasm post-extubation. The presentation of Laryngospasm: Chest movement with limited airflow at the mouth or nose and limited bag movement Silence or stridor Body movements; engorged neck veins Intercostal retraction Tracheal tug Paradoxical breathing Desaturation Bradycardia Cyanosis Absence of ETCO2 on capnography Extubation: Factors associated with increased risk Complications Airway risk factors Known difficult airway Airway deterioration (bleeding, edema, trauma) Restricted airway access Obesity and obstructive sleep apnea Cardiovascular disease Respiratory disease Neuromuscular disease Special surgical requirements Laryngospasm Bronchospasm Negative pressure pulmonary edema Hypoventilation Aspiration Paradoxical vocal cord motion Upper airway obstruction Laryngeal edema Arytenoid dislocation ARDS, pleural effusion, and atelectasis (Options A, B, and D): are also potential causes, but the rapid onset and specific clinical presentation of NPPE due to laryngospasm make NPPE the most likely diagnosis. Reference: https://pdfs.semanticscholar.org/0e45/10a17eb759aee2cd3514c6cfd9717068a468.pdf https://pmc.ncbi.nlm.nih.gov/articles/PMC3134440/#",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 7,
    "question": "The following are non depolarizing muscle relaxants except?",
    "options": {
      "A": "Pancuronium",
      "B": "Rocuronium",
      "C": "Suxamethonium",
      "D": "Vecuronium"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Suxamethonium Explanation: Suxamethonium (Succinylcholine) is a depolarizing neuromuscular blocker, while Pancuronium, Rocuronium, and Vecuronium are non-depolarizing muscle relaxants. Neuromuscular Blocking Agents (NMBAs) Type Examples Mechanism of Action Duration Reversal Depolarizing NMBAs Suxamethonium (Succinylcholine) Binds to nicotinic receptors at the neuromuscular junction, causing persistent depolarization and temporary paralysis Ultra-short acting (5-10 min) Not reversed by neostigmine ; metabolized by plasma cholinesterase Non-Depolarizing NMBAs Pancuronium, Rocuronium, Vecuronium, Atracurium, Cisatracurium Competitively inhibit ACh binding at nicotinic receptors, preventing depolarization and muscle contraction Short (Rocuronium, Vecuronium), Intermediate, or Long-acting (Pancuronium) Reversed by neostigmine or sugammadex (for steroidal NMBAs) Pancuronium (Option A): Incorrect because it is a non-depolarizing, long-acting muscle relaxant. Rocuronium (Option B): Incorrect because it is a non-depolarizing, intermediate-acting muscle relaxant. Vecuronium (Option D): Incorrect because it is a non-depolarizing, intermediate-acting muscle relaxant. Reference: Miller’s Anaesthesia, 9th Edition, Page 334, 343, 793, 796, 797, 798",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 8,
    "question": "Which of the following structures are not pierced during epidural anesthesia?",
    "options": {
      "A": "Supraspinous ligament",
      "B": "Interspinous ligament",
      "C": "Ligamentum flavum",
      "D": "Dura"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Dura Explanation: Dura is not pierced during epidural anesthesia. The local anesthetic is injected using a Tuohy needle into the epidural space which lies between dura and ligamentum flavum and the site of action is the nerve roots. Structures pierced to reach epidural space: (Options A, B, and C)",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/General_Anaesthesia-Previous_Year_Questions_Q8_exp.png",
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 9,
    "question": "Which of the following can be used for induction of anesthesia, maintenance and can be safely used in endotracheal intubation?",
    "options": {
      "A": "Halothane",
      "B": "Desflurane",
      "C": "Sevoflurane",
      "D": "Isoflurane"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Sevoflurane Explanation: Sevoflurane is widely used for both induction and maintenance of anesthesia. It is less pungent than other agents, making it suitable for inhalational induction, and it provides smooth intubation conditions. Its rapid onset and offset properties also make it ideal for both induction and maintenance phases. Sevoflurane Properties Sevoflurane is a fluorinated ether with low blood solubility ( λ b/g 0.65), allowing for rapid induction and emergence. Its non-pungency makes it suitable for inhalation induction, especially in pediatric patients. It is used with conventional vaporizers. Uses Ideal for smooth and rapid inhalation induction, particularly in daycare procedures (4-8% concentration with nitrous oxide and oxygen). It is commonly used for both pediatric and adult anesthesia. C/I Should be avoided in cases of severe hypovolemia, susceptibility to malignant hyperthermia, and intracranial hypertension. Systemic Effects Cardiovascular Mild myocardial depression with slight reduction in systemic vascular resistance and blood pressure. It causes minimal heart rate increase and may prolong the QT interval. Hepatic Decreases portal vein flow but increases hepatic artery flow, maintaining overall hepatic perfusion. Renal Slightly decreases renal blood flow but has no known association with significant renal toxicity. Compound A , a degradation product of sevoflurane, is nephrotoxic in animals but has no known adverse effects on humans. Neuromuscular Provides adequate muscle relaxation for intubation but is often combined with other agents or muscle relaxants. Cerebral Slight increases in cerebral blood flow (CBF) and intracranial pressure. High concentrations may impair CBF autoregulation. Seizures have not been reported. Respiratory Depresses respiration and helps reverse bronchospasm. Thus agent of choice in asthmatics. Halothane (Option A): It is primarily used for the maintenance of anesthesia and is not recommended for induction due to its potential for hepatotoxicity and its undesirable side effects. Halothane is also associated with a higher risk of cardiac arrhythmias than other inhalation anesthetics. Desflurane (Option B): is a volatile inhalation anesthetic that is primarily used for the maintenance of anesthesia. It has low blood-gas solubility and a rapid onset and offset, making it suitable for long surgical procedures. However, desflurane has a pungent odor that can cause airway irritation and coughing, making it less suitable for induction and endotracheal intubation. Isoflurane (Option D): is a volatile inhalation anesthetic that is commonly used for the maintenance of anesthesia. It has a good safety profile and provides a smooth anesthetic depth. However, it is not the ideal choice for induction due to its slower onset than sevoflurane Reference: Morgan's and Mikhail's Anaesthesiology - 7th Edition. Pg. 312-315 (PDF)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 10,
    "question": "What is the most frequent reason for hospital admission following daycare surgery?",
    "options": {
      "A": "Respiratory distress",
      "B": "Post-surgical pain",
      "C": "Postoperative nausea and vomiting",
      "D": "Bleeding"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Postoperative nausea and vomiting Explanation: The most frequent reason for hospital admission following daycare surgery is: Postoperative nausea and vomiting Daycare surgery: Also known as same-day, outpatient, or ambulatory surgery, involves procedures where patients are admitted and discharged within a 12-hour period. Key aspects: Advantages: Reduced healthcare costs due to elimination of overnight hospital stays. Decreased risk of hospital-acquired infections. Increased patient comfort and satisfaction by recovering at home. Patient Selection Criteria: Generally healthy individuals (ASA I or II). Procedures with minimal anticipated postoperative complications. Availability of a responsible adult at home for post-discharge care. Common Procedures: Carpal tunnel release. Dental extractions. Postoperative Care: Monitoring in a recovery area until anesthesia effects diminish. Provision of discharge instructions, including signs of complications. Scheduled follow-up appointments to ensure proper recovery. In daycare (ambulatory) surgery, the most common postoperative complication: PONV Postoperative Nausea and Vomiting (PONV): Category Details Risk factors Female gender Non-smoker History of PONV/motion sickness Post-op opioid Intra-op modifications Use Propofol (antiemetic) Use Nitrogen (N) instead of Nitrous Oxide (N I O) Use Remifentanil (least incidence of PONV) Drug of Choice Ondansetron (4-8 mg) Anticholinergics (e.g., Scopolamine) Steroids (e.g., Dexamethasone) Reference: https://pmc.ncbi.nlm.nih.gov/articles/PMC3216269/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 11,
    "question": "Glycopyrrolate is used as a preanesthetic agent for:",
    "options": {
      "A": "Reducing the secretions",
      "B": "Sedative effect",
      "C": "Skeletal muscle relaxant",
      "D": "Anxiolytic"
    },
    "correct_answer": "A",
    "explanation": "medication that reduces airway secretions and minimizes bronchospasm by blocking acetylcholine at muscarinic receptors . It is especially important for asthmatic patients at risk of increased secretions and bronchoconstriction. Pre-Op medications: Class of Medication Common Drugs Use Anxiolytics (Option D ruled out) Midazolam , Lorazepam , Diazepam, Ketamine (pediatrics) Preoperative anxiety reduction Midazolam is preferred for adults due to short half-life and potency. Avoid premedication in pediatric patients < 6 months. Antiemetics Ondansetron, Dexamethasone, Metoclopramide , Droperidol, Transdermal Scopolamine Prevention of postoperative nausea and vomiting (PONV) Aspiration Prophylaxis H2-Receptor Blockers (Ranitidine), Proton Pump Inhibitors (PPIs) Reduce risk of pulmonary aspiration Effective in reducing gastric acidity and volume. Recommended for patients with conditions like GERD, obesity, or non-fasted status Antibiotics Infection prevention at surgical sites Anticholinergic Glycopyrrolate To reduction of secretions (Option A) Analgesics Fentanyl (Option D) , NSAIDs (Celecoxib) Pain management, opioid dependency Fentanyl is preferred for rapid clearance and potency. - NSAIDs may be given preoperatively to reduce pain. Reference: Morgan and Mikhail’s Clinical Anesthesiology, 7th edition, Pg no. 516, 555 Basic Anesthesia Review Edited by Alaa Abd-Elsayed pg no. 235, 236, 237",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 12,
    "question": "During recovery from anesthesia, a patient started experiencing hallucinations and vivid dreams. Which inducing agent is most likely responsible?",
    "options": {
      "A": "Ketamine",
      "B": "Propofol",
      "C": "Thiopentone",
      "D": "Etomidate"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Ketamine Explanation: Ketamine is the most likely inducing agent responsible for the patient's hallucinations and vivid dreams. It is known to cause emergence reactions, such as hallucinations, delirium, and vivid dreams, particularly during the recovery phase. These reactions are more common in adult patients and can be distressing, but are typically short-lived. Incorrect Options: Propofol (option B) is known for its smooth induction and recovery profiles. It typically does not cause hallucinations or vivid dreams. In fact, it has anti-emetic properties and is preferred for minimizing post-operative nausea and discomfort. Thiopentone (option C) is a barbiturate that is commonly used for induction. While it has a rapid onset, it does not typically cause hallucinations or vivid dreams. Its longer duration of action may result in a more prolonged recovery, but not in the same manner as ketamine. Etomidate (option D) is generally associated with less frequent emergence reactions compared to ketamine. It is favoured in patients at risk for hemodynamic instability, but it does not typically cause hallucinations or vivid dreams. Reference: Miller’s Anesthesia, 8th Edition, Page 848",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  },
  {
    "q_no": 13,
    "question": "How do local anesthetics work?",
    "options": {
      "A": "Block sodium channels",
      "B": "Block potassium channels",
      "C": "Block calcium channels",
      "D": "Block chloride channels"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Block sodium channels Explanation: Local anesthetics work by blocking sodium channels in the nerve cells. This action inhibits the influx of sodium ions during depolarization, preventing the generation and propagation of action potentials along nerve fibers. Without the ability to generate action potentials, the sensation of pain (or any other nerve signal) is blocked, leading to a localized numbing effect. Incorrect Options: Block potassium channels (option B): Potassium channels play a role in repolarizing the membrane after an action potential. While important in the process of nerve conduction, local anesthetics primarily target sodium channels rather than potassium channels to block nerve transmission. Block calcium channels (option C): Calcium channels are involved in neurotransmitter release at synapses, but they are not the primary target of local anesthetics. While calcium ions are involved in nerve signaling, local anesthetics specifically block sodium channels to prevent the initiation and propagation of action potentials. Block chloride channels (option D): Chloride channels are involved in maintaining the resting membrane potential and controlling cell volume, but they are not directly blocked by local anesthetics. The primary mechanism of local anesthetics is the blockade of sodium channels. Reference: Morgan and Mikhail’s Clinical Anaesthesia, 5th Edition, Page 264- 266",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "General Anaesthesia-Previous Year Questions"
  }
]