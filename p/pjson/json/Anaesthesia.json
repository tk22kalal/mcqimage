[
  {
    "q_no": 1,
    "question": "Refer to the readings depicted in the image. Which statement is inaccurate based on these readings?",
    "options": {
      "A": "76% is due to shivering",
      "B": "76% is due to Methemoglobinemia",
      "C": "76% is due to Carboxyhemoglobinemia",
      "D": "76% is due to Peripheral Vasoconstriction"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) 76% is due to Carboxyhemoglobinemia Explanation: The given image shows a pulse oximetry with a low SpO2. Out of 4 options, only carboxyhemoglobin can show false high readings, not",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Q1_q.png",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 2,
    "question": "Which combination of ECG leads is considered the best for diagnosing intraoperative myocardial ischemia?",
    "options": {
      "A": "Leads I, II, and III",
      "B": "Leads II, V4, and V5",
      "C": "Leads V1, V2, and V3",
      "D": "Leads aVR, aVL, and aVF"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Leads II, V4, and V5 Explanation: Leads II, V4, and V5 are optimal for detecting intraoperative myocardial ischemia. CARDIAC MONITORING Blood Pressure Monitoring Non-invasive: Via sphygmomanometer. Invasive: Catheter placement in radial or femoral artery. ECG Monitoring 12 Leads: Leads II and V5 are crucial. Lead II: Detects intraoperative arrhythmias. Lead V5: Detects ischemia. Transesophageal Echocardiography (TEE) Indication: Essential for major cardiac surgeries. Key Benefit: Most sensitive and reliable for detecting venous air embolism. Important Points: Radial Artery: The most commonly used artery for invasive arterial monitoring. Allen’s Test: Checks the patency of collateral circulation of the hand. Best ECG Lead Combination: Leads II, V4, and V5 for intraoperative myocardial ischemia monitoring. Central Venous Catheter Position: Ideal tip position at the junction of the superior vena cava (SVC) and right atrium. Pulmonary Artery (PA) Catheter: Measures Pulmonary Capillary Wedge Pressure (PCWP), the best indicator of Left Ventricular End Diastolic Pressure (LVEDP).",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 3,
    "question": "Which of the following is the correct function of the shown image?",
    "options": {
      "A": "Monitor Intracardiac pressures",
      "B": "Infuse solutions",
      "C": "Measure Temperature",
      "D": "All of the above"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) All of the above Explanation: The given image is of the Swan-Ganz catheter. These catheters monitor intracardiac pressures, and cardiac output, provide infusing solutions, and measure temperature. Temperature Monitoring in General Anesthesia Importance: Essential for detecting malignant hyperthermia and quantifying hyperthermia/hypothermia. Common Disturbance: Inadvertent hypothermia is the most prevalent thermal issue during surgery. Thermoregulatory Control: General anesthetics significantly impair the body's ability to regulate temperature. Core Temperature Measurement: Always monitor core temperature during anesthesia. Preferred Measurement Sites: Pulmonary Artery (Best site) Monitored via Swan-Ganz catheter. Tympanic Membrane Oesophagus Nasopharynx Monitoring Requirements Major Surgeries: Core temperature monitoring is essential during major surgical procedures.",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Q3_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 4,
    "question": "Postoperatively, a patient reports feeling pain and recalling specific details from the operating room, during the procedure. Which of the following has no relevance to prevent this issue in the future?",
    "options": {
      "A": "Patient state analyzer",
      "B": "Visual Evoked Potentials",
      "C": "Evan's Score",
      "D": "Anxiolytics before anesthesia induction"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Anxiolytics before anesthesia induction Explanation: This is a case of Awareness during surgery While anxiolytics can help with preoperative anxiety, they have no relevance in preventing intraoperative awareness. Other options hold relevance in measuring the depth of anesthesia, which in turn leads to less intraoperative awareness. Awareness During Surgery (Light anesthesia): Patients recovering from surgery often express that they recall conversations and they were able to feel but were unable to move during the procedure. Reasons for Awareness Insufficient inhalational agent No inhalational agent in vaporizer Depth of Anesthesia Monitoring Purpose: To prevent: Very deep anesthesia (delayed emergence, cardiovascular complications ) Light anesthesia (post-traumatic stress disorder) Methods of Monitoring Depth of Anesthesia Clinical Techniques Clinical Signs: PRST or Evan's Score (Option C): P: Systolic blood Pressure R: Heart Rate S: Sweating T: Tears Isolated Forearm Technique: Tourniquet applied to upper arm before muscle relaxants. Movement indicates wakefulness (not necessarily explicit awareness). Brain Electrical Activity Monitoring Spontaneous EEG Activity Monitors: Bispectral Index Entropy Narcotrend Patient State Analyzer (Option A) Evoked Brain Electrical Activity Monitors: Somatosensory Evoked Potentials (SSEP) Visual Evoked Potentials (VEP) (Option B) Auditory Evoked Potentials (AEP) Reference: https://www.ijca.in/html-article/10085",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 5,
    "question": "Which of the following is an incorrect statement for the image below?",
    "options": {
      "A": "The higher the value lower the awareness",
      "B": "Elevated EEG is seen in Ketamine",
      "C": "Depressed EEG is seen in COPD",
      "D": "Nitrous oxide shows elevated EEG"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) The higher the value lower the awareness Explanation: The given image shown is of Bispectral index (BIS). Higher values on BIS indicate higher awareness Bispectral Index (BIS) Monitoring Setup: EEG connected to the patient’s frontal area. BIS is calculated based on EEG activity. BIS Values: (Option A) 100: Full Awareness 65 to 85: Moderate Sedation 40 to 65: Fully Anesthetized (adequate depth of anaesthesia) < 40: Cortical Depression or Deep Hypnotic State Depressed EEG Observations: Anesthetized Patients (IV induction and inhalational agents) Hypoxia or Hypercarbia (e.g., COPD) (Option C ruled out) Elevated EEG Observations: Ketamine (Option B ruled out) Nitrous Oxide (N I O) - has a low MAC value (Option D ruled out)",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Q5_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 6,
    "question": "Which of the following is the most common nerve-muscle combination tested?",
    "options": {
      "A": "Ulnar Nerve & Adductor Pollicis Muscle",
      "B": "Ulnar Nerve & Abductor Pollicis Muscle",
      "C": "Radial Nerve & Adductor Pollicis Muscle",
      "D": "Radial Nerve & Abductor Pollicis Muscle"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Ulnar Nerve & Adductor Pollicis Muscle Explanation: The most commonly tested pair in neuromuscular testing is Ulnar Nerve & Adductor Pollicis Muscle. Importance of Neuromuscular Monitoring Improved Intubation Quality: Enhances intubation safety and reduces airway injury. Residual Neuromuscular Block Identification: Helps detect residual weakness even after reversal of neuromuscular blockers (NMBAs). Complication prevention: Reduces the risks of – Pharyngeal dysfunction Aspiration and pneumonia Acute respiratory events (hypoxemia, airway obstruction) Need for re-intubation Patient and surgeon discomfort Prolonged PACU stay Optimized Reversal Strategies: Guides choice and dosage of reversal agents (e.g., anticholinesterases, sugammadex) based on monitoring results. Indications: Prolonged infusions or use of long-acting NMBAs Extended surgery or anesthesia duration Patients with: Severe respiratory disease Morbid obesity Cardiac issues (tachyarrhythmias, heart failure) Liver or renal dysfunction (altered pharmacokinetics) Neuromuscular disorders (e.g., myasthenia gravis) Common Nerve-Muscle Combinations: Ulnar Nerve & Adductor Pollicis Muscle (most common) (Option A) Facial Nerve & Orbicularis Oculi Muscle (second most common) Other nerves used: Common peroneal nerve . Reference: Miller's Anesthesia, 9th Edition, Page 771 https://www.sciencedirect.com/science/article/abs/pii/S1472029917300681 https://intraoperativeneuromonitoring.com/train-of-four/",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Q6_q.png",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 7,
    "question": "A 65-year-old male patient is undergoing major abdominal surgery under general anesthesia. After induction of anesthesia, the patient's CVP is measured at 3 cm H2O. The patient’s heart rate is 110/min, blood pressure is 80/50 mmHg. Which of the following is the most appropriate initial management step based on the CVP and clinical findings?",
    "options": {
      "A": "Administer vasopressors",
      "B": "Administer a fluid bolus",
      "C": "Transfuse blood",
      "D": "Increase the anesthetic depth"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Administer a fluid bolus Explanation: Low CVP (3 cm H2O) suggests hypovolemia , which is consistent with the patient's tachycardia and hypotension. Administering a fluid bolus is the first-line treatment to increase preload and improve hemodynamics. Central Venous Pressure (CVP) Monitoring: CVP measures the pressure in the thoracic vena cava near the right atrium, reflecting right ventricular preload and overall fluid status. Measurement Method (Invasive): Central venous catheter placed in large veins (e.g., subclavian or internal jugular), connected to a pressure transducer Normal Range: 3-8 mmHg. Low CVP Causes: Hypovolemia (blood loss or dehydration). Venodilation (e.g., in septic shock). Elevated CVP Causes: Heart failure, fluid overload, valve dysfunction. Increased intrathoracic pressure (e.g., mechanical ventilation, tension pneumothorax). Clinical Use: Guides fluid resuscitation. Helps assess heart function and venous return. Vasopressors (Option A) may be required if hypotension persists after adequate fluid resuscitation, but not as the initial step. Blood transfusion (Option C) is not indicated unless there is evidence of blood loss or anemia. Increasing anesthetic depth (Option D) is inappropriate here, as the patient is likely hypovolemic. Reference: Miller’s Anesthesia, 9th Edition, Page 1169 -1176 https://www.ncbi.nlm.nih.gov/books/NBK519493/#:~: text=The%20central%20venous%20pressure%20is,be%20zeroed%20to%20atmospheric%20pressure .",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 8,
    "question": "A 40-year-old female patient is undergoing a thyroidectomy under general anesthesia. A Train of Four (TOF) stimulation is performed to monitor neuromuscular function, the result of which is shown below. Which neuromuscular blocking agent was most likely administered?",
    "options": {
      "A": "Succinylcholine",
      "B": "Rocuronium",
      "C": "Vecuronium",
      "D": "Cisatracurium"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Succinylcholine Explanation: The absence of fade with all twitches equally reduced indicates the use of a depolarizing neuromuscular blocking agent, such as Succinylcholine . Train-of-Four (TOF) Pattern of Stimulation: The Train-of-Four (TOF) stimulation pattern is a commonly used method to evaluate neuromuscular function, particularly during anesthesia and in the management of neuromuscular blocking agents. Mechanism: TOF stimulation involves the delivery of four supramaximal electrical stimuli at a frequency of 2 Hz (one stimulus every 0.5 seconds). An interval of at least 10 seconds should be allowed between each set",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 9,
    "question": "Which stimulation pattern is specifically designed to assess deep neuromuscular blockade?",
    "options": {
      "A": "Train-of-Four (TOF) stimulation",
      "B": "Single-Twitch stimulation",
      "C": "Post Tetanic Count (PTC) stimulation",
      "D": "Double-Burst stimulation (DBS)"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Post Tetanic Count (PTC) stimulation Explanation: Post Tetanic Count (PTC) stimulation is used to assess deep levels of neuromuscular blockade that are not detectable by TOF stimulation. Patterns of Nerve Stimulation for the evaluation of the neuromuscular function: Stimulation Pattern Mechanism Interpretation Clinical Implication and Limitation Single-Twitch Stimulation (Option B) Single electrical stimulus applied at a frequency of 0.1 Hz to 1 Hz. Requires comparison to pre-NMBA administration value. Muscle response to the stimulus reflects neuromuscular block onset; changes in twitch height help assess blockade. Used to evaluate onset of neuromuscular block. Limited utility as a standalone test. Train-of-Four (TOF) Stimulation (Option A) Four supramaximal stimuli delivered at 0.5-second intervals (2 Hz). Fade between responses indicates degree of block. TOF count assesses onset . TOF ratio measures recovery . Fade suggests nondepolarizing block. Most common pattern for intraoperative monitoring. Cannot measure deep block or phase I block. Double-Burst Stimulation (DBS) (Option D) Two bursts of 50-Hz stimulation with a 750-ms interval. Fade between the two bursts indicates block. Fade between bursts correlates with TOF ratio. DBS is more sensitive for detecting fade. Better tactile detection of residual block than TOF but cannot reliably assess recovery at higher TOF ratios. Tetanic Stimulation High-frequency stimulation (50-100 Hz for 5 seconds) causing sustained muscle contraction . Fade indicates nondepolarizing block; sustained response suggests normal transmission or depolarizing block. Painful and limited use in practice. May cause lasting muscle antagonism, affecting recovery assessment. Post Tetanic Count (PTC) Stimulation (Option C) Tetanic stimulation (50 Hz for 5 seconds) followed by single twitches at 1 Hz after 3 seconds. Counts discernible twitches after tetanic stimulation; assesses deep block not detectable by TOF. Used for monitoring deep neuromuscular blockade. Requires 6-minute intervals, limiting continuous use. Reference: Miller’s Anesthesia, 9th Edition, Page 1357 - 1360.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 10,
    "question": "Which of the following is incorrect about the given image?",
    "options": {
      "A": "D represents the best reflection of the alveolar CO2",
      "B": "B to C represents CO2 of alveoli mixing with upper airway",
      "C": "A to B represents Dead space ventilation",
      "D": "E is the value seen on the monitor"
    },
    "correct_answer": "D",
    "explanation": "Correct answer: D) E is the value seen on the monitor Explanation: From Phase D to E Inhalation begins CO2 level drops to zero as oxygen fills the airway Point E does not represent the value seen on a capnograph monitor It is Point D, which represents the value seen on a monitor Capnography and Capnometry difference: Capnography: Measures CO I in the airway Provides breath-to-breath status of ventilation. Detects CO I only. Phase I Dead Space Ventilation Beginning of exhalation No CO I present Air from trachea and pharynx No gas exchange occurs here Called dead space ventilation (Option C) Phase II Ascending Phase CO I from alveoli reaches upper airway, mixes with dead space air Causes rapid rise in CO I concentration. (Option B) Phase III Alveolar Plateau Majority of exhaled air is CO I -rich Uniform CO I concentration End-Tidal Highest CO I concentration is the end-tidal value. This is the value you see on the monitor Normal EtCO2 is 35 35-45mmHg Best reflection of Alveolar CO2 (Option A) Phase IV Descending Phase Inhalation begins CO I level",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  },
  {
    "q_no": 11,
    "question": "A 62-year-old male with asthma presents to the emergency department with worsening shortness of breath and wheezing. He is placed on supplemental oxygen and bronchodilators. What is the most likely Capnographic waveform for this patient? A. B. C. D.",
    "options": {},
    "correct_answer": "C",
    "explanation": "appearance. This occurs in Bronchospasms (asthma, COPD exacerbation), partially obstructed ET tube, or breathing circuit. Different Types of Capnographic Waveforms: A normal wave in controlled mechanical ventilation Normal wave during spontaneous breathing Bronchospasm (asthma, COPD exacerbation) / partially obstructed ET tube or breathing circuit Shark fin appearance Spontaneous breathing effort during controlled mechanical ventilation (Curare notch) Curare cleft, or notch, is seen during spontaneous ventilation. Patients partially paralyzed with muscle relaxants may make respiratory efforts at any time during the respiratory cycle with controlled ventilation. As the muscle relaxant is reversed, the curve becomes normal in shape. (Option D ruled out) Role in Intubation: End tidal is used as the gold standard for confirmation of endotracheal tube position. Esophageal intubation can initially produce an EtCO2 due to gastric CO2 however this should taper after a few breaths. Right main-stem intubation may still have a normal EtCO2, so get a CXR to confirm optimal tube positioning. Role during Cardiac Arrest: EtCO2 > 20 suggests good quality CPR. If it starts to drop, consider switching compressors or making sure the LUCUS is in the appropriate position. A sudden increase in EtCO2 greater than 10 from the patient’s baseline can be an early indication of ROSC. Hypoventilation (Option A ruled out) Hyperventilation (Option B ruled out) Flat Capnogram: Sudden and abrupt fall of EtCO2 to zero can be seen in: Accidental extubation (most common ) Disconnection of CO2 transducer Sudden cardiac arrest Massive pulmonary embolism",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia"
  }
]