[
  {
    "q_no": 1,
    "question": "Schimmelbusch mask is an equipment used in the past to deliver liquid volatile anesthetics. What kind of breathing system is this?",
    "options": {
      "A": "Open",
      "B": "Closed",
      "C": "semi -open",
      "D": "Semi-closed"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Open Explanation: Open breathing systems have no reservoir breathing bag, functional rebreathing of exhaled gases, tubing, or valves. Examples: Use of chloroform dripped onto gauze (Eg- Schimmelbusch mask ) Delivery of the fresh gas into an anaesthetist’s cupped hands for inhalational induction in pediatrics Reference: Daniel Aston Equipment in Anaesthesia and Critical Care, Page 82 https://www.ncbi.nlm.nih.gov/books/ NBK574503/#:~:text=Open%20breathing%20systems%20have%20no,insufflation%20and%20open%2Ddrop%20a nesthesia .",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q1_exp.jpg",
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 2,
    "question": "While performing panretinal photocoagulation for diabetic retinopathy in an elderly male patient, the patient's airway caught sudden fire. All of the following steps can be done in the immediate management of this airway fire except",
    "options": {
      "A": "Continue ventilation",
      "B": "Flood area with 0.9% saline",
      "C": "Stop using laser",
      "D": "Remove the tube and extinguish in water"
    },
    "correct_answer": "A",
    "explanation": "Correct answer: A) Continue ventilation Explanation: Panretinal photocoagulation done for Diabetic retinopathy is a type of photocoagulation laser . Laser beams used in surgery may cause ignition of tissues and equipment in the presence of combustible gasses such as oxygen and nitrous oxide. During such airway fires, ventilation should be stopped immediately and the tubings should be removed and extinguished with water . Prophylactic measures: Use of nitrous oxide in laser surgery is contraindicated. Preferred alternative: Heliox. Endotracheal tubes made up of stainless steel or aluminum are preferred during laser surgery. Proper training given to theater staff regarding the airway fire drill. Management of airway fire:",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q2_exp.png",
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 3,
    "question": "All of the following are components of Baralyme except?",
    "options": {
      "A": "Ca(OH) 2",
      "B": "NaOH",
      "C": "KOH",
      "D": "Ba(OH) 2"
    },
    "correct_answer": "B",
    "explanation": "Correct answer: B) NaOH Explanation: Baralyme, a CO 2 absorber does not contain NaOH and rather contains Ba(OH) 2 and hence called Baralyme. Baralyme composition: 80% Ca(OH) 2 11% Ba(OH) 2 2% KOH 11% H 2 O Soda Lime and Baralyme: Soda Lime Baralyme Composition 80% Ca(OH) 2 3% NaOH 2% KOH 16% H 2 O 80% Ca(OH) 2 11% Ba(OH) 2 2% KOH 11% H 2 O Absorptive capacity 20-26 L of CO 2 /100g/min 9-18 L of CO 2 /100g/min Indicator Ethyl violet (changes color upon exhaustion) Exhaustion Indicated by change of color Results in rebreathing of CO 2 (tachypnoea, tachycardia, hypoxia) Interactions Soda Lime + Trilene I Phosgene (cause ARDS) + Dichloroacetylene (neurotoxic) Soda Lime + Sevoflurane I COMPOUND - A (nephrotoxic) Minor interaction: with Desflurane, Enflurane and Isoflurane, produces carbon monoxide (more with Baralyme) Carbon monoxide formation (major interaction): leading to carboxyhemoglobinemia. CO production is max with Baralyme >> Soda Lime and with Desflurane > Enflurane > Isoflurane > Halothane = Sevoflurane.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 4,
    "question": "A 40 year male was undergoing laparoscopic cholecystectomy, in the middle of surgery, he developed tachypnoea with increased sweating, HR - 120 bpm, spO2 - 92%. Anesthetist observed the change and promptly responded by adding a CO2 absorber substance as shown in the image below, following which the signs and symptoms reverted back to normal limits. Which among the following inhalational agents is completely safe to be administered with the added substance?",
    "options": {
      "A": "Desflurane",
      "B": "Halothane",
      "C": "Sevoflurane",
      "D": "Trilene"
    },
    "correct_answer": "B",
    "explanation": "",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q4_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 5,
    "question": "Which of the following is the CO2 absorption capacity of soda lime?",
    "options": {
      "A": "50L CO2 per 100 gram",
      "B": "10L CO2 per 100 gram",
      "C": "36L CO2 per 100 gram",
      "D": "23L CO2 per 100 gram"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) 23L CO2 per 100 gram Explanation: Soda lime absorbs up to 23 L of CO I per 100 g of absorbent Soda lime: Function Removes carbon dioxide through an exothermic reaction in a closed breathing circuit Composition Sodium hydroxide Calcium hydroxide Potassium hydroxide Water Granule size 4 to 8 mesh size Absorption capacity Soda lime absorbs up to 23 L of CO I per 100 g of absorbent. Chemical Process Sodium and potassium hydroxide neutralize and trap carbon dioxide. Gaseous carbon dioxide is converted into solid calcium carbonate (chalk). By-products Heat and water are produced during the reaction. Helps maintain the temperature and humidity of the anesthesia circuit. Indicator A dye (e.g., ethyl violet) changes color from white to purple with increasing hydrogen ion concentration and absorbent exhaustion. Reaction with anesthetics Dry soda lime can degrade volatile anesthetics (e.g., desflurane, sevoflurane) and produce carbon monoxide. Carbon monoxide formation is greatest with desflurane. Reference: Morgan and Mikhail’s Clinical Anesthesiology, 7th edition, Pages 91-92 Daniel Aston Equipment in Anaesthesia and Critical Care, Page 97",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 6,
    "question": "How is a circle system made into a fully closed system?",
    "options": {
      "A": "APL valve is opened",
      "B": "APL valve is closed",
      "C": "APL valve is closed and the fresh gas flow is set equal to the uptake by the patient",
      "D": "None of the above"
    },
    "correct_answer": "C",
    "explanation": "patient Correct Answer: C) APL valve is closed and the fresh gas flow is set equal to the uptake by the patient Explanation: Circle system - closed breathing system Components Fresh gas inlet Reservoir bag Two one-way valves (inspiratory and expiratory limbs) Y-piece connector to the patient APL valve Soda lime canister for CO2 absorption Kink-resistant corrugated tubing connecting components and patient Fully closed system To make the circle system a fully closed system - the APL valve is closed and the fresh gas flow is set equal to the uptake by the patient so that the overall volume of gas in the system is constant. It is difficult to estimate the patient’s oxygen uptake accurately and therefore fully closed systems are rarely used in practice. Advantages Conserves anesthetic gases, heat, and moisture. Allows low-flow anesthesia with monitoring. Low dead space; Y-piece tubing creates mechanical dead space comparable to non-rebreathing circuits. Soda lime canister is distant from the patient’s airway, reducing the inhalation risk of soda lime dust. Reduces atmospheric pollution by recycling anesthetic gases.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 7,
    "question": "Which of the following is a standard breathing system for pediatric patients up to 25 kg?",
    "options": {
      "A": "Mapleson A",
      "B": "Mapleson B",
      "C": "Mapleson C",
      "D": "Mapleson F"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Mapleson F Explanation: Ayre’s T-piece=Mapleson E - Valveless, bagless breathing system consisting of a T-shaped rigid tube with connections for Fesh Gas Flow (FGF), patient, and reservoir tubing. Used for premature babies (cannot handle dead space). Jackson–Rees modification (Mapleson F): Structure Modification of Ayre’s T-piece with an open-ended bag attached to the reservoir tubing. Advantages Minimal dead space (as for Mapleson E). Allows positive pressure ventilation and PEEP. More suitable for inhalational induction than a circle system. Standard breathing system for pediatric patients (up to 25 kg). Disadvantages Scavenging exhaled gases is difficult. Requires high FGFs, making the system inefficient. Technique of partially occluding the bag tail while squeezing it requires moderate skill.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 8,
    "question": "Which of the following is not a feature of the Bain system?",
    "options": {
      "A": "Fresh gas flow at patient end",
      "B": "Valve at at machine end",
      "C": "Bag at the machine end",
      "D": "None of the above"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) None of the above Explanation: All are features of the bain system Mapleson D system: Fresh Gas Flow (FGF) enters at the patient end Adjustable Pressure-Limiting (APL) valve and bag are located at the machine end Daniel Aston Equipment in Anaesthesia and Critical Care, page Bain system (Coaxial Mapleson D): Modification of Mapleson D system Fresh gas flows down an inner tube and exhaled gas passes down an outer tube Advantages Compact system, components located at the machine end, facilitating scavenging Low dead space due to the APL valve at the machine end Compatible with Penlon Nuffield 200 ventilator Disadvantages Inefficient for spontaneous ventilation If the inner tube disconnects or breaks, the entire system becomes dead space.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 9,
    "question": "Which of the following statements is false regarding Magill breathing system",
    "options": {
      "A": "Efficient for spontaneous ventilation",
      "B": "Inefficient for controlled ventilation",
      "C": "Semi-open system",
      "D": "Suitable for pediatrics"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Suitable for pediatrics Explanation: Magill breathing system is not suitable for pediatrics Mapleson A system is also called the Magill breathing system Mapleson systems are semi-open Advantages Efficient for spontaneous ventilation Disadvantages Inefficient for controlled ventilation APL valve at patient end adds bulk and drags on circuit connections Not suitable for pediatrics (Option D is false) Note - Lack system or coaxial Mapleson A is a modification of the Magill breathing system with an outer tube for inspiration and an inner tube for expiration Ventilation rates in Mapleson circuits: Circuit type Spontaneous Controlled Type A = mV 3 x mV Type B 2 x mV 2.25 x mV Type C 2 x mV 2.25 x mV Type D 2.5 x mV 1.6 x mV Type E 2.5 x mV 3 x mV Type F 2.5 x mV 1.5-2 x mV",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 10,
    "question": "Which of the following safety features of Boyle's anesthesia machine reduces the supply of other gases in response to a drop in oxygen pressure?",
    "options": {
      "A": "Second stage pressure regulator",
      "B": "Oxygen supply failure alarm",
      "C": "Oxygen failure safety device",
      "D": "All of the above"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Oxygen failure safety device Explanation: The oxygen failure safety device in Boyle's machine reduces or cuts off other gases when oxygen pressure drops. Boyle's machine Pressurized gases are supplied by cylinders/pipelines and controlled by the machine. It passes through a vaporizer and is then delivered to the patient via the breathing circuit. Key components: High-pressure system: Cylinders, yoke assemblies, pressure indicators, regulators Pin index safety system: Prevents incorrect cylinder attachment NIST connection: Unique hose connection for each gas service Low-pressure system: Flow meters, hypoxia prevention, vaporizers, unidirectional valves, pressure relief Safety Features Oxygen failure safety device: Reduces or cuts off other gases when oxygen pressure drops. (Option C) Oxygen supply failure alarm: Detects oxygen supply failure based on pressure. (Option B ruled out) Second stage pressure regulator: Maintains constant flow despite pipeline pressure changes. (Option A ruled out)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 11,
    "question": "You notice the following vaporizer being used in OT. What is the likely anesthetic agent that could be used here?",
    "options": {
      "A": "Desflurane",
      "B": "Isoflurane",
      "C": "Sevoflurane",
      "D": "Halothane"
    },
    "correct_answer": "A",
    "explanation": "Correct answer: A) Desflurane Explanation: The image in the question shows a Tec-6 Vaporizer with blue color coding, which is used for safe administration of Desflurane . Vaporizers: Description The most commonly used type is variable bypass vaporizers (except for Desflurane). Made up of copper. Principle Based on the vapor pressure of the inhaled anesthetic agent Color coding Desflurane Blue Isoflurane Purple (Option B) Sevoflurane Yellow (Option C) Halothane Red (Option D) Modification Tec-6 vaporizer is used for Desflurane",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q11_q.png",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 12,
    "question": "A 60 year old female patient posted for some surgery under general anesthesia, was maintaining saturation but suddenly got desaturated. Now the clinician decided to supply oxygen via a device shown below. What is the ideal pressure to be maintained for delivering O2 in this scenario?",
    "options": {
      "A": "2000 psi",
      "B": "400 psi",
      "C": "40 psi",
      "D": "20 psi"
    },
    "correct_answer": "C",
    "explanation": "Correct answer: C) 40 psi Explanation: Emergency oxygen flush, pipeline inlets are part of the intermediate pressure system of gas delivery and the ideal pressure maintained for the same is 40-50 psi . Emergency Oxygen flush: Used in cases of sudden desaturation. Can be used bedside near the breathing circuit. Delivers emergency O2 at a rate of 35-70 L/min. Pressure regulators and pressure reducing valves: Component Function Pressure Settings Pressure regulators: Primary Regulator Reduces high cylinder pressure to a consistent level 400 kPa Secondary Regulator Stabilizes fluctuations in pipeline pressure - Pressure reducing/relief valve:",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q12_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 13,
    "question": "Choose the correct set of true statements regarding the central supply line and Diameter index safety system (DISS) 1) DISS is used for preventing wrong attachment of cylinder to machine 2) White color hoses are used for Oxygen 3) Part of low pressure system 4) Ideal pressure of gasses is fixed at 45psi",
    "options": {
      "A": "1, 2",
      "B": "2, 4",
      "C": "1, 3",
      "D": "2, 3"
    },
    "correct_answer": "B",
    "explanation": "Correct answer: B) 2, 4 Explanation: Diameter index safety system (DISS) is used for prevention of wrong attachment of pipeline to machine , and the gas supply devices are a part of intermediate pressure system (not low). Central supply line and DISS: Medical gas supply includes pipelines linking VIEs, cylinder banks and air compressors to wall outlets in wards and theater suites. Part of the intermediate pressure delivery system. (Statement-3) Indexed connectors (DISS) prevent cross-connection. Schrader probes are used for connection. DISS (Diameter Index safety system): prevents wrong attachment of pipeline to machine . (Statement-1) Hoses are made up of copper and are color coded: O2 White (Statement-2) N2O Blue Air Black Suction Yellow Ideal pressures: Gasses: 45-55 psi (Statement-4) Air: 60 psi",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 14,
    "question": "Mark the correct option regarding the scale reading of circular and cylindrical bobbin in the following device",
    "options": {
      "A": "Circular - from top ; cylindrical - parallel with the equator",
      "B": "Circular - parallel with the equator ; cylindrical - from top",
      "C": "Both to be read from top",
      "D": "Both to be read from side, parallel with the equator"
    },
    "correct_answer": "B",
    "explanation": "Correct answer: B) Circular - parallel with the equator ; cylindrical - from top Explanation: The device shown is a flowmeter/rotameter anesthesia equipment, used to control the flow of gasses. Two shapes of Bobbin: Cylindrical: to be read from top Spherical: to be read from side, parallel with the equator Flowmeter / Rotameter: Overview Part of low pressure system (14-28psi) Principle Constant pressure, variable orifice principle is used. Gas flow is controlled via a needle valve, and flow is measured by the position of a bobbin inside the cone. Parts Thorpe’s tube: made up of Glass ; Conical in shape Bobbin/float: made up of aluminum Bobbin Made up of aluminum The bobbin inside the conical flow meter moves upwards with gas flow, creating a variable orifice as the gap between the bobbin and the flowmeter wall increases. The bobbin's position reaches equilibrium when the upward force of the gas equals the downward force of gravity. Bobbin types: Cylindrical bobbin: to be read from",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q14_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 15,
    "question": "Match Column A with Column B appropriately: Column A (Cylinder color) Column B (Pin index) 1) a) 1, 5 2) b) 2, 5 3) c) 3, 5 4) d) 1, 6 e) 7",
    "options": {},
    "correct_answer": "",
    "explanation": "",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 16,
    "question": "Label the following image appropriately",
    "options": {
      "A": "1 - Hanger yoke assembly; 2 - DISS",
      "B": "1 - DISS; 2 - Hanger yoke assembly",
      "C": "1 - PIN Index system; 2 - Hanger yoke assembly",
      "D": "1 - Hanger yoke assembly; 2 - PIN Index system"
    },
    "correct_answer": "D",
    "explanation": "Correct answer: D) 1 - Hanger yoke assembly; 2 - PIN Index system Explanation: Shown image is that of a gas delivery device that connects the anesthesia machine with the gas cylinder via an interlink PIN Index safety system . Hanger-Yoke assembly: Steel valve assembly that helps in attachment of cylinders to the anesthesia machine. A type of high-pressure gas delivery system Ideal pressures: O2 - 2000 psi; N2O - 760 psi Gas Cylinders: Materials: molybdenum steels; Aluminium- MRI compatible Sizes: A (smallest) to H (largest); most commonly used - E (emergency gas supply) PIN Index Safety system: Prevents wrong attachment of the cylinder to the machine. Pins are present on the machine. Ports are present on the cylinder. DISS: Diameter index safety system Prevents wrong attachment of pipeline to the machine Gasses and their PIN Indices: Gas Cylinder color PIN Index system Air Black body with black & white shoulder 1,5 Oxygen Black body with white shoulder 2,5 N2O Blue 3,5 Carbon dioxide Grey 1,6 (> 7.5%) ; 2,6 (< 7.5%) Entonox Blue body with white shoulders 7",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Anaesthesia_Machine-Anaesthesia_Machine_Q16_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 17,
    "question": "Match the gas to its respective cylinder body and shoulder colors. Column A (Gas) Column B (Body Color) Column C (Shoulder Color) 1. Oxygen a) Black i) White 2. N2O b) Blue ii) Blue 3. Nitrogen c) Black iii) Black 4. Carbon dioxide d) Gray iv) Gray 5. Entonox e) Blue v) White & blue 6. Air f) Grey vi) Black & white",
    "options": {
      "A": "1-a-i ; 2-b-ii ; 3-c-iii; 4-d-iv ; 5-e-v ; 6-f-vi",
      "B": "1-a-vi ; 2-b-ii ; 3-c-iii; 4-d-iv ; 5-d-v ; 6-f-i",
      "C": "1-a-i ; 2-b-v ; 3-c-iii; 4-d-iv ; 5-d-ii ; 6-f-vi",
      "D": "1-a-i ; 2-b-ii ; 3-d-iv; 4-c-iii ; 5-d-v ; 6-f-vi"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) 1-a-i ; 2-b-ii ; 3-c-iii; 4-d-iv ; 5-e-v ; 6-f-vi Explanation: Gas Cylinder color Body Shoulder Air Grey Black & white Oxygen Black White N2O Blue Blue Nitrogen Black Black Carbon dioxide Grey Grey Entonox Blue White & blue Helium Brown Brown Reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3821267/ Equipment in Anaesthesia and critical care by Daniel Aston, Page 6",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  },
  {
    "q_no": 18,
    "question": "Mark the cylinder used in MRI rooms and its corresponding wall thickness.",
    "options": {
      "A": "Steel cylinders; 3mm",
      "B": "Aluminum cylinders; 3mm",
      "C": "Steel cylinders; 6mm",
      "D": "Aluminum cylinders; 6mm"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Aluminum cylinders; 6mm Explanation: Aluminum cylinders are MRI compatible. It is made with a cylinder wall thickness of 6 mm. Properties of cylinder Constructed from lightweight materials like chrome molybdenum steel, aluminum, or composites (e.g., aluminum wrapped in carbon fiber). MRI compatibility : Special aluminum cylinders are safe for use in MRI rooms. (Option D) (Option A & C ruled out) Wall thickness : Typical thickness of 3 mm (Steel cylinders), while aluminum cylinders are 6 mm thick. (Option D) (Option B ruled out) Composite cylinders : Made from steel or aluminum liners encased in high-density polyethylene or wrapped in carbon fiber, Kevlar, Twaron, or glass fiber. Advantages : Ultra-lightweight and durable Can hold 30% more gas than aluminum cylinders 70% lighter than steel cylinders Can be pressurized up to 4000 kPa Reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3821267/ Equipment in Anaesthesia and critical care by Daniel Aston, Page 6",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Anaesthesia Machine-Anaesthesia Machine"
  }
]