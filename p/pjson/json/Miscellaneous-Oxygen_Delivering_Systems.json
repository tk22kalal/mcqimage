[
  {
    "q_no": 1,
    "question": "A 60-year-old male patient undergoes general anaesthesia for abdominal surgery. After intubation, the anesthesiologist needs to confirm that the endotracheal tube (ETT) is correctly placed in the trachea. Which of the following is considered the most reliable method for confirming correct ETT placement?",
    "options": {
      "A": "Auscultation of bilateral breath sounds",
      "B": "Visual condensation in the endotracheal tube",
      "C": "Waveform capnography",
      "D": "Symmetrical chest rise"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Waveform capnography Explanation: Waveform capnography is the most reliable method for confirming endotracheal tube placement. It provides continuous real-time monitoring of end-tidal CO2, and the presence of a characteristic waveform over multiple breaths confirms tracheal intubation. Signs of correct endotracheal tube placement Detection of end-tidal CO2 by waveform capnography (most reliable sign) Symmetrical chest rise (Option D) Auscultation of bilateral breath sounds (Option A) Absence of breath sounds in the epigastrium Visible condensation in the endotracheal tube (Option B) Large exhales of tidal volume endotracheal tube placement\" data-author=\"NA\" data-hash=\"481\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"500\" src=\"https://image.prepladder.com/notes/LnrLwO4vFvWGEz4EKVjt1734971884.png\" width=\"500\" /> Reference: Miller’s Anesthesia, 9th edition, Pages 1397,1398 Morgan and Mikhail’s Clinical Anesthesiology, 7th edition, Page 604",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 2,
    "question": "A 70-year-old COPD patient with a history of COPD presents with type 2 respiratory failure and a SpO2 of 86%. ABG results are normal. Which oxygen delivery device will be most appropriate for this patient?",
    "options": {
      "A": "Nasal Prongs",
      "B": "Venturi Mask",
      "C": "Intubation",
      "D": "Non-Rebreathing Mask (NRBM)"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Venturi Mask Explanation: The Venturi mask is the most appropriate oxygen delivery device for COPD patients with type 2 respiratory failure, as it is a fixed performance high flow device. It provides a precise concentration of oxygen (FiO2), preventing over-oxygenation and minimising the risk of hypercapnia by allowing titration to maintain target SpO2 levels (usually 88-92%). Color coding of Venturi mask Color FiO2 Require Flow rate (L/min) Blue 24% 4 White 28% 4 Orange 31% 6 Yellow 35% 8 Red 40% 8 Green 60% 12 If the ABG results were abnormal or if the patient's respiratory status was severely compromised, intubation (Option C) would be indicated. Nasal prongs (Option A) and Non-rebreathing masks (Option D) are low-flow devices and are not suitable for managing type 2 respiratory failure. Criteria for selection of Oxygen Delivery System:",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 3,
    "question": "A 4-year-old patient with respiratory distress is initiated on High-flow Nasal Cannula (HFNC). Which of the following statements is incorrect regarding HFNC?",
    "options": {
      "A": "Provides warmed and humidified gas to the airway.",
      "B": "It can generate low levels of positive airway pressure.",
      "C": "Limits the maximum FiO2 to 60%.",
      "D": "Improved mortality rate in COVID patients"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Limits the maximum FiO2 to 60% Explanation: High-Flow Nasal Cannula (HFNC) can deliver FiO2 levels up to 100%, not limited to 60%. High-Flow Nasal Cannula (HFNC) / High-Flow Humidified Nasal Cannula (HFHNC): It works by delivering warmed & humidified gas (Option A) , preventing nasal mucosa drying and overcoming the limitations of traditional cannulas. Provide flows up to 60 L/min , allowing for accurate delivery of high FiO2 levels Generates positive airway pressures of over 5 cm H2O, making it a potential substitute for low-level CPAP (Conitinous Positive Airway Pressure). (Option B). Can deliver 100% Fio2 (Option C) Nasal Cannula\" data-author=\"NA\" data-hash=\"505\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"500\" src=\"https://image.prepladder.com/notes/5RQESHzOsHknLqoBkVoe1735012914.png\" width=\"500\" /> Nasal Cannula\" data-author=\"NA\" data-hash=\"507\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"500\" src=\"https://image.prepladder.com/notes/oBHsOeOpf1pex1UfYVPh1735013217.png\" width=\"500\" /> Advantages: Better tolerance compared to traditional face masks, allowing for greater comfort during oxygen therapy. Accurate delivery of high FiO2 in various clinical situations. Improved mortality rates in patients experiencing acute hypoxemic respiratory failure due to Sepsis and SARS-CoV-2 infection. (Option D) Disadvantages: Higher cost compared to standard oxygen delivery devices. Limited availability outside of critical care settings Reference: Miller’s Anesthesia, 9th Edition, Pages - 2543,2554 Barash Clinical Anesthesiology, 9th Edition, Page - 4841 Equipment in Anaesthesia and Critical Care, Page - 36 Davidson’s Principles and Practice of Medicine, 24th edition, page 202 https://www.ncbi.nlm.nih.gov/books/NBK526071/",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 4,
    "question": "A 72-year-old female presents to the emergency department in severe respiratory distress, with an oxygen saturation of 78% on room air, tachypnea, and altered consciousness. She has a 3-day history of fever and cough, suggesting community-acquired pneumonia. What is the most appropriate intervention for ensuring adequate oxygenation? A. B. C. D.",
    "options": {},
    "correct_answer": "D",
    "explanation": "gas with a set concentration of oxygen (FiO I ) at flow rates of 40 to 60 L/min . This high-flow device is effective for ensuring adequate oxygenation and is commonly used in conditions such as pneumonia, COPD, respiratory failure, post-operative care, and COVID-19. Venturi Mask is also a high-flow device with fixed performance that delivers a precise concentration of oxygen (FiO I ) by mixing oxygen with ambient air at specific flow rates, typically ranging from 2 to 15 L/min. It is often used in patients requiring controlled oxygen therapy, such as those with COPD. In contrast, Variable performance devices, such as nasal prongs (Option A) , simple face masks (Option B) , and non-rebreather masks (NRBM) (Option C) , provide oxygen at a fixed flow rate, which constitutes only a portion of the total inspired gas. These devices are typically used in patients with minute ventilation defects to help maintain adequate oxygen saturation. Type of mask Nasal Prong Face Mask NRBM Flow rate 1 to 6 L 6 to 10 L 10 to 15 L FiO2 25 to 45% 35 to 60% 65 to 95 % Learning Objective: High-Flow Devices: High-Flow Nasal Cannula (HFNC), Venturi mask Low-Flow Devices: Nasal Prongs, Simple Face Mask, Non-Rebreather Mask (NRBM)",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 5,
    "question": "A 52-year-old male patient is brought to the emergency department after a motor vehicle accident. He is unconscious with an inadequate airway and requires immediate management. Which of the following is the most appropriate method for determining the correct size of the airway as shown in the image below?",
    "options": {
      "A": "Angle of the mouth to the tragus",
      "B": "Angle of the mouth to the suprasternal notch",
      "C": "Tip of the nose to the suprasternal notch",
      "D": "Tip of the nose to the tragus"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Tip of the nose to the tragus Explanation: The image depicts Nasopharyngeal airway , used to prevent back falling of the tongue, especially in unconscious patients. Nasopharyngeal airway Guedel airway (Oropharyngeal) Placed through nose Placed through mouth Prevents back falling of tongue Prevents back falling of tongue Size is calculated by distance between tip of the nose and tragus Size is calculated by distance between angle of mouth and tragus Contraindicated in skull fracture and bleeding disorders Contraindicated in presence of gag reflex",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q5_q.png",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 6,
    "question": "An intern in the ICU witnesses a patient suddenly become breathless and collapse, prompting a code blue. After resuscitation, the senior doctor asks the intern about the significance of the equipment shown in the image. Which of the following is NOT a significance of this equipment?",
    "options": {
      "A": "Convenient for patient transport",
      "B": "Suitable for CPR",
      "C": "Can be used during ventilator failure.",
      "D": "Can deliver high-flow supplemental oxygen"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Can deliver high-flow supplemental oxygen Explanation: The image depicts an Ambu bag or Bag mask ventilation , which is used during CPR, patient transport, and also as an emergency backup during ventilatory failure. It is is designed to provide assisted ventilation, not to deliver high-flow oxygen directly like a non-rebreather mask or high-flow nasal cannula. Mechanism of Bag mask ventilation: During inspiration: A T-shaped non-rebreathing valve sits between the bag and the patient, directing gas flow. It opens during inspiration to allow gas from the bag to the patient while blocking the expiratory port. During exhalation , the inspiratory port is blocked, and the expiratory port opens to vent alveolar gas. Various valve types are available, including spring-disc and fishmouth designs. An inlet valve allows the bag to refill with reservoir gas or room air. A pop-off valve may be included to limit peak inspiratory pressure (PIP), which can become excessively high with these devices. Advantages and disadvantages of Bag mask ventilation: Advantages Disadvantages Compressible reservoir automatically expands upon release. Ubiquitous for patient transport (Option A) . Suitable for CPR (cardiopulmonary resuscitation) (Option B) Can be utilized as emergency back-up (anesthesia machine, ventilator",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q6_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 7,
    "question": "A 70-year-old patient with a history of COPD and chronic smoking arrived at the emergency department in a semi-conscious state, showing an oxygen saturation of 78% on room air. Resuscitation efforts were initiated right away. What is the function of the component depicted in the image below?",
    "options": {
      "A": "Deliver breaths to the patient",
      "B": "Prevents over-inflation of lungs",
      "C": "Provides additional oxygen supply",
      "D": "Prevents rebreathing"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Prevents rebreathing Explanation: The image illustrates the unidirectional valve/ fishmouth valve/ Ruben’s valve found in an Ambu bag , which prevents rebreathing. Ambu Bag (or) Bag mask ventilation: Parts Function Reservoir bag (self-inflating) Provides additional oxygen supply (Option C ruled out) Mask Creates a seal over the patient’s mouth and nose to ensure effective delivery of air from the bag Oxygen port Allows for the connection of supplemental oxygen One way valve (Fish mouth or unidirectional or Ruben’s valve) Prevents rebreathing (prevents exhaled air from re-entering the bag) Pressure valve Prevents over-inflation of the lungs (Option B ruled out) Ventilation bag Deliver breaths to the patient, providing ventilation (Option A ruled out) Inlet valve Allows ambient air to enter the ventilation bag Outlet valve Vents oxygen if fresh gas flow is excessive",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q7_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 8,
    "question": "A 30-year-old female scheduled for laparoscopic cholecystectomy under general anesthesia experiences a sudden increase in heart rate (130 bpm), rapidly rising end-tidal CO2 levels, elevated body temperature, and severe muscle rigidity, especially in the extremities. Which of the following capnogram patterns is indicative of this condition? A. B. C. D.",
    "options": {},
    "correct_answer": "B",
    "explanation": "by a step-ladder pattern (increased metabolic rate causes a marked rise in ETco2) on the capnogram. Few specific patterns of capnogram Capnogram pattern Description Seen in fin pattern\" data-author=\"NA\" data-hash=\"485\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"200\" src=\"https://image.prepladder.com/notes/b18QkghradMde31RGDud1735008974.png\" width=\"300\" /> Shark fin pattern: Due to increased upslope of phase III (Option A) Bronchospasm COPD soda lime\" data-author=\"NA\" data-hash=\"489\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"200\" src=\"https://image.prepladder.com/notes/1wHi1X8VO0QzwgaWtskI1735009388.png\" width=\"300\" /> Above the baseline (high base value) Exhausted soda lime Abrupt decrease in EtCO2 values. Venous air embolism Reduced height of EtCO2 values Hyperventilation Curare notch: clefts during Phase III. (Option C) Resumption of spontaneous breathing. (Next step: Muscle relaxation) Flat capnograph: ETCO2 range: zero (Option D) Esophageal intubation Cardiac arrest Tube displacement Disconnected circuit",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 9,
    "question": "A 65-year-old woman with a history of chronic obstructive pulmonary disease (COPD) presents to the emergency department in respiratory distress. The healthcare team decides to utilise capnography to monitor her end-tidal carbon dioxide (EtCO I ) levels as part of her assessment. Which of the following does EtCO I NOT assess?",
    "options": {
      "A": "Ventilation-Perfusion (V/Q) matching",
      "B": "Estimate adequacy of cardiac output",
      "C": "BUN (blood urea nitrogen) determination",
      "D": "Chest compression effectiveness during CPR"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) BUN (blood urea nitrogen) determination Explanation: BUN (blood urea nitrogen) is determined through a blood sample, while EtCO2 evaluates ventilation-perfusion (V/Q) matching, estimates cardiac output adequacy, and assesses the effectiveness of chest compressions during cardiopulmonary resuscitation (CPR). Capnography The time capnogram is a display of exhaled CO2 that illustrates both the inspiratory and expiratory phases. The capnograph segments are divided into the following: α : Angle between phase II and III β : Angle between phase III and 0 Phases Description Phase I Exhalation of dead space gas Phase II Expiratory upstroke , where transitional gas between the airways and alveoli is sampled, leading to an increase in CO I levels.. Phase III Alveolar Plateau , characterized by a stable pCO I level that reflects the gas exchange occurring in the alveoli. Phase 0 Inspiratory downstroke , where there is a sharp decrease in pCO I as fresh, inspired gas washes out the remaining CO I at the sampling site. Clinical significance of capnography: Confirmation of ET placement (Option D ruled out) CPR Assessment (adequacy of chest compressions) Ventilation-Perfusion (V/Q) matching (Option A ruled out) Estimate cardiac output adequacy (Option B ruled out) Early detection of respiratory depression before O2 desaturation The ratio of physiologic dead space (VD) to tidal volume (VT) by using the Bohr equation: physiologic dead space (VD) to tidal volume (VT)\" data-author=\"NA\" data-hash=\"484\" data-license=\"NA\" data-source=\"NA\" data-tags=\"December2024\" height=\"370\" src=\"https://image.prepladder.com/notes/NcydcPIS0j45dWyXr3xV1734972344.png\" width=\"370\" />",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 10,
    "question": "A 45-year-old patient is undergoing general anaesthesia for a laparoscopic cholecystectomy. The anesthesiologist is monitoring the patient’s ventilation using capnography. The capnograph shows the following waveform. What does the plateau phases represent in the capnography waveform?",
    "options": {
      "A": "Expiration of air from alveoli",
      "B": "Expiration of air from the trachea",
      "C": "Expiration of air from bronchi",
      "D": "Exhalation of air from dead space"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Exhalation of air from alveoli Explanation: Plateau phase or Alveolar plateau is phase III of the capnography waveform, which represents the exhalation of air from alveoli rich in CO2 The simplest and most widely used form of display for exhaled CO2 is time capnography, which shows both inspiratory and expiratory phases. Phase Description Corresponds to Phase 0 Baseline Inspiration and end of expiration. Phase I Initial part of exhalation Exhalation of dead space gas. Phase II Transitional phase Exhalation of transitional gas between airways and alveoli. Phase III Plateau phase Exhalation of alveolar CO2. Alpha Angle (",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 11,
    "question": "Match the following Laryngeal mask airways (LMA) with their corresponding images. i. Classic LMA a. ii. Proseal LMA b. iii. Fast Track LMA c. iv. Supreme LMA",
    "options": {
      "D": "v. I-gel LMA e."
    },
    "correct_answer": "",
    "explanation": "",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 12,
    "question": "What is the primary advantage of using the endotracheal tube shown in the image below?",
    "options": {
      "A": "Enhanced visibility during intubation",
      "B": "Reduced risk of airway obstruction",
      "C": "Improved patient comfort during long procedures",
      "D": "Facilitated access to the surgical site in maxillofacial procedures"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Facilitated access to the surgical site in maxillofacial procedures Explanation: The given image depicts Ring-Adair-Elwyn ET tubes, nasotracheal tubes designed to position the tube and breathing circuit out of the surgical field, allowing enhanced surgical access and reduced interference with instruments. Uses: Oral and Maxillofacial Surgery : Minimizes surgical field interference. Pediatric Patients : Secures airway while facilitating positioning. Congenital or acquired facial Deformities : Reduces manipulation during intubation. Head or Neck Surgery : Ensures clear surgical access. Restricted Mouth Opening : Effective airway option with limited access. Types: North Ring-Adair-Elwyn South Ring-Adair-Elwyn Used in maxillofacial or dental surgery and as an alternative to tracheostomy for weaning from respiratory support . Used in Head and neck surgery, ophthalmic surgery.",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q12_q.png",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 13,
    "question": "A 36-year-old with a suspected cervical spine injury is brought to the emergency department in respiratory distress, requiring urgent intubation. Which of the following endotracheal tubes is preferred for this patient?",
    "options": {
      "A": "Armored endotracheal tube",
      "B": "Double-lumen endotracheal tube",
      "C": "Cuffed endotracheal tube",
      "D": "Uncuffed endotracheal tube"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Armored endotracheal tube Explanation: In adult patients with suspected cervical spine injuries, armoured endotracheal tubes are preferred due to their spiral metal reinforcement, which resists kinking and provides greater flexibility. This design is particularly beneficial in patients requiring neck stabilisation, as it helps secure the airway while minimising the risk of further injury to the cervical spine. Hence are preferred for surgeries requiring a prone position, such as head, neck, and spine procedures. endotracheal tube\" data-author=\"Edward A. Luce Sonia M. Alvarez\" data-hash=\"474\" data-license=\"CC BY 4.0\" data-source=\"https: //www.researchgate.net/figure/armored-endotracheal-tube-Coviden-Inc-dublin-Ireland_fig1_327520558\" data-tags=\"December2024\" height=\"337\" src=\"https://image.prepladder.com/notes/OwZjYRqUsgDpJFO7sKTR1734971003.png\" width=\"500\" /> Double-lumen endotracheal tubes (Option B) are specialised tubes that allow single-lung ventilation. They are commonly used in thoracic surgeries like pneumonectomy, but they are not preferred in trauma due to their complexity and placement challenges. endotracheal tubes\" data-author=\"bigomar2\" data-hash=\"475\" data-license=\"CC BY SA 3.0\" data-source=\"https://en.wikipedia.org/wiki/Double-lumen_endobronchial_tube\" data-tags=\"December2024\" height=\"376\" src=\"https://image.prepladder.com/notes/MPa2UhpgJG1sp0DCE74B1734971023.png\" width=\"500\" /> Cuffed endotracheal tubes (Option C) are the most commonly used ET tubes but may not offer the flexibility needed for cervical injury management. The cuff creates a seal in the trachea to allow higher ventilation pressures and prevent aspiration. endotracheal tubes\" data-author=\"Meimei Tao, Xinxia Wang, Qian Sun, Hui Li, Hang Zou, Guangfa Zhu\" data-hash=\"476\" data-license=\"CC BY 4.0\" data-source=\"https://onlinelibrary.wiley.com/doi/10.1111/crj.13539\" data-tags=\"December2024\" height=\"500\" src=\"https://image.prepladder.com/notes/upG0W5gB7VQAa8QyI70r1734971045.png\" width=\"500\" /> Uncuffed endotracheal tubes (Option D) are often used in pediatric patients because of concerns of necrosis caused by cuff pressure at the level of the cricoid cartilage.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 14,
    "question": "A 4-year-old child is brought to the emergency department in Respiratory distress. What is the appropriate size of the endotracheal tube to intubate the child?",
    "options": {
      "A": "4 mm",
      "B": "5 mm",
      "C": "7 mm",
      "D": "10 mm"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) 5 mm Explanation: For pediatric patients with age >1 year, the formula used to calculate the appropriate size of an uncuffed endotracheal tube (ETT) is: ETT size (mm) = Age (years) I /4 + 4 For a 4-year-old child: ETT size = 4(years)/4 + 4 = 5 mm The ETT size is described in terms of internal diameter: Age Internal Diameter length Term-Neonate 3 mm (uncuffed) 9 cm 1 Year Old 4 mm (uncuffed) 10 cm Child (>1 Year) Age/4 + 4 mm (uncuffed) Age/2 + 12 cm Adult > 7 mm 18-22 cm The cuff is positioned 3-4 cm above the carina and 2-2.5 cm below the glottis. Murphy's eye is a side hole at the tip, which allows continued ventilation if the end abuts the tracheal wall. Reference: Miller’s Anesthesia, 9th edition, Page 1392,1393 Equipment in anaesthesia and critical care Page 65, 66",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q14_exp.png",
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 15,
    "question": "A 55-year-old male is undergoing elective surgery under general anaesthesia. During laryngoscopy for intubation, the anesthesiologist visualised the airway, as shown in the image below. According to the Cormack-Lehane classification, what grade is assigned to this view?",
    "options": {
      "A": "Grade I",
      "B": "Grade II",
      "C": "Grade III",
      "D": "Grade IV"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Grade II Explanation: Grade II is visualization of only the posterior portion of the laryngeal aperture Cormack-Lehane grading system It is used to grade the laryngoscopic view based on the number of glottic openings being visualised. Higher the grade more challenging is the intubation. Grade Description Grade I The entire laryngeal aperture is visible Grade II Only the posterior portion of the laryngeal aperture is visible Grade III Only the epiglottis is visible Grade IV Neither the epiglottis nor the larynx is visible",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q15_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 16,
    "question": "A 50-year-old male presents with gallstones and is scheduled for a cholecystectomy. During the preoperative assessment, the anaesthetist notes the patient's airway, as visualised in the image below. According to the Mallampati classification, which class does this fall into?",
    "options": {
      "A": "Class I",
      "B": "Class II",
      "C": "Class III",
      "D": "Class IV"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Class III Explanation: In Mallampati Class III , only the base of the uvula and the soft palate are visible. Mallampati classification: It evaluates the size of the tongue in relation to the oral cavity. The greater the obstruction of the view of the pharyngeal structures by the tongue, the more challenging intubation may be. Class description Class I The P illars, u vula, s oft and h ard palate are visible. (mnemonic PUSH ) Class II The soft palate, faucial pillars (upper part) and portion of uvula is visible. Class III The soft palate and base of",
    "image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q16_q.jpg",
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 17,
    "question": "A 45-year-old obese female has been experiencing excessive vaginal bleeding for two months, and an ultrasound revealed uterine fibroids. She is scheduled for a hysterectomy. What is the preferred position for laryngoscopy in this case?",
    "options": {
      "A": "Sniffing position",
      "B": "Rose position",
      "C": "Lithotomy position",
      "D": "Ramped position"
    },
    "correct_answer": "D",
    "explanation": "Correct Answer: D) Ramped position Explanation: The preferred position for intubation in obese patients is referred to as the Ramped Position , in which the patient's head, neck, and shoulders are elevated with pillows or padding, aligning the external auditory meatus with the sternal notch. This alignment improves the visualisation of the glottis during intubation, optimising airway management and reducing the risk of difficult intubation. Sniffing position (Option A) is used for intubation in non-obese patients, but in obese patients, it may not provide sufficient alignment for a clear view of the vocal cords. The patient is positioned supine with the head elevated on a firm cushion (patients with shorter necks may require less elevation) while flexing the neck and extending the atlanto-occipital joint. Rose position (Option B) : is used during tonsillectomy. The patient lies supine with the head extended by placing a pillow under the shoulders. A rubber ring is placed under the head to stabilise it. Lithotomy position (Option C) is preferred during labour, as well as for examinations or surgeries involving the pelvis, female genitalia, rectum, prostate, and other urethral procedures. The patient lies in a supine position with the buttocks at the lower break of the table. The legs are flexed at the hips to 90°and abducted to 30°, with the knees bent at 70° to 90° and the lower legs supported by padded shells.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 18,
    "question": "A 6-year-old child was brought in for an elective tonsillectomy in the operating theatre. During the procedure, the anaesthetist asked the junior resident about the appropriate laryngoscopy and its blades. Which type of laryngoscope is most preferred for this case?",
    "options": {
      "A": "McCoy Laryngoscope",
      "B": "Miller Laryngoscope",
      "C": "Macintosh Laryngoscope",
      "D": "McGrath Laryngoscope"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Miller Laryngoscope Explanation: The Miller laryngoscope is the preferred choice for pediatric patients, especially for children under 8 years of age . It has a straight blade, which is advantageous in lifting the epiglottis directly, providing a better view of the vocal cords in younger patients. Types of Laryngoscopy Direct Laryngoscopy: Direct visualisation of the glottis with the assistance of a laryngoscope Following laryngoscopes are most commonly used: Macintosh Laryngoscope (Option C) Miller Laryngoscope (Option B) McCoy Laryngoscope (Option A) Blade Curved shape Straight shape Curved with levering tip Use In adults In children (large epiglottis) It can be used in both adults and children. Indirect Laryngoscopy: Indirect visualisation of the glottis with the help of optical aids, such as fiberoptic bundles, video cameras, mirrors, prisms, or lenses like: Flexible Intubation Scopes Rigid Indirect Laryngoscopes Lighted Optical Stylets Video Laryngoscopes (C-MAC laryngoscope, McGrath laryngoscope, GlideScope) Airtraq Ambu ascope McGrath laryngoscope (Option D) : It is a video laryngoscope used in cases of difficult intubation.",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Miscellaneous-Oxygen_Delivering_Systems_Q18_exp.jpg",
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  },
  {
    "q_no": 19,
    "question": "A 56-year-old male, weighing 62 kg and with a known case of COPD, was brought in with heart failure and in a semi-conscious state. Immediate resuscitation measures were initiated. What size of laryngeal mask would be preferred for this patient?",
    "options": {
      "A": "2.5",
      "B": "3",
      "C": "4",
      "D": "6"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) 4 Explanation: For an adult weighing 62 kg, a size 4 Laryngeal Mask Airway (LMA) is recommended. Total 8 sizes of LMA are available as: Size Weight of the patient 1 <5 kg 1.5 5-10 kg 2 10-20 kg 2.5 (Option A) 20-30 kg 3 (Option B) 30-50 kg 4 (Option C) 50-70 kg 5 70-90 kg 6 (Option D) >100 kg Most commonly used sizes in infants: 1 and 1.5 Most commonly used sizes for adults: 4 and 5. Reference: Miller’s Anesthesia, 9th edition, Pages 1389, 1390. Morgan and Mikhail’s Clinical Anesthesiology, 7th edition, Pages 585.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Miscellaneous-Oxygen Delivering Systems"
  }
]