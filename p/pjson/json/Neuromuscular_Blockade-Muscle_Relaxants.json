[
  {
    "q_no": 1,
    "question": "A patient undergoing rapid sequence induction of anaesthesia receives succinylcholine as a muscle relaxant. Shortly after administration, the anesthesiologist notices muscle fasciculations followed by flaccid paralysis. What is the mechanism responsible for these observed effects?",
    "options": {
      "A": "Prolonged depolarization of the muscle membrane",
      "B": "Competitive inhibition of Ach at the neuromuscular junction",
      "C": "Rapid hydrolysis by acetylcholinesterase",
      "D": "Blockade of presynaptic nicotinic receptors"
    },
    "correct_answer": "A",
    "explanation": "Correct answer: A) Prolonged depolarization of the muscle membrane Explanation: Succinylcholine is a depolarizing neuromuscular blocker. It mimics acetylcholine (Ach) and binds to nicotinic receptors at the neuromuscular junction, causing prolonged depolarization of the muscle membrane. This initial depolarization results in muscle fasciculations, followed by flaccid paralysis because the muscle fibers cannot repolarize, leading to the observed effects. Competitive inhibition of Ach at the neuromuscular junction (Option B): This is characteristic of nondepolarizing muscle relaxants like vecuronium. These agents prevent acetylcholine from binding to nicotinic receptors, without causing depolarization, and thus do not induce fasciculations. Rapid hydrolysis by acetylcholinesterase (Option C): Unlike ACh, which is rapidly hydrolyzed by acetylcholinesterase (AChE), succinylcholine is not quickly broken down. It primarily depends on plasma cholinesterase (butyrylcholinesterase) for metabolism. This rapid metabolism accounts for the short duration of succinylcholine’s action but does not explain the muscle fasciculations. Blockade of presynaptic nicotinic receptors (Option D): Succinylcholine acts directly on postsynaptic receptors, causing continuous depolarization and fasciculations. It does not act on presynaptic receptors. Reference: Miller’s Anaesthesia, 9th Edition, Page 334, 351, 792",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 2,
    "question": "Which muscle is the first to regain function after muscle relaxation?",
    "options": {
      "A": "Triceps",
      "B": "Adductor pollicis",
      "C": "Quadriceps",
      "D": "Diaphragm"
    },
    "correct_answer": "D",
    "explanation": "Correct answer: D) Diaphragm Explanation: The diaphragm , a central muscle involved in breathing, receives a high blood supply, making it one of the first to recover after muscle relaxants wear off. The fast recovery of the diaphragm is important for restoring normal respiratory function following surgery. Triceps (Option A): The triceps, located in the upper arm, are peripherally situated and recover later than centrally located muscles. The slower return of function in muscles like the triceps is due to their lower blood supply and distant location from central circulation. Adductor pollicis (Option B): Located in the hand, this peripheral muscle tends to recover more slowly because it has lower blood flow compared to central muscles. It is useful for monitoring complete neuromuscular recovery. Quadriceps (Option C): Quadriceps exhibit a slower recovery because they are more distant from central circulation and have less blood flow compared to muscles like the diaphragm. Reference: Miller’s Anaesthesia, 9th Edition, Page 792, 805, 809, 811 Neuromuscular block management",
    "image": null,
    "explanation_image": "https://raw.githubusercontent.com/tk22kalal/mcqimage/main/p/pjson/images/Neuromuscular_Blockade-Muscle_Relaxants_Q2_exp.png",
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 3,
    "question": "What type of muscle relaxant works by blocking acetylcholine at the neuromuscular junction?",
    "options": {
      "A": "Depolarizing muscle relaxant",
      "B": "Non-depolarizing muscle relaxants",
      "C": "Centrally acting muscle relaxants",
      "D": "Cholinesterase inhibitor"
    },
    "correct_answer": "B",
    "explanation": "Correct answer: B) Nondepolarizing muscle relaxants Explanation: Skeletal muscle relaxants Depolarizing Muscle Relaxants Non-depolarizing Muscle Relaxants Mechanism Mimic acetylcholine, binds to the Acetylcholine receptors, causing continuous depolarization of the muscle membrane. (Option A ruled out) Block acetylcholine by competitively binding to nicotinic acetylcholine receptors at the neuromuscular junction, preventing depolarization. (Option B) Effect Causes an initial phase of muscle contractions (fasciculations), followed by paralysis. Causes muscle paralysis without initial muscle contraction. Action Not reversed by cholinesterase inhibitors but effects wear off rapidly due to fast metabolism by butyrylcholinesterase. Reversed by cholinesterase inhibitors that increase acetylcholine levels. Examples Succinylcholine, decamethonium Vecuronium, Rocuronium, Pancuronium Train-of-four (TOF) stimulation involves four supramaximal stimuli delivered at 2 Hz over 2 seconds, with responses measured as a TOF count (0-4) or a TOF ratio (0-1 or 0-100%). TOF in Depolarizing Blockade : In depolarizing blockade, the amplitude of all four muscle responses decreases equally, resulting in a TOF ratio of 1.0, meaning no fade is observed. TOF in Non-Depolarizing Blockade : In non-depolarizing blockade, the TOF ratio decreases as the block intensifies, with 1-2 muscle responses indicating a 90-95% block, and a fade occurs between the fourth and first responses. Centrally acting muscle relaxants (Option C): These drugs work within the central nervous system and are primarily used to reduce muscle spasticity or tension in conditions like multiple sclerosis or spinal cord injuries. They do not directly interfere with acetylcholine at the neuromuscular junction. Cholinesterase inhibitor (Option D): Cholinesterase inhibitors, like neostigmine, increase the levels of acetylcholine at the neuromuscular junction by inhibiting the enzyme that breaks it down. They do not block acetylcholine; instead, they enhance its action.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 4,
    "question": "During surgery, a patient receives a long-acting steroidal non-depolarizing muscle relaxant that is mainly excreted by the kidneys. Which drug is likely used?",
    "options": {
      "A": "Vecuronium",
      "B": "Rocuronium",
      "C": "Pancuronium",
      "D": "Gallamine"
    },
    "correct_answer": "C",
    "explanation": "Correct answer: C) Pancuronium Explanation: Pancuronium is an aminosteroid muscle relaxant with a long duration of action. It is primarily excreted through the kidneys , making it suitable for patients with normal kidney function. Its limited metabolism means it maintains its effectiveness throughout the surgical procedure. Vecuronium (Option A): This is an intermediate-acting aminosteroid muscle relaxant. Unlike pancuronium, vecuronium undergoes significant hepatic metabolism. Rocuronium (Option B): It is an intermediate-acting steroidal muscle relaxant and its primary elimination occurs in the liver and therefore does not undergo renal excretion. Gallamine (Option D): It is now rarely used in clinical practice due to its side effects. Gallamine blocks both the acetylcholine recognition site and the ion channel of the Nicotinic acetylcholine receptors(nAChR). Gallamine is categorized as a benzylisoquinoline compound, distinguishing it from steroidal agents. Reference: Miller’s Anaesthesia, 9th Edition, Page 801, 812, 813, 345 Gallamine",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 5,
    "question": "A patient undergoing prolonged surgery is given the most effective muscle relaxant that undergoes Hofmann elimination. Which of the following benzylisoquinolinium muscle relaxant has been administered?",
    "options": {
      "A": "Alcuronium",
      "B": "d-Tubocurarine",
      "C": "Atracurium",
      "D": "Cisatracurium"
    },
    "correct_answer": "D",
    "explanation": "Correct answer: D) Cisatracurium Explanation: Cisatracurium is the most potent benzylisoquinolinium muscle relaxant . It is a single isomer of atracurium and is metabolised through Hofmann elimination. Due to its high potency, it is administered in lower doses compared to atracurium, making it highly effective in prolonged surgeries. Its breakdown is independent of kidney or liver function, reducing the risk of accumulation and toxicity in patients with organ dysfunction. Alcuronium (Option A): Its pharmacokinetics and metabolic pathways are less understood and not as well-documented as those of atracurium or cisatracurium. It is not commonly used in contemporary clinical practice, especially in prolonged surgeries. d-Tubocurarine (Option B): d-Tubocurarine is a long-acting, non-depolarizing muscle relaxant that is excreted unchanged by the kidneys. It has largely been replaced by more modern agents due to its prolonged effects and higher risk of side effects, such as histamine release and ganglionic blockade. Atracurium (Option C): Atracurium is also metabolized via Hofmann elimination but is less potent than cisatracurium. The byproduct laudanosine, which results from Hofmann elimination, can cause seizures in critically ill patients, limiting its use in prolonged procedures. Reference: Miller’s Anaesthesia, 9th Edition, Page 799, 813, 815, 828 Alcuronium Page 23",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 6,
    "question": "A 45-year-old woman with a known history of myasthenia gravis is undergoing an emergency appendicectomy. The anesthesiologist plans to use muscle relaxants for rapid tracheal intubation. The patient is currently on pyridostigmine. Which of the following is the most appropriate muscle relaxant of choice for this patient?",
    "options": {
      "A": "Succinylcholine at a standard dose",
      "B": "Rocuronium with sugammadex available for reversal",
      "C": "Succinylcholine at a reduced dose",
      "D": "Pancuronium for longer paralysis duration"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Rocuronium with sugammadex available for reversal Explanation: Myasthenia Gravis (MG) involves reduced acetylcholine (ACh) receptors at neuromuscular junctions due to an autoimmune process, causing muscle weakness and fatigue. The patient is on pyridostigmine, which is an anticholinesterase drug to help with her MG. Rocuronium is a steroidal neuromuscular blocker, and sugammadex provides a safer, effective reversal option in MG patients, especially in those receiving anticholinesterase treatment. Succinylcholine in MG : Larger doses (1.5-2.0 mg/kg) may be needed for rapid tracheal intubation due to fewer ACh receptors. However, anticholinesterase treatment prolongs the effect due to decreased cholinesterase activity. (Options A&C ruled out) Neuromuscular blockade monitoring should be done as it is essential for guiding the administration and reversal of muscle relaxants. Sugammadex : Offers safer and more effective reversal of steroidal neuromuscular blockers (e.g., rocuronium, vecuronium), especially in MG patients, where neuromuscular recovery can be more complex. Pancuronium for longer paralysis duration (Option D): Pancuronium is a non-depolarizing muscle relaxant. It is generally not used in patients with MG as it is unpredictable, due to uneven muscle weakness in these patients. Reference: Miller’s Anaesthesia, 9th Edition, Page 972, 1042, 1138",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 7,
    "question": "A 30-year-old male is brought to the emergency department after a motor vehicle accident and requires rapid tracheal intubation. The patient has a history of spinal cord injury from a previous accident 6 months ago. Which of the following muscle relaxants should be used with utmost caution?",
    "options": {
      "A": "Rocuronium",
      "B": "Suxamethonium",
      "C": "Vecuronium",
      "D": "Atracurium"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Suxamethonium Explanation: Suxamethonium (succinylcholine) is a depolarizing muscle relaxant. In patients with a history of spinal cord injury, especially several months after the injury, there is an increased risk of hyperkalemia due to upregulation of acetylcholine receptors in the muscle. This can lead to excessive potassium release when succinylcholine is administered, potentially causing life-threatening cardiac arrhythmias. Hence, it should be used with utmost caution. Depolarizing Muscle Relaxants Examples: Suxamethonium, decamethonium They act as agonists at nicotinic acetylcholine receptors (nAChRs), mimicking acetylcholine by binding and activating these receptors. Mechanism of Blockade : Unlike acetylcholine, depolarizing agents are not rapidly broken down by acetylcholinesterase, hence causing prolonged depolarization. Sustained depolarization leads to : The desensitisation of nAChRs, d/t continued exposure Inactivation of voltage-gated sodium channels , blocking further muscle contractions. Increased potassium permeability , potentially increasing serum potassium levels, especially in patients with upregulated AChRs Phase I Block : Initial depolarization causes muscle fasciculations (involuntary contractions). Phase II Block : After depolarization, acetylcholine receptors become desensitized, and the end plate repolarizes, but the receptors remain blocked, leading to paralysis. Succinylcholine Side Effects Contraindications Bradycardia and ventricular dysrhythmias Hyperkalemia Increased Intracranial Pressure Myalgia Anaphylaxis Malignant Hyperthermia Metabolic acidosis Burns Hypovolemia Muscular Dystrophies Upper and Lower motor denervation Neuromuscular disease Rocuronium and vecuronium & Atracurium (Option A, C & D) are non-depolarizing muscle relaxants that do not cause significant potassium release (leading to cardiac arrhythmias), like how succinylcholine does. Reference: Miller’s Anaesthesia, 9th Edition, Page 334, 343, 793, 796, 797, 798",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 8,
    "question": "A 40 y/o man undergoes surgery and receives suxamethonium for rapid sequence induction. After surgery, he experiences prolonged apnea. Genetic testing reveals he has a homozygous atypical pseudocholinesterase enzyme. What is the most likely explanation for his prolonged apnea?",
    "options": {
      "A": "Increased acetylcholinesterase activity",
      "B": "Increased sensitivity to suxamethonium due to genetic predisposition",
      "C": "Interaction with a non-depolarizing muscle relaxant",
      "D": "Hyperkalemia caused by suxamethonium"
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Increased sensitivity to suxamethonium due to genetic predisposition In individuals with a genetic variant that leads to atypical pseudocholinesterase, the breakdown of suxamethonium is significantly slower, resulting in prolonged muscle paralysis and apnea. This condition is more common in individuals with a homozygous atypical variant of the pseudocholinesterase enzyme, causing them to be more sensitive to the drug and leading to a prolonged duration of action. Genetic predisposition : Genetic variants (e.g., homozygous atypical enzyme) reduce enzyme activity, slowing suxamethonium breakdown and increasing the risk of prolonged apnea. (Option B) The dibucaine number test can assess pseudocholinesterase function, indicating susceptibility to prolonged apnea. The prolonged paralysis and apnea are treated with continued mechanical ventilation and sedation until muscle function returns to normal. Dibucaine Number Definition The dibucaine number is a test used to measure butyrylcholinesterase enzyme activity, which breaks down muscle relaxants like succinylcholine. Dibucaine inhibits normal butyrylcholinesterase more effectively than the abnormal variant. This test measures the extent of enzyme inhibition and helps determine the presence of the abnormal genetic variant. Activity Normal butyrylcholinesterase is inhibited by 80% (dibucaine number of 80). Atypical butyrylcholinesterase is inhibited by 20% (dibucaine number of 20), indicating reduced enzyme function. Clinical Importance Helps identify individuals with atypical enzyme variants who may experience prolonged paralysis after succinylcholine use. Useful for guiding anaesthesia decisions to prevent complications. Enzyme Concentration The test does not measure the enzyme concentration, which can be influenced by various factors like diseases or medications. Increased acetylcholinesterase activity (Option A) : Acetylcholinesterase does not significantly metabolize suxamethonium. Interaction with a non-depolarizing muscle relaxant (Option C) : Suxamethonium can interact with other muscle relaxants (e.g., mivacurium), prolonging their effects and potentially exacerbating respiratory muscle paralysis but is not the most likely cause in this scenario as there is the presence of atypical pseudocholinesterase. Hyperkalemia caused by suxamethonium (Option D) : While suxamethonium can cause hyperkalemia in certain conditions, the main cause of prolonged apnea here is genetic pseudocholinesterase deficiency.",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 9,
    "question": "A 45-year-old male is undergoing surgery and is given repeated doses of suxamethonium for muscle relaxation. After some time, his muscle response starts to fade despite continuous stimulation. This is most likely due to the development of a phase II block. Which of the following is not a characteristic feature of phase II block with suxamethonium?",
    "options": {
      "A": "It is associated with a fade in muscle response during repetitive nerve stimulation",
      "B": "It can be influenced by prolonged exposure to suxamethonium",
      "C": "It responds predictably to cholinesterase inhibitors like neostigmine",
      "D": "Fast-twitch muscle fibres are more susceptible to phase II block than slow-twitch fibres"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) It responds predictably to cholinesterase inhibitors like neostigmine Explanation: The response to cholinesterase inhibitors is unpredictable and may even worsen the block. Phase II Block (accommodation): It occurs with continuous or repeated exposure to depolarizing muscle relaxants, particularly suxamethonium, and is characterised by a gradual fade in muscle response. (Option A ruled out) Mechanisms Behind Phase II Block: Prejunctional effects : High concentrations of suxamethonium can block prejunctional acetylcholine receptors (AChRs), affecting acetylcholine synthesis and release. Postjunctional effects : Fade may also stem from changes in postjunctional AChR sensitivity or kinetics, resulting in reduced response despite the continued presence of the relaxant. TOF of Phase II depolarizing block Factors Influencing Phase II Block: Duration of exposure : Prolonged exposure to suxamethonium increases the chance of developing Phase II block. (Option B ruled out) Drug concentration : Higher suxamethonium concentrations make Phase II block more likely. Muscle type : Fast-twitch muscle fibres are more susceptible to Phase II block than slow-twitch fibres. (Option D ruled out) Interaction with other agents : Anesthetics or other drugs can affect the development of Phase II block. Reversal of Phase II Block: Cholinesterase inhibitors (e.g., neostigmine) : Not recommended as the response is unpredictable and could worsen the block. (Option C) .",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 10,
    "question": "A 30-year-old male with a history of extensive burns sustained two weeks ago requires rapid sequence intubation for surgery. The anaesthetist considers using suxamethonium for muscle relaxation. Which of the following is the most appropriate reason to avoid using suxamethonium in this patient?",
    "options": {
      "A": "Risk of increased intracranial pressure",
      "B": "Risk of phase II block",
      "C": "Risk of hyperkalemia",
      "D": "Risk of myalgia"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Risk of hyperkalemia Explanation: Suxamethonium can cause a dangerous release of potassium in patients with burns or muscle trauma due to upregulated acetylcholine receptors, leading to life-threatening hyperkalemia and cardiac arrhythmias. Side effects: Bradycardia 2. Hyperkalemia: Increases serum potassium (0.5 mEq/dL) due to potassium efflux from muscle cells. Exaggerated in burns, muscle trauma, and neuromuscular diseases, leading to life-threatening hyperkalemia. Myalgia 4. Masseter Muscle Rigidity An increase in the tone of the masseter muscle may be an early indicator of malignant hyperthermia. Malignant hyperthermia can be triggered in susceptible individuals by suxamethonium. Risk of increased intracranial pressure (Option A) : While suxamethonium can increase intracranial pressure, this is not the primary concern in patients with recent burns. Risk of Phase II block (Option B) : Phase II block can occur with repeated or prolonged use, but it is not the main concern in burn patients. Risk of myalgia (Option D) : Myalgia is a known side effect of suxamethonium, but it is not the primary contraindication in this scenario. Reference: Miller’s Anaesthesia, 9th Edition, Page 796-799, 825, 826, 978, 1123",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 11,
    "question": "A 28-year-old man with a history of asthma is undergoing elective surgery. He is induced with isoflurane and given succinylcholine for muscle relaxation. Within minutes, the surgical team observes that he has developed severe muscle rigidity, a rapid heart rate, and a notable increase in body temperature. Which drug/s is/are most likely responsible for the onset of these symptoms in this patient?",
    "options": {
      "A": "Isoflurane only",
      "B": "Succinylcholine only",
      "C": "Both isoflurane and succinylcholine",
      "D": "Neither isoflurane nor succinylcholine"
    },
    "correct_answer": "C",
    "explanation": "Correct Answer: C) Both isoflurane and succinylcholine Explanation: In this case, the diagnosis of malignant hyperthermia is typically made based on the presence of characteristic clinical signs—such as muscle rigidity, tachycardia, and hyperthermia—following exposure to certain anaesthetic agents. Both isoflurane (an inhaled anaesthetic) and succinylcholine (a depolarizing muscle relaxant) are well-known triggers for malignant hyperthermia. The combination of these agents heightens the risk of developing this serious condition, which is indicated by the rapid onset of symptoms in the patient after their administration. Triggers of Malignant Hyperthermia: Inhaled general anesthetics Ether Halothane Enflurane Isoflurane Desflurane Sevoflurane Depolarizing muscle relaxant Succinylcholine Prior exercise, even just an hour before anaesthesia induction, intensifies the severity and accelerates the onset of rigidity. Initial Indicators of Malignant Hyperthermia (MH) During Anesthesia: Muscle rigidity Masseter spasm Tachycardia Unexplained hypercarbia Increased temperature Other Features: Cyanosis, metabolic acidosis, hypertension, fever, sweating, Hyperkalemia, Hyperphosphatemia, Myoglobinemia, Myoglobinuria, Cardiac Arrest, DIC, etc. Reference: Miller’s Anaesthesia, 9th Edition, Pages 1120, 1121, 1123 Morgan and Mikhail’s Clinical Anaesthesia, 7th Edition, Pages 2298-2300",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 12,
    "question": "During a routine orthopaedic surgery, a 35-year-old female patient develops muscle rigidity, tachycardia, and elevated body temperature shortly after being administered halothane and succinylcholine. Which of the following actions should the anesthesiologist take first to manage this patient's condition?",
    "options": {
      "A": "Administer dantrolene and bicarbonate immediately.",
      "B": "Stop halothane and succinylcholine, and hyperventilate with 100% oxygen.",
      "C": "Administer dantrolene and continue the surgery with halothane only.",
      "D": "Administer cold IV fluids with dantrolene."
    },
    "correct_answer": "B",
    "explanation": "Correct Answer: B) Stop halothane and succinylcholine, and hyperventilate with 100% oxygen. agents—halothane and succinylcholine—and then hyperventilate the patient with 100% oxygen. This helps to counteract hypoxia and stabilize the patient's condition. Diagnosis of malignant hyperthermia Best screening test- Creatine kinase test Gold Standard Diagnostic test- Halothane-Caffeine Test Treatment for malignant hyperthermia Discontinue volatile anaesthetics and succinylcholine immediately. Notify the surgeon and call for assistance. Hyperventilate the patient with 100% oxygen at a fresh flow rate of at least 10 L/min. Mix dantrolene sodium with sterile distilled water and administer 2.5 mg/kg intravenously as soon as possible. Repeat every 5 to 10 minutes until symptoms improve, with a maximum total dose of 10 mg/kg. Administer bicarbonate to address metabolic acidosis. Implement cooling measures, such as lavage, cooling blankets, and cold intravenous fluids. For severe hyperkalemia, administer dextrose (25–50 g IV) along with regular insulin (10–20 units IV for adults). Provide antiarrhythmic medications as necessary. Monitor end-tidal CO2 levels, electrolytes, blood gases, creatine kinase, serum myoglobin, core temperature, urinary output and colour, and coagulation status. Administer dantrolene and bicarbonate immediately. (Option A): While dantrolene is critical, it should not be the first action. Stopping the triggers and ensuring oxygenation takes priority. Administer dantrolene and continue the surgery with halothane only. (Option C): Continuing halothane use after administering dantrolene can worsen the condition. Administer cold IV fluids with dantrolene. (Option D): While cold IV fluids and dantrolene are important for treatment, they should not be the first actions. Stopping the anesthetics and providing oxygen must come first for immediate stabilization. Reference: Miller’s Anaesthesia, 9th Edition, Page 1118, 1123, 1124, 1125 Morgan and Mikhail’s Clinical Anaesthesia, 7th Edition, Page 2301, 2302",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 13,
    "question": "Which of the following factors will not potentiate the effect of neuromuscular blockade?",
    "options": {
      "A": "Hypercalcemia, Alkalosis",
      "B": "Hypermagnesemia, Hypothermia",
      "C": "Lithium, Tetracycline",
      "D": "Local anesthetics, Clindamycin"
    },
    "correct_answer": "A",
    "explanation": "Correct Answer: A) Hypercalcemia, Alkalosis Explanation: Both hypercalcemia and alkalosis can reduce the effectiveness of neuromuscular blockers thus shortening their effects. Factors That Potentiate the Effect of Neuromuscular Blockade Physiological changes in older adults Hypothermia (Option B ruled out) Hypermagnesemia (Option B ruled out) Hypocalcemia Acidosis Antimicrobials (aminoglycosides, tetracyclines, polymyxins, clindamycin) (Option C & D ruled out) Inhaled anesthetics Lithium (Option C ruled out) Local anaesthetics (Option D ruled out) Reference: Neuromuscular Blockade - StatPearls - NCBI Bookshelf . Neuromuscular Blocking - An Overview | ScienceDirect Topics",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 14,
    "question": "A 45-year-old female presents to the emergency department with altered mental status, flushed skin, and tremors after starting a new antidepressant. On examination, there is hyperreflexia in the lower extremities, muscle rigidity, and clonus. Which syndrome should be considered in her case?",
    "options": {
      "A": "Malignant Hyperthermia",
      "B": "Serotonin Syndrome",
      "C": "Neuroleptic Malignant Syndrome",
      "D": "Heat Exhaustion"
    },
    "correct_answer": "B",
    "explanation": "Correct answer: B) Serotonin Syndrome Explanation: Malignant Hyperthermia (Option A ruled out) Serotonin Syndrome (Option B) Neuroleptic Malignant Syndrome (Option C ruled out) Definition A life-threatening condition triggered by certain anaesthetics. Often linked to mutations in the ryanodine receptor (RyR1) gene. A potentially life-threatening condition resulting from excessive serotonergic activity. A rare, potentially fatal condition linked to dopamine receptor antagonists, primarily antipsychotics. Triggers Volatile anaesthetics (e.g., halothane, isoflurane) and succinylcholine. Use of serotonergic medications, antidepressants , drug interactions, or overdose (e.g., SSRIs , tramadol). High-potency antipsychotics (e.g., haloperidol), rapid withdrawal of dopaminergic drugs. Mechanism Dysregulation of calcium release in skeletal muscle leads to hypermetabolic state. Increased serotonin synthesis, impaired metabolism, or enhanced receptor activation. D2 receptor blockade leads to decreased dopaminergic activity and calcium handling issues. Symptoms Rapidly increasing body temperature (up to 1°C every 5 minutes) Muscle rigidity Metabolic acidosis Altered mental status (e.g., agitation, confusion) Autonomic instability (e.g., tachycardia, hypertension) Neuromuscular signs (e.g., tremors, clonus) Hyperreflexia, positive Babinski sign, muscle rigidity, and flushed skin. Severe muscle rigidity Hyperthermia Altered mental status (e.g., confusion, agitation) Autonomic dysfunction (e.g., fluctuations in blood pressure) Management Administer dantrolene to reduce calcium release and muscle rigidity. Discontinue serotonergic agents. Supportive care, including IV fluids and benzodiazepines Discontinue neuroleptics and provide supportive care. Consider bromocriptine or dantrolene in severe cases. Heat Exhaustion (Option D): While this condition can cause hyperthermia and altered mental status, it does not explain the muscle rigidity and the other symptoms observed in this patient. Reference: Miller’s Anaesthesia, 9th Edition, Page 498 Malignant hyperthermia Neuroleptic Malignant Syndrome",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  },
  {
    "q_no": 15,
    "question": "A 30-year-old female patient is scheduled for laparoscopic cholecystectomy under daycare anaesthesia. Which muscle relaxant would be appropriate to ensure rapid recovery while minimising residual effects?",
    "options": {
      "A": "Succinylcholine",
      "B": "Cisatracurium",
      "C": "Rocuronium with Sugammadex",
      "D": "Pancuronium"
    },
    "correct_answer": "C",
    "explanation": "Correct answer: C) Rocuronium with Sugammadex Explanation: An ideal muscle relaxant used in daycare surgery should have a rapid onset, minimal side effects, and a rapid and reliable recovery to avoid postoperative residual curarization (PORC). Rocuronium, when used with sugammadex , allows for rapid onset of muscle relaxation and a reliable and fast reversal of the neuromuscular blockade. This is ideal for day-care procedures where a quick recovery and discharge are essential. Sugammadex binds rocuronium directly, providing a rapid and safe reversal of muscle paralysis. Succinylcholine (Option A): This muscle relaxant offers a rapid onset and an ultrashort duration of action. However, it is often avoided in daycare anaesthesia due to the risk of severe side effects, including malignant hyperthermia, hyperkalemia, and postoperative muscle pain, which can complicate recovery. Cisatracurium (Option B): Cisatracurium is an intermediate-acting muscle relaxant that is also safe and effective. However, its onset is slower than rocuronium, and it lacks a specific reversal agent as fast as sugammadex, which can prolong the time to discharge in daycare settings. Pancuronium (Option D): This long-acting muscle relaxant is known for significant residual neuromuscular effects, which can lead to extended recovery times. It also increases the risk of postoperative pulmonary complications, which is inappropriate for daycare anaesthesia. Reference: Rocuronium and sugammadex and rapid emerge in day-care surgery Daycare Anaesthesia , Page 7 Residual neuromuscular block Miller’s Anaesthesia, 9th Edition, Page 799, 812",
    "image": null,
    "explanation_image": null,
    "chapter_heading": "Neuromuscular Blockade-Muscle Relaxants"
  }
]